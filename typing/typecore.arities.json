[
  {"type":"pat_construct","text":"Record","arity":0},
  {"type":"pat_construct","text":"Variant","arity":0},
  {"type":"pat_construct","text":"Record","arity":0},
  {"type":"pat_construct","text":"Variant","arity":0},
  {"type":"pat_construct","text":"Lident\n\"true\"","arity":1},
  {"type":"pat_construct","text":"Lident\n\"false\"","arity":1},
  {"type":"pat_construct","text":"Ldot\n(_, \"true\")","arity":2},
  {"type":"pat_construct","text":"Ldot\n(_, \"false\")","arity":2},
  {"type":"construct","text":"Boolean","arity":0},
  {"type":"pat_construct","text":"Lident\n\"[]\"","arity":1},
  {"type":"pat_construct","text":"Lident\n\"::\"","arity":1},
  {"type":"pat_construct","text":"Ldot\n(_, \"[]\")","arity":2},
  {"type":"pat_construct","text":"Ldot\n(_, \"::\")","arity":2},
  {"type":"construct","text":"List","arity":0},
  {"type":"pat_construct","text":"Lident\n\"()\"","arity":1},
  {"type":"pat_construct","text":"Ldot\n(_, \"()\")","arity":2},
  {"type":"construct","text":"Unit","arity":0},
  {"type":"construct","text":"Constructor","arity":0},
  {"type":"apply","text":"ref\n  (fun _env _md -> assert false : Env.t ->\n                                    Parsetree.module_expr ->\n                                      (Typedtree.module_expr * Shape.t))","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(ref (fun ?used_slot:_ _ -> assert false) : (?used_slot:bool ref ->\n                                               override_flag ->\n                                                 Env.t ->\n                                                   Location.t ->\n                                                     Longident.t loc ->\n                                                       (Path.t * Env.t))\n                                              ref)","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(ref (fun ?used_slot:_ _ -> assert false) : (?used_slot:bool ref ->\n                                               Env.t ->\n                                                 Parsetree.open_declaration\n                                                   ->\n                                                   (open_declaration *\n                                                     Types.signature * Env.t))\n                                              ref)","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref (fun _ -> assert false)","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref\n  (fun _env _s -> assert false : Env.t ->\n                                   Location.t ->\n                                     Parsetree.class_structure ->\n                                       (Typedtree.class_structure * string\n                                         list))","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Cmt_format.add_saved_type (Cmt_format.Partial_expression node)","arity":1},
  {"type":"construct","text":"Cmt_format.Partial_expression node","arity":1},
  {"type":"apply","text":"Cmt_format.add_saved_type (Cmt_format.Partial_pattern (Value, node))","arity":1},
  {"type":"construct","text":"Cmt_format.Partial_pattern (Value, node)","arity":2},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"Cmt_format.add_saved_type (Cmt_format.Partial_pattern (Computation, node))","arity":1},
  {"type":"construct","text":"Cmt_format.Partial_pattern (Computation, node)","arity":2},
  {"type":"construct","text":"Computation","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_int\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_int","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_char\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_char","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_string\n(_, _, _)","arity":3},
  {"type":"apply","text":"instance ?partial:None Predef.type_string","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_float\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_float","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_int32\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_int32","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_int64\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_int64","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Const_nativeint\n_","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_nativeint","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pconst_integer\n(i, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"Ok (Const_int (Misc.Int_literal_converter.int i))","arity":1},
  {"type":"construct","text":"Const_int (Misc.Int_literal_converter.int i)","arity":1},
  {"type":"apply","text":"Misc.Int_literal_converter.int i","arity":1},
  {"type":"pat_construct","text":"Failure\n_","arity":1},
  {"type":"construct","text":"Error (Literal_overflow \"int\")","arity":1},
  {"type":"construct","text":"Literal_overflow \"int\"","arity":1},
  {"type":"pat_construct","text":"Pconst_integer\n(i, Some 'l')","arity":2},
  {"type":"pat_construct","text":"Some\n'l'","arity":1},
  {"type":"construct","text":"Ok (Const_int32 (Misc.Int_literal_converter.int32 i))","arity":1},
  {"type":"construct","text":"Const_int32 (Misc.Int_literal_converter.int32 i)","arity":1},
  {"type":"apply","text":"Misc.Int_literal_converter.int32 i","arity":1},
  {"type":"pat_construct","text":"Failure\n_","arity":1},
  {"type":"construct","text":"Error (Literal_overflow \"int32\")","arity":1},
  {"type":"construct","text":"Literal_overflow \"int32\"","arity":1},
  {"type":"pat_construct","text":"Pconst_integer\n(i, Some 'L')","arity":2},
  {"type":"pat_construct","text":"Some\n'L'","arity":1},
  {"type":"construct","text":"Ok (Const_int64 (Misc.Int_literal_converter.int64 i))","arity":1},
  {"type":"construct","text":"Const_int64 (Misc.Int_literal_converter.int64 i)","arity":1},
  {"type":"apply","text":"Misc.Int_literal_converter.int64 i","arity":1},
  {"type":"pat_construct","text":"Failure\n_","arity":1},
  {"type":"construct","text":"Error (Literal_overflow \"int64\")","arity":1},
  {"type":"construct","text":"Literal_overflow \"int64\"","arity":1},
  {"type":"pat_construct","text":"Pconst_integer\n(i, Some 'n')","arity":2},
  {"type":"pat_construct","text":"Some\n'n'","arity":1},
  {"type":"construct","text":"Ok (Const_nativeint (Misc.Int_literal_converter.nativeint i))","arity":1},
  {"type":"construct","text":"Const_nativeint (Misc.Int_literal_converter.nativeint i)","arity":1},
  {"type":"apply","text":"Misc.Int_literal_converter.nativeint i","arity":1},
  {"type":"pat_construct","text":"Failure\n_","arity":1},
  {"type":"construct","text":"Error (Literal_overflow \"nativeint\")","arity":1},
  {"type":"construct","text":"Literal_overflow \"nativeint\"","arity":1},
  {"type":"pat_construct","text":"Pconst_integer\n(i, Some c)","arity":2},
  {"type":"pat_construct","text":"Some\nc","arity":1},
  {"type":"construct","text":"Error (Unknown_literal (i, c))","arity":1},
  {"type":"construct","text":"Unknown_literal (i, c)","arity":2},
  {"type":"pat_construct","text":"Pconst_char\nc","arity":1},
  {"type":"construct","text":"Ok (Const_char c)","arity":1},
  {"type":"construct","text":"Const_char c","arity":1},
  {"type":"pat_construct","text":"Pconst_string\n(s, loc, d)","arity":3},
  {"type":"construct","text":"Ok (Const_string (s, loc, d))","arity":1},
  {"type":"construct","text":"Const_string (s, loc, d)","arity":3},
  {"type":"pat_construct","text":"Pconst_float\n(f, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"Ok (Const_float f)","arity":1},
  {"type":"construct","text":"Const_float f","arity":1},
  {"type":"pat_construct","text":"Pconst_float\n(f, Some c)","arity":2},
  {"type":"pat_construct","text":"Some\nc","arity":1},
  {"type":"construct","text":"Error (Unknown_literal (f, c))","arity":1},
  {"type":"construct","text":"Unknown_literal (f, c)","arity":2},
  {"type":"apply","text":"constant_desc const.pconst_desc","arity":1},
  {"type":"apply","text":"constant cst","arity":1},
  {"type":"pat_construct","text":"Ok\nc","arity":1},
  {"type":"pat_construct","text":"Error\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, err))","arity":1},
  {"type":"construct","text":"Error (loc, env, err)","arity":3},
  {"type":"apply","text":"newty (Tconstr (Predef.path_option, [ty], (ref Mnil)))","arity":1},
  {"type":"construct","text":"Tconstr (Predef.path_option, [ty], (ref Mnil))","arity":3},
  {"type":"construct","text":"[ty]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"ref Mnil","arity":1},
  {"type":"construct","text":"Mnil","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Longident.Lident \"None\"","arity":1},
  {"type":"apply","text":"Env.find_ident_constructor Predef.ident_none env","arity":2},
  {"type":"apply","text":"mkexp (Texp_construct ((mknoloc lid), cnone, [])) ty loc env","arity":4},
  {"type":"construct","text":"Texp_construct ((mknoloc lid), cnone, [])","arity":3},
  {"type":"apply","text":"mknoloc lid","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Longident.Lident \"Some\"","arity":1},
  {"type":"apply","text":"Env.find_ident_constructor Predef.ident_some env","arity":2},
  {"type":"apply","text":"mkexp (Texp_construct ((mknoloc lid), csome, [texp]))\n  (type_option texp.exp_type) texp.exp_loc texp.exp_env","arity":4},
  {"type":"construct","text":"Texp_construct ((mknoloc lid), csome, [texp])","arity":3},
  {"type":"apply","text":"mknoloc lid","arity":1},
  {"type":"construct","text":"[texp]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_option texp.exp_type","arity":1},
  {"type":"apply","text":"get_desc (expand_head env ty)","arity":1},
  {"type":"apply","text":"expand_head env ty","arity":2},
  {"type":"pat_construct","text":"Tconstr\n(path, ty::[], _)","arity":3},
  {"type":"pat_construct","text":"ty::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"Path.same path Predef.path_option","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Env.has_local_constraints env","arity":1},
  {"type":"apply","text":"generic_instance ty","arity":1},
  {"type":"apply","text":"extract_concrete_typedecl env (protect_expansion env ty)","arity":2},
  {"type":"apply","text":"protect_expansion env ty","arity":2},
  {"type":"apply","text":"extract_concrete_typedecl_protected env ty","arity":2},
  {"type":"pat_construct","text":"Typedecl\n(p0, p, { type_kind = Type_record (fields, _) })","arity":3},
  {"type":"pat_construct","text":"Type_record\n(fields, _)","arity":2},
  {"type":"construct","text":"Record_type (p0, p, fields)","arity":3},
  {"type":"pat_construct","text":"Has_no_typedecl","arity":0},
  {"type":"pat_construct","text":"Typedecl\n(_, _, _)","arity":3},
  {"type":"construct","text":"Not_a_record_type","arity":0},
  {"type":"pat_construct","text":"May_have_typedecl","arity":0},
  {"type":"construct","text":"Maybe_a_record_type","arity":0},
  {"type":"apply","text":"extract_concrete_typedecl_protected env ty","arity":2},
  {"type":"pat_construct","text":"Typedecl\n(p0, p, { type_kind = Type_variant (cstrs, _) })","arity":3},
  {"type":"pat_construct","text":"Type_variant\n(cstrs, _)","arity":2},
  {"type":"construct","text":"Variant_type (p0, p, cstrs)","arity":3},
  {"type":"pat_construct","text":"Typedecl\n(p0, p, { type_kind = Type_open })","arity":3},
  {"type":"pat_construct","text":"Type_open","arity":0},
  {"type":"construct","text":"Variant_type (p0, p, [])","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Has_no_typedecl","arity":0},
  {"type":"pat_construct","text":"Typedecl\n(_, _, _)","arity":3},
  {"type":"construct","text":"Not_a_variant_type","arity":0},
  {"type":"pat_construct","text":"May_have_typedecl","arity":0},
  {"type":"construct","text":"Maybe_a_variant_type","arity":0},
  {"type":"apply","text":"extract_concrete_record env ty","arity":2},
  {"type":"pat_construct","text":"Record_type\n(_, _, fields)","arity":3},
  {"type":"apply","text":"List.map (fun l -> l.Types.ld_id) fields","arity":2},
  {"type":"pat_construct","text":"Not_a_record_type","arity":0},
  {"type":"pat_construct","text":"Maybe_a_record_type","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(not (!Clflags.principal)) || ((get_level ty) = generic_level)","arity":2},
  {"type":"apply","text":"not (!Clflags.principal)","arity":1},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"(get_level ty) = generic_level","arity":2},
  {"type":"apply","text":"get_level ty","arity":1},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_var\nname","arity":1},
  {"type":"apply","text":"Ident.create_local name.txt","arity":1},
  {"type":"construct","text":"Val_reg","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Some (id, desc)","arity":1},
  {"type":"pat_construct","text":"Ppat_extension\next","arity":1},
  {"type":"apply","text":"raise (Error_forward (Builtin_attributes.error_of_extension ext))","arity":1},
  {"type":"construct","text":"Error_forward (Builtin_attributes.error_of_extension ext)","arity":1},
  {"type":"apply","text":"Builtin_attributes.error_of_extension ext","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, Invalid_continuation_pattern))","arity":1},
  {"type":"construct","text":"Error (loc, env, Invalid_continuation_pattern)","arity":3},
  {"type":"construct","text":"Invalid_continuation_pattern","arity":0},
  {"type":"apply","text":"unify env ty expected_ty","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Expr_type_clash (err, None, None))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Expr_type_clash (err, None, None)))","arity":3},
  {"type":"construct","text":"Expr_type_clash (err, None, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tags\n(l1, l2)","arity":2},
  {"type":"apply","text":"raise (Typetexp.Error (loc, env, (Typetexp.Variant_tags (l1, l2))))","arity":1},
  {"type":"construct","text":"Typetexp.Error (loc, env, (Typetexp.Variant_tags (l1, l2)))","arity":3},
  {"type":"construct","text":"Typetexp.Variant_tags (l1, l2)","arity":2},
  {"type":"apply","text":"unify env ty ty'","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Pattern_type_clash (err, None))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Pattern_type_clash (err, None)))","arity":3},
  {"type":"construct","text":"Pattern_type_clash (err, None)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tags\n(l1, l2)","arity":2},
  {"type":"apply","text":"raise (Typetexp.Error (loc, env, (Typetexp.Variant_tags (l1, l2))))","arity":1},
  {"type":"construct","text":"Typetexp.Error (loc, env, (Typetexp.Variant_tags (l1, l2)))","arity":3},
  {"type":"construct","text":"Typetexp.Variant_tags (l1, l2)","arity":2},
  {"type":"apply","text":"TypePairs.create 0","arity":1},
  {"type":"apply","text":"unify_gadt penv ty ty'","arity":3},
  {"type":"apply","text":"unify (!! penv) ty ty'","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, (!! penv), (Pattern_type_clash (err, None))))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), (Pattern_type_clash (err, None)))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Pattern_type_clash (err, None)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tags\n(l1, l2)","arity":2},
  {"type":"apply","text":"raise (Typetexp.Error (loc, (!! penv), (Typetexp.Variant_tags (l1, l2))))","arity":1},
  {"type":"construct","text":"Typetexp.Error (loc, (!! penv), (Typetexp.Variant_tags (l1, l2)))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Typetexp.Variant_tags (l1, l2)","arity":2},
  {"type":"apply","text":"ignore (unify_pat_types_return_equated_pairs ~refine loc penv ty ty')","arity":1},
  {"type":"apply","text":"unify_pat_types_return_equated_pairs ~refine loc penv ty ty'","arity":5},
  {"type":"apply","text":"unify_pat_types pat.pat_loc env pat.pat_type expected_ty","arity":4},
  {"type":"pat_construct","text":"Error\n(loc, env, Pattern_type_clash (err, None))","arity":3},
  {"type":"pat_construct","text":"Pattern_type_clash\n(err, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Pattern_type_clash (err, sdesc_for_hint))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Pattern_type_clash (err, sdesc_for_hint)))","arity":3},
  {"type":"construct","text":"Pattern_type_clash (err, sdesc_for_hint)","arity":2},
  {"type":"apply","text":"cstr_type_path constr","arity":1},
  {"type":"apply","text":"Env.find_type path (!! penv)","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Ctype.newconstr path (Ctype.instance_list decl.type_params)","arity":2},
  {"type":"apply","text":"Ctype.instance_list decl.type_params","arity":1},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc penv ty' ty","arity":5},
  {"type":"apply","text":"get_desc (expand_head pat.pat_env pat.pat_type)","arity":1},
  {"type":"apply","text":"expand_head pat.pat_env pat.pat_type","arity":2},
  {"type":"pat_construct","text":"Tvariant\nrow","arity":1},
  {"type":"apply","text":"r := row","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"get_row_field tag row","arity":2},
  {"type":"apply","text":"row_field_repr f","arity":1},
  {"type":"pat_construct","text":"Rabsent","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Reither\n(true, [], _)","arity":3},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"not (row_closed row)","arity":1},
  {"type":"apply","text":"row_closed row","arity":1},
  {"type":"apply","text":"link_row_field_ext ~inside:f (rf_present None)","arity":2},
  {"type":"apply","text":"rf_present None","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Reither\n(false, ty::tl, _)","arity":3},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"pat_construct","text":"ty::tl","arity":2},
  {"type":"apply","text":"not (row_closed row)","arity":1},
  {"type":"apply","text":"row_closed row","arity":1},
  {"type":"apply","text":"link_row_field_ext ~inside:f (rf_present (Some ty))","arity":2},
  {"type":"apply","text":"rf_present (Some ty)","arity":1},
  {"type":"construct","text":"Some ty","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Some\npat","arity":1},
  {"type":"apply","text":"List.iter (unify_pat ?sdesc_for_hint:None pat.pat_env pat) (ty :: tl)","arity":2},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None pat.pat_env pat","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"ty :: tl","arity":2},
  {"type":"pat_construct","text":"Reither\n(c, _l, true)","arity":3},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"apply","text":"not (has_fixed_explanation row)","arity":1},
  {"type":"apply","text":"has_fixed_explanation row","arity":1},
  {"type":"apply","text":"link_row_field_ext ~inside:f\n  (rf_either ?use_ext_of:None ~no_arg:c [] ~matched:false)","arity":2},
  {"type":"apply","text":"rf_either ?use_ext_of:None ~no_arg:c [] ~matched:false","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"exists_general_pattern\n  {\n    f =\n      (fun (type k) ->\n         fun (p : k general_pattern) ->\n           match p.pat_desc with\n           | Tpat_variant (_, _, _) -> true\n           | _ -> false)\n  } p","arity":2},
  {"type":"pat_construct","text":"Tpat_variant\n(_, _, _)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"iter_general_pattern\n  {\n    f =\n      (fun (type k) ->\n         fun (p : k general_pattern) ->\n           match p.pat_desc with\n           | Tpat_variant (tag, opat, r) -> finalize_variant p tag opat r\n           | _ -> ())\n  } p","arity":2},
  {"type":"pat_construct","text":"Tpat_variant\n(tag, opat, r)","arity":3},
  {"type":"apply","text":"finalize_variant p tag opat r","arity":4},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\n(id, (desc : Types.value_description))","arity":1},
  {"type":"construct","text":"[{\n   pv_uid = (desc.val_uid);\n   pv_attributes = (desc.val_attributes);\n   pv_kind = Continuation_var;\n   pv_loc = (desc.val_loc);\n   pv_type = (desc.val_type);\n   pv_id = id\n }]","arity":2},
  {"type":"construct","text":"Continuation_var","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Modules_allowed\n{ scope }","arity":1},
  {"type":"construct","text":"Modvars_allowed { module_variables = []; scope }","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Modules_ignored","arity":0},
  {"type":"construct","text":"Modvars_ignored","arity":0},
  {"type":"pat_construct","text":"Modules_rejected","arity":0},
  {"type":"construct","text":"Modvars_rejected","arity":0},
  {"type":"apply","text":"continuation_variable cont","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"List.fold_right\n  (fun { pv_id;_} env ->\n     let name = Ident.name pv_id in\n     if Env.bound_value name env\n     then env\n     else\n       Env.enter_unbound_value name (Val_unbound_ghost_recursive loc_let) env)\n  pv env","arity":3},
  {"type":"apply","text":"Ident.name pv_id","arity":1},
  {"type":"apply","text":"Env.bound_value name env","arity":2},
  {"type":"apply","text":"Env.enter_unbound_value name (Val_unbound_ghost_recursive loc_let) env","arity":3},
  {"type":"construct","text":"Val_unbound_ghost_recursive loc_let","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.exists (fun { pv_id;_} -> (Ident.name pv_id) = name.txt)\n  tps.tps_pattern_variables","arity":2},
  {"type":"apply","text":"(Ident.name pv_id) = name.txt","arity":2},
  {"type":"apply","text":"Ident.name pv_id","arity":1},
  {"type":"apply","text":"raise (Error (loc, Env.empty, (Multiply_bound_variable (name.txt))))","arity":1},
  {"type":"construct","text":"Error (loc, Env.empty, (Multiply_bound_variable (name.txt)))","arity":3},
  {"type":"construct","text":"Multiply_bound_variable (name.txt)","arity":1},
  {"type":"pat_construct","text":"Modvars_ignored","arity":0},
  {"type":"apply","text":"Ident.create_local name.txt","arity":1},
  {"type":"pat_construct","text":"Modvars_rejected","arity":0},
  {"type":"apply","text":"raise (Error (loc, Env.empty, Modules_not_allowed))","arity":1},
  {"type":"construct","text":"Error (loc, Env.empty, Modules_not_allowed)","arity":3},
  {"type":"construct","text":"Modules_not_allowed","arity":0},
  {"type":"pat_construct","text":"Modvars_allowed\n{ scope; module_variables }","arity":1},
  {"type":"apply","text":"Ident.create_scoped ~scope name.txt","arity":2},
  {"type":"construct","text":"{\n  mv_uid = (Uid.mk ~current_unit:(Env.get_unit_name ()));\n  mv_loc = loc;\n  mv_name = name;\n  mv_id = id\n} :: module_variables","arity":2},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Modvars_allowed { module_variables; scope }","arity":1},
  {"type":"apply","text":"Ident.create_local name.txt","arity":1},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"{\n  pv_uid;\n  pv_attributes = attrs;\n  pv_kind = (if is_as_variable then As_var else Std_var);\n  pv_loc = loc;\n  pv_type = ty;\n  pv_id = id\n} :: (tps.tps_pattern_variables)","arity":2},
  {"type":"construct","text":"As_var","arity":0},
  {"type":"construct","text":"Std_var","arity":0},
  {"type":"apply","text":"List.sort\n  (fun { pv_id = x;_} { pv_id = y;_} ->\n     Stdlib.compare (Ident.name x) (Ident.name y)) vs","arity":2},
  {"type":"apply","text":"Stdlib.compare (Ident.name x) (Ident.name y)","arity":2},
  {"type":"apply","text":"Ident.name x","arity":1},
  {"type":"apply","text":"Ident.name y","arity":1},
  {"type":"apply","text":"sort_pattern_variables p1_vs","arity":1},
  {"type":"apply","text":"sort_pattern_variables p2_vs","arity":1},
  {"type":"apply","text":"List.map (fun { pv_id;_} -> pv_id) vs","arity":2},
  {"type":"pat_construct","text":"{ pv_id = x1; pv_type = t1;_}::rem1","arity":2},
  {"type":"pat_construct","text":"{ pv_id = x2; pv_type = t2;_}::rem2","arity":2},
  {"type":"apply","text":"Ident.equal x1 x2","arity":2},
  {"type":"apply","text":"x1 == x2","arity":2},
  {"type":"apply","text":"unify_vars rem1 rem2","arity":2},
  {"type":"apply","text":"unify_var env (newvar ?name:None ()) t1","arity":3},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify env t1 t2","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Or_pattern_type_clash (x1, err))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Or_pattern_type_clash (x1, err)))","arity":3},
  {"type":"construct","text":"Or_pattern_type_clash (x1, err)","arity":2},
  {"type":"construct","text":"(x2, x1) :: (unify_vars rem1 rem2)","arity":2},
  {"type":"apply","text":"unify_vars rem1 rem2","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"{ pv_id;_}::_","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"{ pv_id;_}::_","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, (Orpat_vars (pv_id, []))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Orpat_vars (pv_id, [])))","arity":3},
  {"type":"construct","text":"Orpat_vars (pv_id, [])","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"{ pv_id = x;_}::_","arity":2},
  {"type":"pat_construct","text":"{ pv_id = y;_}::_","arity":2},
  {"type":"apply","text":"(Ident.name x) < (Ident.name y)","arity":2},
  {"type":"apply","text":"Ident.name x","arity":1},
  {"type":"apply","text":"Ident.name y","arity":1},
  {"type":"construct","text":"Orpat_vars (x, (vars p2_vs))","arity":2},
  {"type":"apply","text":"vars p2_vs","arity":1},
  {"type":"construct","text":"Orpat_vars (y, (vars p1_vs))","arity":2},
  {"type":"apply","text":"vars p1_vs","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, err))","arity":1},
  {"type":"construct","text":"Error (loc, env, err)","arity":3},
  {"type":"apply","text":"unify_vars p1_vs p2_vs","arity":2},
  {"type":"apply","text":"build_as_type_extra env p p.pat_extra","arity":3},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"build_as_type_aux env p","arity":2},
  {"type":"pat_construct","text":"((Tpat_type (_, _) | Tpat_open (_, _, _) | Tpat_unpack), _, _)::rest","arity":2},
  {"type":"pat_construct","text":"Tpat_type\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Tpat_open\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Tpat_unpack","arity":0},
  {"type":"apply","text":"build_as_type_extra env p rest","arity":3},
  {"type":"pat_construct","text":"(Tpat_constraint { ctyp_type = ty;_}, _, _)::rest","arity":2},
  {"type":"pat_construct","text":"Tpat_constraint\n{ ctyp_type = ty;_}","arity":1},
  {"type":"apply","text":"(free_variables ?env:None ty) = []","arity":2},
  {"type":"apply","text":"free_variables ?env:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"build_as_type_extra env p rest","arity":3},
  {"type":"apply","text":"with_local_level ?post:(Some generalize_structure)\n  (fun () -> instance ?partial:None ty)","arity":2},
  {"type":"construct","text":"Some generalize_structure","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pat_types p.pat_loc env (instance ?partial:None as_ty)\n  (instance ?partial:None ty)","arity":4},
  {"type":"apply","text":"instance ?partial:None as_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_alias\n(p1, _, _, _)","arity":4},
  {"type":"apply","text":"build_as_type env p1","arity":2},
  {"type":"pat_construct","text":"Tpat_tuple\npl","arity":1},
  {"type":"apply","text":"List.map (build_as_type env) pl","arity":2},
  {"type":"apply","text":"build_as_type env","arity":1},
  {"type":"apply","text":"newty (Ttuple tyl)","arity":1},
  {"type":"construct","text":"Ttuple tyl","arity":1},
  {"type":"pat_construct","text":"Tpat_construct\n(_, cstr, pl, vto)","arity":4},
  {"type":"apply","text":"(cstr.cstr_private = Private) ||\n  ((cstr.cstr_existentials <> []) || (vto <> None))","arity":2},
  {"type":"apply","text":"cstr.cstr_private = Private","arity":2},
  {"type":"construct","text":"Private","arity":0},
  {"type":"apply","text":"(cstr.cstr_existentials <> []) || (vto <> None)","arity":2},
  {"type":"apply","text":"cstr.cstr_existentials <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"vto <> None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.map (build_as_type env) pl","arity":2},
  {"type":"apply","text":"build_as_type env","arity":1},
  {"type":"apply","text":"instance_constructor Keep_existentials_flexible cstr","arity":2},
  {"type":"construct","text":"Keep_existentials_flexible","arity":0},
  {"type":"apply","text":"List.iter2\n  (fun (p, ty) -> unify_pat ?sdesc_for_hint:None env { p with pat_type = ty })\n  (List.combine pl tyl) ty_args","arity":3},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env { p with pat_type = ty }","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.combine pl tyl","arity":2},
  {"type":"pat_construct","text":"Tpat_variant\n(l, p', _)","arity":3},
  {"type":"apply","text":"Option.map (build_as_type env) p'","arity":2},
  {"type":"apply","text":"build_as_type env","arity":1},
  {"type":"construct","text":"[(l, (rf_present ty))]","arity":2},
  {"type":"apply","text":"rf_present ty","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty\n  (Tvariant\n     (create_row ~fields ~more:(newvar ?name:None ()) ~closed:false\n        ~fixed:None ~name:None))","arity":1},
  {"type":"construct","text":"Tvariant\n  (create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed:None\n     ~name:None)","arity":1},
  {"type":"apply","text":"create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed:None\n  ~name:None","arity":5},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_record\n(lpl, _)","arity":2},
  {"type":"apply","text":"snd3 (List.hd lpl)","arity":1},
  {"type":"apply","text":"List.hd lpl","arity":1},
  {"type":"apply","text":"lbl.lbl_private = Private","arity":2},
  {"type":"construct","text":"Private","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.map (fun (_, l, p) -> ((l.lbl_pos), p)) lpl","arity":2},
  {"type":"apply","text":"instance_label ~fixed:false lbl","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env { p with pat_type = ty } ty_res","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"(lbl.lbl_mut = Immutable) &&\n  ((List.mem_assoc lbl.lbl_pos ppl) &&\n     (match get_desc lbl.lbl_arg with | Tpoly (_, _) -> false | _ -> true))","arity":2},
  {"type":"apply","text":"lbl.lbl_mut = Immutable","arity":2},
  {"type":"construct","text":"Immutable","arity":0},
  {"type":"apply","text":"(List.mem_assoc lbl.lbl_pos ppl) &&\n  (match get_desc lbl.lbl_arg with | Tpoly (_, _) -> false | _ -> true)","arity":2},
  {"type":"apply","text":"List.mem_assoc lbl.lbl_pos ppl","arity":2},
  {"type":"apply","text":"get_desc lbl.lbl_arg","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(_, _)","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"List.assoc lbl.lbl_pos ppl","arity":2},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env\n  { arg with pat_type = (build_as_type env arg) } ty_arg","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"build_as_type env arg","arity":2},
  {"type":"apply","text":"instance_label ~fixed:false lbl","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_pat_types p.pat_loc env ty_arg ty_arg'","arity":4},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env p ty_res'","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Array.iter do_label lbl.lbl_all","arity":2},
  {"type":"pat_construct","text":"Tpat_or\n(p1, p2, row)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"build_as_type env p1","arity":2},
  {"type":"apply","text":"build_as_type env p2","arity":2},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env { p2 with pat_type = ty2 } ty1","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nrow","arity":1},
  {"type":"apply","text":"row_repr row","arity":1},
  {"type":"pat_construct","text":"Row\n{ fields; fixed; name }","arity":1},
  {"type":"apply","text":"newty\n  (Tvariant\n     (create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed\n        ~name))","arity":1},
  {"type":"construct","text":"Tvariant\n  (create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed ~name)","arity":1},
  {"type":"apply","text":"create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed ~name","arity":5},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tpat_any","arity":0},
  {"type":"pat_construct","text":"Tpat_var\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Tpat_constant\n_","arity":1},
  {"type":"pat_construct","text":"Tpat_array\n_","arity":1},
  {"type":"pat_construct","text":"Tpat_lazy\n_","arity":1},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed env sty","arity":2},
  {"type":"apply","text":"unify_pat_types loc env ty (instance ?partial:None expected_ty)","arity":4},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"force :: (tps.tps_pattern_force)","arity":2},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(body, tyl)","arity":2},
  {"type":"apply","text":"with_level ~level:generic_level\n  (fun () -> instance_poly ?keep_names:(Some true) ~fixed:false tyl body)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_poly ?keep_names:(Some true) ~fixed:false tyl body","arity":4},
  {"type":"construct","text":"Some true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"with_local_level ?post:(Some generalize) (fun () -> build_as_type env pat)","arity":2},
  {"type":"construct","text":"Some generalize","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"build_as_type env pat","arity":2},
  {"type":"apply","text":"List.map (fun _ -> newgenvar ?name:None ()) args","arity":2},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newgenty (Ttuple vars)","arity":1},
  {"type":"construct","text":"Ttuple vars","arity":1},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc env ty expected_ty","arity":5},
  {"type":"apply","text":"List.map\n  (fun name ->\n     let tv = newvar ?name:None () in\n     let decl =\n       new_local_type ?loc:(Some (name.loc))\n         ?manifest_and_scope:(Some (tv, Ident.lowest_scope)) Definition in\n     let (id, new_env) =\n       Env.enter_type ~scope:expansion_scope name.txt decl (!! penv) in\n     Pattern_env.set_env penv new_env; ({ name with txt = id }, (decl, tv)))\n  name_list","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"new_local_type ?loc:(Some (name.loc))\n  ?manifest_and_scope:(Some (tv, Ident.lowest_scope)) Definition","arity":3},
  {"type":"construct","text":"Some (name.loc)","arity":1},
  {"type":"construct","text":"Some (tv, Ident.lowest_scope)","arity":1},
  {"type":"construct","text":"Definition","arity":0},
  {"type":"apply","text":"Env.enter_type ~scope:expansion_scope name.txt decl (!! penv)","arity":4},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv new_env","arity":2},
  {"type":"apply","text":"with_local_level ?post:(Some (fun (_, ty, _) -> generalize_structure ty))\n  (fun () -> Typetexp.transl_simple_type_delayed (!! penv) sty)","arity":2},
  {"type":"construct","text":"Some (fun (_, ty, _) -> generalize_structure ty)","arity":1},
  {"type":"apply","text":"generalize_structure ty","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed (!! penv) sty","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"force :: (tps.tps_pattern_force)","arity":2},
  {"type":"apply","text":"unify_res ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"ty_arg::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"unify_pat_types cty.ctyp_loc (!! penv) ty1 ty_arg","arity":4},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"[ty2]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"unify_pat_types cty.ctyp_loc (!! penv) ty1 (newty (Ttuple ty_args))","arity":4},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"newty (Ttuple ty_args)","arity":1},
  {"type":"construct","text":"Ttuple ty_args","arity":1},
  {"type":"apply","text":"get_desc (expand_head (!! penv) ty2)","arity":1},
  {"type":"apply","text":"expand_head (!! penv) ty2","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ttuple\ntyl","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ids_decls <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"List.map (fun (x, dm) -> ((x.txt), dm)) ids_decls","arity":2},
  {"type":"apply","text":"List.map fst ids_decls","arity":2},
  {"type":"apply","text":"List.fold_left\n  (fun rem tv ->\n     match get_desc tv with\n     | Tconstr (Path.Pident id, [], _) when List.mem_assoc id rem ->\n         let (decl, tv') = List.assoc id ids_decls in\n         let env =\n           Env.add_type ~check:false ?shape:None id\n             { decl with type_manifest = None } (!! penv) in\n         (Pattern_env.set_env penv env;\n          Btype.cleanup_abbrev ();\n          unify_pat_types cty.ctyp_loc env tv tv';\n          List.remove_assoc id rem)\n     | _ ->\n         raise\n           (Error\n              ((cty.ctyp_loc), (!! penv), (Unbound_existential (ids, ty)))))\n  ids_decls ty_ex","arity":3},
  {"type":"apply","text":"get_desc tv","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(Path.Pident id, [], _)","arity":3},
  {"type":"pat_construct","text":"Path.Pident\nid","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"List.mem_assoc id rem","arity":2},
  {"type":"apply","text":"List.assoc id ids_decls","arity":2},
  {"type":"apply","text":"Env.add_type ~check:false ?shape:None id { decl with type_manifest = None }\n  (!! penv)","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv env","arity":2},
  {"type":"apply","text":"Btype.cleanup_abbrev ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify_pat_types cty.ctyp_loc env tv tv'","arity":4},
  {"type":"apply","text":"List.remove_assoc id rem","arity":2},
  {"type":"apply","text":"raise (Error ((cty.ctyp_loc), (!! penv), (Unbound_existential (ids, ty))))","arity":1},
  {"type":"construct","text":"Error ((cty.ctyp_loc), (!! penv), (Unbound_existential (ids, ty)))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Unbound_existential (ids, ty)","arity":2},
  {"type":"apply","text":"ref ids","arity":1},
  {"type":"apply","text":"List.iter\n  (fun (id, (decl, tv')) ->\n     let tv' = expand_head (!! penv) tv' in\n     (match get_desc tv' with\n      | Tconstr (Path.Pident id', [], _) ->\n          (if List.exists (Ident.same id') (!bound_ids)\n           then\n             raise\n               (Error\n                  ((cty.ctyp_loc), (!! penv),\n                    (Bind_existential (Bind_already_bound, id, tv'))));\n           if\n             ((Ident.scope id') <> penv.equations_scope) ||\n               ((Ident.compare_stamp id id') > 0)\n           then\n             raise\n               (Error\n                  ((cty.ctyp_loc), (!! penv),\n                    (Bind_existential (Bind_not_in_scope, id, tv'))));\n           bound_ids := (id' :: (!bound_ids)))\n      | _ ->\n          raise\n            (Error\n               ((cty.ctyp_loc), (!! penv),\n                 (Bind_existential (Bind_non_locally_abstract, id, tv')))));\n     (let env =\n        Env.add_type ~check:false ?shape:None id\n          { decl with type_manifest = (Some (correct_levels tv')) } (\n          !! penv) in\n      Pattern_env.set_env penv env)) rem","arity":2},
  {"type":"apply","text":"expand_head (!! penv) tv'","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"get_desc tv'","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(Path.Pident id', [], _)","arity":3},
  {"type":"pat_construct","text":"Path.Pident\nid'","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"List.exists (Ident.same id') (!bound_ids)","arity":2},
  {"type":"apply","text":"Ident.same id'","arity":1},
  {"type":"apply","text":"!bound_ids","arity":1},
  {"type":"apply","text":"raise\n  (Error\n     ((cty.ctyp_loc), (!! penv),\n       (Bind_existential (Bind_already_bound, id, tv'))))","arity":1},
  {"type":"construct","text":"Error\n  ((cty.ctyp_loc), (!! penv),\n    (Bind_existential (Bind_already_bound, id, tv')))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Bind_existential (Bind_already_bound, id, tv')","arity":3},
  {"type":"construct","text":"Bind_already_bound","arity":0},
  {"type":"apply","text":"((Ident.scope id') <> penv.equations_scope) ||\n  ((Ident.compare_stamp id id') > 0)","arity":2},
  {"type":"apply","text":"(Ident.scope id') <> penv.equations_scope","arity":2},
  {"type":"apply","text":"Ident.scope id'","arity":1},
  {"type":"apply","text":"(Ident.compare_stamp id id') > 0","arity":2},
  {"type":"apply","text":"Ident.compare_stamp id id'","arity":2},
  {"type":"apply","text":"raise\n  (Error\n     ((cty.ctyp_loc), (!! penv),\n       (Bind_existential (Bind_not_in_scope, id, tv'))))","arity":1},
  {"type":"construct","text":"Error\n  ((cty.ctyp_loc), (!! penv),\n    (Bind_existential (Bind_not_in_scope, id, tv')))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Bind_existential (Bind_not_in_scope, id, tv')","arity":3},
  {"type":"construct","text":"Bind_not_in_scope","arity":0},
  {"type":"apply","text":"bound_ids := (id' :: (!bound_ids))","arity":2},
  {"type":"construct","text":"id' :: (!bound_ids)","arity":2},
  {"type":"apply","text":"!bound_ids","arity":1},
  {"type":"apply","text":"raise\n  (Error\n     ((cty.ctyp_loc), (!! penv),\n       (Bind_existential (Bind_non_locally_abstract, id, tv'))))","arity":1},
  {"type":"construct","text":"Error\n  ((cty.ctyp_loc), (!! penv),\n    (Bind_existential (Bind_non_locally_abstract, id, tv')))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Bind_existential (Bind_non_locally_abstract, id, tv')","arity":3},
  {"type":"construct","text":"Bind_non_locally_abstract","arity":0},
  {"type":"apply","text":"Env.add_type ~check:false ?shape:None id\n  { decl with type_manifest = (Some (correct_levels tv')) } (!! penv)","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some (correct_levels tv')","arity":1},
  {"type":"apply","text":"correct_levels tv'","arity":1},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv env","arity":2},
  {"type":"apply","text":"rem <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Btype.cleanup_abbrev ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Some ((List.map fst ids_decls), cty)","arity":1},
  {"type":"apply","text":"List.map fst ids_decls","arity":2},
  {"type":"apply","text":"unify_head_only ~refine loc penv (instance ?partial:None expected_ty) constr","arity":5},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"refine || (constr.cstr_generalized && (no_existentials = None))","arity":2},
  {"type":"apply","text":"constr.cstr_generalized && (no_existentials = None)","arity":2},
  {"type":"apply","text":"no_existentials = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pat_types_return_equated_pairs ~refine loc penv ty_res expected_ty","arity":5},
  {"type":"apply","text":"with_local_level_iter\n  (fun () ->\n     let expected_ty = instance ?partial:None expected_ty in\n     let (ty_args, ty_res, equated_types, existential_ctyp) =\n       match existential_styp with\n       | None ->\n           let (ty_args, ty_res, _) =\n             instance_constructor (Make_existentials_abstract penv) constr in\n           (ty_args, ty_res, (unify_res ty_res expected_ty), None)\n       | Some (name_list, sty) ->\n           let existential_treatment =\n             if name_list = []\n             then Make_existentials_abstract penv\n             else Keep_existentials_flexible in\n           let (ty_args, ty_res, ty_ex) =\n             instance_constructor existential_treatment constr in\n           let equated_types = lazy (unify_res ty_res expected_ty) in\n           let (ty_args, existential_ctyp) =\n             solve_constructor_annotation tps penv name_list sty ty_args\n               ty_ex (fun () -> ignore (Lazy.force equated_types)) in\n           (ty_args, ty_res, (Lazy.force equated_types), existential_ctyp) in\n     if constr.cstr_existentials <> []\n     then\n       lower_variables_only (!! penv) penv.Pattern_env.equations_scope ty_res;\n     ((ty_args, equated_types, existential_ctyp), (expected_ty :: ty_res ::\n       ty_args))) ~post:generalize_structure","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"instance_constructor (Make_existentials_abstract penv) constr","arity":2},
  {"type":"construct","text":"Make_existentials_abstract penv","arity":1},
  {"type":"apply","text":"unify_res ty_res expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(name_list, sty)","arity":1},
  {"type":"apply","text":"name_list = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Make_existentials_abstract penv","arity":1},
  {"type":"construct","text":"Keep_existentials_flexible","arity":0},
  {"type":"apply","text":"instance_constructor existential_treatment constr","arity":2},
  {"type":"apply","text":"unify_res ty_res expected_ty","arity":2},
  {"type":"apply","text":"solve_constructor_annotation tps penv name_list sty ty_args ty_ex\n  (fun () -> ignore (Lazy.force equated_types))","arity":7},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"ignore (Lazy.force equated_types)","arity":1},
  {"type":"apply","text":"Lazy.force equated_types","arity":1},
  {"type":"apply","text":"Lazy.force equated_types","arity":1},
  {"type":"apply","text":"constr.cstr_existentials <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"lower_variables_only (!! penv) penv.Pattern_env.equations_scope ty_res","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"expected_ty :: ty_res :: ty_args","arity":2},
  {"type":"construct","text":"ty_res :: ty_args","arity":2},
  {"type":"apply","text":"(!Clflags.principal) && (not refine)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"not refine","arity":1},
  {"type":"apply","text":"TypePairs.iter\n  (fun (t1, t2) ->\n     generalize_structure t1;\n     generalize_structure t2;\n     if not ((fully_generic t1) && (fully_generic t2))\n     then\n       (let msg =\n          Format.asprintf\n            (CamlinternalFormatBasics.Format\n               ((CamlinternalFormatBasics.String_literal\n                   (\"typing this pattern requires considering\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\"and\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.String_literal\n                                                       (\"as equal.\",\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@,\", 0, 0)),\n                                                              (CamlinternalFormatBasics.String_literal\n                                                                 (\"But the knowledge of these types\",\n                                                                   CamlinternalFormatBasics.End_of_format)))))))))))))))))))),\n                 \"typing this pattern requires considering@ %a@ and@ %a@ as equal.@,But the knowledge of these types\"))\n            Printtyp.type_expr t1 Printtyp.type_expr t2 in\n        Location.prerr_warning loc (Warnings.Not_principal msg);\n        raise Warn_only_once)) equated_types","arity":2},
  {"type":"apply","text":"generalize_structure t1","arity":1},
  {"type":"apply","text":"generalize_structure t2","arity":1},
  {"type":"apply","text":"not ((fully_generic t1) && (fully_generic t2))","arity":1},
  {"type":"apply","text":"(fully_generic t1) && (fully_generic t2)","arity":2},
  {"type":"apply","text":"fully_generic t1","arity":1},
  {"type":"apply","text":"fully_generic t2","arity":1},
  {"type":"apply","text":"Format.asprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"typing this pattern requires considering\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"and\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String_literal\n                                             (\"as equal.\",\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@,\", 0, 0)),\n                                                    (CamlinternalFormatBasics.String_literal\n                                                       (\"But the knowledge of these types\",\n                                                         CamlinternalFormatBasics.End_of_format)))))))))))))))))))),\n       \"typing this pattern requires considering@ %a@ and@ %a@ as equal.@,But the knowledge of these types\"))\n  Printtyp.type_expr t1 Printtyp.type_expr t2","arity":5},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"typing this pattern requires considering\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.String_literal\n                        (\"and\",\n                          (CamlinternalFormatBasics.Formatting_lit\n                             ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                               (CamlinternalFormatBasics.Alpha\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"as equal.\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               ((CamlinternalFormatBasics.Break\n                                                   (\"@,\", 0, 0)),\n                                                 (CamlinternalFormatBasics.String_literal\n                                                    (\"But the knowledge of these types\",\n                                                      CamlinternalFormatBasics.End_of_format)))))))))))))))))))),\n    \"typing this pattern requires considering@ %a@ and@ %a@ as equal.@,But the knowledge of these types\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"typing this pattern requires considering\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"and\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@ \", 1, 0)),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"as equal.\",\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           ((CamlinternalFormatBasics.Break\n                                               (\"@,\", 0, 0)),\n                                             (CamlinternalFormatBasics.String_literal\n                                                (\"But the knowledge of these types\",\n                                                  CamlinternalFormatBasics.End_of_format)))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"and\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"as equal.\",\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      ((CamlinternalFormatBasics.Break\n                                          (\"@,\", 0, 0)),\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\"But the knowledge of these types\",\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"and\",\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"as equal.\",\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@,\", 0, 0)),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"But the knowledge of these types\",\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"and\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"as equal.\",\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"But the knowledge of these types\",\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"and\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"as equal.\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                           (CamlinternalFormatBasics.String_literal\n                              (\"But the knowledge of these types\",\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"as equal.\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"But the knowledge of these types\",\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"as equal.\",\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"But the knowledge of these types\",\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"as equal.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"But the knowledge of these types\",\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"as equal.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"But the knowledge of these types\",\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"But the knowledge of these types\",\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@,\", 0, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"But the knowledge of these types\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Not_principal msg)","arity":2},
  {"type":"construct","text":"Warnings.Not_principal msg","arity":1},
  {"type":"apply","text":"raise Warn_only_once","arity":1},
  {"type":"construct","text":"Warn_only_once","arity":0},
  {"type":"pat_construct","text":"Warn_only_once","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_iter\n  (fun () ->\n     let (_, ty_arg, ty_res) = instance_label ~fixed:false label in\n     (try\n        unify_pat_types_refine ~refine loc penv ty_res\n          (instance ?partial:None record_ty)\n      with\n      | Error (_loc, _env, Pattern_type_clash (err, _)) ->\n          raise\n            (Error\n               ((label_lid.loc), (!! penv),\n                 (Label_mismatch ((label_lid.txt), err)))));\n     (ty_arg, [ty_res; ty_arg])) ~post:generalize_structure","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_label ~fixed:false label","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc penv ty_res\n  (instance ?partial:None record_ty)","arity":5},
  {"type":"apply","text":"instance ?partial:None record_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Error\n(_loc, _env, Pattern_type_clash (err, _))","arity":3},
  {"type":"pat_construct","text":"Pattern_type_clash\n(err, _)","arity":2},
  {"type":"apply","text":"raise\n  (Error\n     ((label_lid.loc), (!! penv), (Label_mismatch ((label_lid.txt), err))))","arity":1},
  {"type":"construct","text":"Error ((label_lid.loc), (!! penv), (Label_mismatch ((label_lid.txt), err)))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Label_mismatch ((label_lid.txt), err)","arity":2},
  {"type":"construct","text":"[ty_res; ty_arg]","arity":2},
  {"type":"construct","text":"[ty_arg]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc env (Predef.type_array ty_elt) expected_ty","arity":5},
  {"type":"apply","text":"Predef.type_array ty_elt","arity":1},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc env (Predef.type_lazy_t nv)\n  (generic_instance expected_ty)","arity":5},
  {"type":"apply","text":"Predef.type_lazy_t nv","arity":1},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"apply","text":"with_local_level ?post:(Some (fun (_, ty, _) -> generalize_structure ty))\n  (fun () -> Typetexp.transl_simple_type_delayed env sty)","arity":2},
  {"type":"construct","text":"Some (fun (_, ty, _) -> generalize_structure ty)","arity":1},
  {"type":"apply","text":"generalize_structure ty","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed env sty","arity":2},
  {"type":"construct","text":"force :: (tps.tps_pattern_force)","arity":2},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pat_types loc env ty (instance ?partial:None expected_ty)","arity":4},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[newgenvar ?name:None ()]","arity":2},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[(tag, (rf_either ?use_ext_of:None ~no_arg arg_type ~matched:true))]","arity":2},
  {"type":"apply","text":"rf_either ?use_ext_of:None ~no_arg arg_type ~matched:true","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"create_row ~fields ~more ~closed:false ~fixed:None ~name:None","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"make_row (newgenvar ?name:None ())","arity":1},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"apply","text":"tag <> Parmatch.some_private_tag","arity":2},
  {"type":"apply","text":"unify_pat_types_refine ~refine loc env (newgenty (Tvariant row)) expected_ty","arity":5},
  {"type":"apply","text":"newgenty (Tvariant row)","arity":1},
  {"type":"construct","text":"Tvariant row","arity":1},
  {"type":"apply","text":"make_row (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Env.lookup_type ?use:None ~loc:(lid.loc) lid.txt env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.map (fun _ -> newvar ?name:None ()) decl.type_params","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"expand_head env (newty (Tconstr (path, tyl, (ref Mnil))))","arity":2},
  {"type":"apply","text":"newty (Tconstr (path, tyl, (ref Mnil)))","arity":1},
  {"type":"construct","text":"Tconstr (path, tyl, (ref Mnil))","arity":3},
  {"type":"apply","text":"ref Mnil","arity":1},
  {"type":"construct","text":"Mnil","arity":0},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tvariant\nrow","arity":1},
  {"type":"apply","text":"static_row row","arity":1},
  {"type":"apply","text":"raise (Error ((lid.loc), env, (Not_a_polymorphic_variant_type (lid.txt))))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, (Not_a_polymorphic_variant_type (lid.txt)))","arity":3},
  {"type":"construct","text":"Not_a_polymorphic_variant_type (lid.txt)","arity":1},
  {"type":"apply","text":"List.fold_left\n  (fun (pats, fields) (l, f) ->\n     match row_field_repr f with\n     | Rpresent (None) ->\n         let f = rf_either ?use_ext_of:None ~no_arg:true [] ~matched:true in\n         (((l, None) :: pats), ((l, f) :: fields))\n     | Rpresent (Some ty) ->\n         let f = rf_either ?use_ext_of:None ~no_arg:false [ty] ~matched:true in\n         (((l,\n             (Some\n                {\n                  pat_attributes = [];\n                  pat_env = env;\n                  pat_type = ty;\n                  pat_extra = [];\n                  pat_loc = Location.none;\n                  pat_desc = Tpat_any\n                })) :: pats), ((l, f) :: fields))\n     | _ -> (pats, fields)) ([], []) (row_fields row0)","arity":3},
  {"type":"apply","text":"row_field_repr f","arity":1},
  {"type":"pat_construct","text":"Rpresent\n(None)","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"rf_either ?use_ext_of:None ~no_arg:true [] ~matched:true","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"(l, None) :: pats","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"(l, f) :: fields","arity":2},
  {"type":"pat_construct","text":"Rpresent (Some\nty)","arity":1},
  {"type":"pat_construct","text":"Some\nty","arity":1},
  {"type":"apply","text":"rf_either ?use_ext_of:None ~no_arg:false [ty] ~matched:true","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"[ty]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"(l,\n  (Some\n     {\n       pat_attributes = [];\n       pat_env = env;\n       pat_type = ty;\n       pat_extra = [];\n       pat_loc = Location.none;\n       pat_desc = Tpat_any\n     }))\n:: pats","arity":2},
  {"type":"construct","text":"Some\n  {\n    pat_attributes = [];\n    pat_env = env;\n    pat_type = ty;\n    pat_extra = [];\n    pat_loc = Location.none;\n    pat_desc = Tpat_any\n  }","arity":1},
  {"type":"construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"(l, f) :: fields","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"row_fields row0","arity":1},
  {"type":"apply","text":"List.rev fields","arity":1},
  {"type":"construct","text":"Some (path, tyl)","arity":1},
  {"type":"apply","text":"create_row ~fields ~more ~closed:false ~fixed:None ~name","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newty (Tvariant (make_row (newvar ?name:None ())))","arity":1},
  {"type":"construct","text":"Tvariant (make_row (newvar ?name:None ()))","arity":1},
  {"type":"apply","text":"make_row (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"ref (make_row (newvar ?name:None ()))","arity":1},
  {"type":"apply","text":"make_row (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.map\n  (fun (l, p) ->\n     {\n       pat_attributes = [];\n       pat_env = env;\n       pat_type = ty;\n       pat_extra = [];\n       pat_loc = gloc;\n       pat_desc = (Tpat_variant (l, p, row'))\n     }) pats","arity":2},
  {"type":"construct","text":"Tpat_variant (l, p, row')","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"raise (Error ((lid.loc), env, (Not_a_polymorphic_variant_type (lid.txt))))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, (Not_a_polymorphic_variant_type (lid.txt)))","arity":3},
  {"type":"construct","text":"Not_a_polymorphic_variant_type (lid.txt)","arity":1},
  {"type":"pat_construct","text":"pat::pats","arity":2},
  {"type":"apply","text":"List.fold_left\n  (fun pat pat0 ->\n     {\n       pat_attributes = [];\n       pat_env = env;\n       pat_type = ty;\n       pat_extra = [];\n       pat_loc = gloc;\n       pat_desc = (Tpat_or (pat0, pat, (Some row0)))\n     }) pat pats","arity":3},
  {"type":"construct","text":"Tpat_or (pat0, pat, (Some row0))","arity":3},
  {"type":"construct","text":"Some row0","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"rp { r with pat_loc = loc }","arity":1},
  {"type":"construct","text":"Some (Env.find_type p env)","arity":1},
  {"type":"apply","text":"Env.find_type p env","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n{ type_manifest = Some ty }","arity":1},
  {"type":"pat_construct","text":"Some\nty","arity":1},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(p, _, _)","arity":3},
  {"type":"apply","text":"expand_path env p","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Env.normalize_type_path None env p","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Path.same p p'","arity":2},
  {"type":"apply","text":"expand_path env p'","arity":2},
  {"type":"apply","text":"Path.same (expand_path env tpath1) (expand_path env tpath2)","arity":2},
  {"type":"apply","text":"expand_path env tpath1","arity":2},
  {"type":"apply","text":"expand_path env tpath2","arity":2},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(p, _, _)","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"get_constr_type_path (get_type d)","arity":1},
  {"type":"apply","text":"get_type d","arity":1},
  {"type":"apply","text":"lookup_all_from_type lid.loc usage type_path env","arity":4},
  {"type":"pat_construct","text":"Longident.Lident\nname","arity":1},
  {"type":"apply","text":"List.find (fun (nd, _) -> (get_name nd) = name) descrs","arity":2},
  {"type":"apply","text":"(get_name nd) = name","arity":2},
  {"type":"apply","text":"get_name nd","arity":1},
  {"type":"apply","text":"use ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"List.map (fun (nd, _) -> get_name nd) descrs","arity":2},
  {"type":"apply","text":"get_name nd","arity":1},
  {"type":"apply","text":"raise\n  (Wrong_name_disambiguation\n     (env, { valid_names; name = { lid with txt = name }; kind; type_path }))","arity":1},
  {"type":"construct","text":"Wrong_name_disambiguation\n  (env, { valid_names; name = { lid with txt = name }; kind; type_path })","arity":2},
  {"type":"apply","text":"raise Not_found","arity":1},
  {"type":"construct","text":"Not_found","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"List.rev acc","arity":1},
  {"type":"pat_construct","text":"x::rem","arity":2},
  {"type":"apply","text":"List.exists (eq x) acc","arity":2},
  {"type":"apply","text":"eq x","arity":1},
  {"type":"apply","text":"unique eq acc rem","arity":3},
  {"type":"apply","text":"unique eq (x :: acc) rem","arity":3},
  {"type":"construct","text":"x :: acc","arity":2},
  {"type":"apply","text":"get_type_path lbl","arity":1},
  {"type":"apply","text":"List.map (fun (lbl, _) -> get_type_path lbl) others","arity":2},
  {"type":"apply","text":"get_type_path lbl","arity":1},
  {"type":"apply","text":"unique (compare_type_path env) [tpath] others","arity":3},
  {"type":"apply","text":"compare_type_path env","arity":1},
  {"type":"construct","text":"[tpath]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"_::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"wrap_printing_env ~error:true env\n  (fun () -> reset (); strings_of_paths (Some Type) tpaths)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"reset ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"strings_of_paths (Some Type) tpaths","arity":2},
  {"type":"construct","text":"Some Type","arity":1},
  {"type":"construct","text":"Type","arity":0},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"apply","text":"raise Not_found","arity":1},
  {"type":"construct","text":"Not_found","arity":0},
  {"type":"pat_construct","text":"Ok\nlbls","arity":1},
  {"type":"apply","text":"get_type_path lbl","arity":1},
  {"type":"apply","text":"compare_type_path env tpath lbl_tpath","arity":3},
  {"type":"apply","text":"List.find check_type lbls","arity":2},
  {"type":"apply","text":"Warnings.is_active (Ambiguous_name ([], [], false, \"\"))","arity":1},
  {"type":"construct","text":"Ambiguous_name ([], [], false, \"\")","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Printtyp.Conflicts.reset ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"ambiguous_types env lbl rest","arity":3},
  {"type":"apply","text":"Printtyp.Conflicts.err_msg ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nmsg","arity":1},
  {"type":"apply","text":"Format.asprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format),\n       \"%t\")) msg","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format),\n    \"%t\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"paths <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"warn lid.loc\n  (Warnings.Ambiguous_name\n     ([Longident.last lid.txt], paths, false, expansion))","arity":2},
  {"type":"construct","text":"Warnings.Ambiguous_name ([Longident.last lid.txt], paths, false, expansion)","arity":4},
  {"type":"construct","text":"[Longident.last lid.txt]","arity":2},
  {"type":"apply","text":"Longident.last lid.txt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Datatype_kind.label_name kind","arity":1},
  {"type":"apply","text":"warn lid.loc\n  (Warnings.Not_principal (\"this type-based \" ^ (name ^ \" disambiguation\")))","arity":2},
  {"type":"construct","text":"Warnings.Not_principal (\"this type-based \" ^ (name ^ \" disambiguation\"))","arity":1},
  {"type":"apply","text":"\"this type-based \" ^ (name ^ \" disambiguation\")","arity":2},
  {"type":"apply","text":"name ^ \" disambiguation\"","arity":2},
  {"type":"apply","text":"Warnings.is_active (Name_out_of_scope (\"\", [], false))","arity":1},
  {"type":"construct","text":"Name_out_of_scope (\"\", [], false)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Printtyp.wrap_printing_env ~error:true env\n  (fun () -> Printtyp.string_of_path tpath)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.string_of_path tpath","arity":1},
  {"type":"apply","text":"warn lid.loc\n  (Warnings.Name_out_of_scope (path_s, [Longident.last lid.txt], false))","arity":2},
  {"type":"construct","text":"Warnings.Name_out_of_scope (path_s, [Longident.last lid.txt], false)","arity":3},
  {"type":"construct","text":"[Longident.last lid.txt]","arity":2},
  {"type":"apply","text":"Longident.last lid.txt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ok\n((lab1, _)::_)","arity":1},
  {"type":"pat_construct","text":"(lab1, _)::_","arity":2},
  {"type":"apply","text":"lab1 == lbl","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"warn lid.loc (Warnings.Disambiguated_name (get_name lbl))","arity":2},
  {"type":"construct","text":"Warnings.Disambiguated_name (get_name lbl)","arity":1},
  {"type":"apply","text":"get_name lbl","arity":1},
  {"type":"pat_construct","text":"Ok\nlbls","arity":1},
  {"type":"pat_construct","text":"Error\n(loc', env', err)","arity":1},
  {"type":"apply","text":"Env.lookup_error loc' env' err","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"filter (force_error candidates_in_scope)","arity":1},
  {"type":"apply","text":"force_error candidates_in_scope","arity":1},
  {"type":"pat_construct","text":"Ok\n[]","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Error\n[]","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Error\n((lbl, _use)::_rest)","arity":1},
  {"type":"pat_construct","text":"(lbl, _use)::_rest","arity":2},
  {"type":"pat_construct","text":"Ok\n((lbl, use)::rest)","arity":1},
  {"type":"pat_construct","text":"(lbl, use)::rest","arity":2},
  {"type":"apply","text":"use ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"warn_if_ambiguous warn lid env lbl rest","arity":5},
  {"type":"pat_construct","text":"Some\n(tpath0, tpath, principal)","arity":1},
  {"type":"apply","text":"disambiguate_by_type env tpath candidates_in_scope","arity":3},
  {"type":"apply","text":"use ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"not principal","arity":1},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"apply","text":"warn_non_principal warn lid","arity":2},
  {"type":"pat_construct","text":"Ok\nlbls","arity":1},
  {"type":"apply","text":"filter lbls","arity":1},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"apply","text":"warn_non_principal warn lid","arity":2},
  {"type":"pat_construct","text":"Ok\n[]","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ok\n((lbl', _use')::rest)","arity":1},
  {"type":"pat_construct","text":"(lbl', _use')::rest","arity":2},
  {"type":"apply","text":"get_type_path lbl'","arity":1},
  {"type":"apply","text":"not (compare_type_path env tpath lbl_tpath)","arity":1},
  {"type":"apply","text":"compare_type_path env tpath lbl_tpath","arity":3},
  {"type":"apply","text":"warn_non_principal warn lid","arity":2},
  {"type":"apply","text":"warn_if_ambiguous warn lid env lbl rest","arity":5},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"lookup_from_type env tpath usage lid","arity":4},
  {"type":"apply","text":"in_env lbl","arity":1},
  {"type":"apply","text":"warn_out_of_scope warn lid env tpath","arity":4},
  {"type":"apply","text":"not principal","arity":1},
  {"type":"apply","text":"warn_non_principal warn lid","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"filter (force_error candidates_in_scope)","arity":1},
  {"type":"apply","text":"force_error candidates_in_scope","arity":1},
  {"type":"pat_construct","text":"Ok\nlbls","arity":1},
  {"type":"pat_construct","text":"Error\nlbls","arity":1},
  {"type":"apply","text":"expand_path env tpath","arity":2},
  {"type":"apply","text":"List.map\n  (fun (lbl, _) ->\n     let tp0 = get_type_path lbl in let tp = expand_path env tp0 in (tp0, tp))\n  lbls","arity":2},
  {"type":"apply","text":"get_type_path lbl","arity":1},
  {"type":"apply","text":"expand_path env tp0","arity":2},
  {"type":"apply","text":"raise\n  (Error ((lid.loc), env, (Name_type_mismatch (kind, (lid.txt), tp, tpl))))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, (Name_type_mismatch (kind, (lid.txt), tp, tpl)))","arity":3},
  {"type":"construct","text":"Name_type_mismatch (kind, (lid.txt), tp, tpl)","arity":4},
  {"type":"apply","text":"in_env lbl","arity":1},
  {"type":"apply","text":"warn_if_disambiguated_name warn lid lbl candidates_in_scope","arity":4},
  {"type":"apply","text":"f x","arity":1},
  {"type":"pat_construct","text":"Wrong_name_disambiguation\n(env, wrong_name)","arity":2},
  {"type":"apply","text":"raise\n  (Error (((wrong_name.name).loc), env, (Wrong_name (msg, ty, wrong_name))))","arity":1},
  {"type":"construct","text":"Error (((wrong_name.name).loc), env, (Wrong_name (msg, ty, wrong_name)))","arity":3},
  {"type":"construct","text":"Wrong_name (msg, ty, wrong_name)","arity":3},
  {"type":"construct","text":"Datatype_kind.Record","arity":0},
  {"type":"apply","text":"Env.lookup_all_labels_from_type ?use:None ~loc usage path env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Record_regular","arity":0},
  {"type":"pat_construct","text":"Record_float","arity":0},
  {"type":"pat_construct","text":"Record_unboxed\nfalse","arity":1},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Record_unboxed\ntrue","arity":1},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Record_inlined\n_","arity":1},
  {"type":"pat_construct","text":"Record_extension\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Hashtbl.create ?random:None 8","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Array.iter (fun lbl -> Hashtbl.add lbls lbl.lbl_name ()) lbl.lbl_all","arity":2},
  {"type":"apply","text":"Hashtbl.add lbls lbl.lbl_name ()","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.for_all (Hashtbl.mem lbls) ids","arity":2},
  {"type":"apply","text":"Hashtbl.mem lbls","arity":1},
  {"type":"apply","text":"(not closed) || ((List.length ids) = (Array.length lbl.lbl_all))","arity":2},
  {"type":"apply","text":"not closed","arity":1},
  {"type":"apply","text":"(List.length ids) = (Array.length lbl.lbl_all)","arity":2},
  {"type":"apply","text":"List.length ids","arity":1},
  {"type":"apply","text":"Array.length lbl.lbl_all","arity":1},
  {"type":"apply","text":"List.filter check_ids labels","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Error labels","arity":1},
  {"type":"apply","text":"List.filter check_closed labels","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Error labels","arity":1},
  {"type":"construct","text":"Ok labels","arity":1},
  {"type":"apply","text":"List.map (fun (lid, _) -> Longident.last lid.txt) lid_a_list","arity":2},
  {"type":"apply","text":"Longident.last lid.txt","arity":1},
  {"type":"apply","text":"ref false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"ref \"\"","arity":1},
  {"type":"pat_construct","text":"Not_principal\n_","arity":1},
  {"type":"apply","text":"w_pr := true","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Ambiguous_name\n(s::[], l, _, ex)","arity":4},
  {"type":"pat_construct","text":"s::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"w_amb := ((s, l, ex) :: (!w_amb))","arity":2},
  {"type":"construct","text":"(s, l, ex) :: (!w_amb)","arity":2},
  {"type":"apply","text":"!w_amb","arity":1},
  {"type":"pat_construct","text":"Name_out_of_scope\n(ty, s::[], _)","arity":3},
  {"type":"pat_construct","text":"s::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"w_scope := (s :: (!w_scope))","arity":2},
  {"type":"construct","text":"s :: (!w_scope)","arity":2},
  {"type":"apply","text":"!w_scope","arity":1},
  {"type":"apply","text":"w_scope_ty := ty","arity":2},
  {"type":"apply","text":"Location.prerr_warning loc msg","arity":2},
  {"type":"apply","text":"Env.lookup_all_labels ?use:None ~loc:(lid.loc) usage lid.txt env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"(disambiguate_label_by_ids closed ids : Label.nonempty_candidate_filter)","arity":2},
  {"type":"apply","text":"Label.disambiguate ?warn:(Some warn) ?filter:(Some filter) usage lid env\n  expected_type scope","arity":7},
  {"type":"construct","text":"Some warn","arity":1},
  {"type":"construct","text":"Some filter","arity":1},
  {"type":"apply","text":"List.map\n  (fun (lid, _) ->\n     match lid.txt with\n     | Longident.Ldot (_, _) -> Some (process_label lid)\n     | _ -> None) lid_a_list","arity":2},
  {"type":"pat_construct","text":"Longident.Ldot\n(_, _)","arity":2},
  {"type":"construct","text":"Some (process_label lid)","arity":1},
  {"type":"apply","text":"process_label lid","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.find_map\n  (function\n   | ({ txt = Longident.Ldot (modname, _);_}, _) -> Some modname\n   | _ -> None) lid_a_list","arity":2},
  {"type":"pat_construct","text":"Longident.Ldot\n(modname, _)","arity":2},
  {"type":"construct","text":"Some modname","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.map2\n  (fun lid_a lbl ->\n     match (lbl, lid_a) with\n     | (Some lbl, (lid, a)) -> (lid, lbl, a)\n     | (None, (lid, a)) ->\n         let qual_lid =\n           match (qual, (lid.txt)) with\n           | (Some modname, Longident.Lident s) ->\n               { lid with txt = (Longident.Ldot (modname, s)) }\n           | _ -> lid in\n         (lid, (process_label qual_lid), a)) lid_a_list lbl_list","arity":3},
  {"type":"pat_construct","text":"Some\nlbl","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nmodname","arity":1},
  {"type":"pat_construct","text":"Longident.Lident\ns","arity":1},
  {"type":"construct","text":"Longident.Ldot (modname, s)","arity":2},
  {"type":"apply","text":"process_label qual_lid","arity":1},
  {"type":"apply","text":"!w_pr","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc\n  (Warnings.Not_principal \"this type-based record disambiguation\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"this type-based record disambiguation\"","arity":1},
  {"type":"apply","text":"List.rev (!w_amb)","arity":1},
  {"type":"apply","text":"!w_amb","arity":1},
  {"type":"pat_construct","text":"(_, types, ex)::_","arity":2},
  {"type":"apply","text":"List.map (fun (_, lbl, _) -> Label.get_type_path lbl) lbl_a_list","arity":2},
  {"type":"apply","text":"Label.get_type_path lbl","arity":1},
  {"type":"apply","text":"List.hd paths","arity":1},
  {"type":"apply","text":"List.for_all (compare_type_path env path) (List.tl paths)","arity":2},
  {"type":"apply","text":"compare_type_path env path","arity":2},
  {"type":"apply","text":"List.tl paths","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc\n  (Warnings.Ambiguous_name ((List.map fst3 amb), types, true, ex))","arity":2},
  {"type":"construct","text":"Warnings.Ambiguous_name ((List.map fst3 amb), types, true, ex)","arity":4},
  {"type":"apply","text":"List.map fst3 amb","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"List.iter\n  (fun (s, l, ex) ->\n     Location.prerr_warning loc (Warnings.Ambiguous_name ([s], l, false, ex)))\n  amb","arity":2},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Ambiguous_name ([s], l, false, ex))","arity":2},
  {"type":"construct","text":"Warnings.Ambiguous_name ([s], l, false, ex)","arity":4},
  {"type":"construct","text":"[s]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(!w_scope) <> []","arity":2},
  {"type":"apply","text":"!w_scope","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Location.prerr_warning loc\n  (Warnings.Name_out_of_scope ((!w_scope_ty), (List.rev (!w_scope)), true))","arity":2},
  {"type":"construct","text":"Warnings.Name_out_of_scope ((!w_scope_ty), (List.rev (!w_scope)), true)","arity":3},
  {"type":"apply","text":"!w_scope_ty","arity":1},
  {"type":"apply","text":"List.rev (!w_scope)","arity":1},
  {"type":"apply","text":"!w_scope","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"List.fold_right (fun x k ys -> f x (fun y -> k (y :: ys))) xs\n  (fun ys -> k (List.rev ys)) []","arity":4},
  {"type":"apply","text":"f x (fun y -> k (y :: ys))","arity":2},
  {"type":"apply","text":"k (y :: ys)","arity":1},
  {"type":"construct","text":"y :: ys","arity":2},
  {"type":"apply","text":"k (List.rev ys)","arity":1},
  {"type":"apply","text":"List.rev ys","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"disambiguate_lid_a_list loc closed env usage expected_type lid_a_list","arity":6},
  {"type":"apply","text":"List.sort\n  (fun (_, lbl1, _) (_, lbl2, _) -> compare lbl1.lbl_pos lbl2.lbl_pos)\n  lbl_a_list","arity":2},
  {"type":"apply","text":"compare lbl1.lbl_pos lbl2.lbl_pos","arity":2},
  {"type":"apply","text":"List.map type_lbl_a lbl_a_list","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"(_, label1, _)::_","arity":2},
  {"type":"apply","text":"Array.make (Array.length all) false","arity":2},
  {"type":"apply","text":"Array.length all","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"defined.(label.lbl_pos)","arity":2},
  {"type":"apply","text":"raise (Error (loc, Env.empty, (Label_multiply_defined (label.lbl_name))))","arity":1},
  {"type":"construct","text":"Error (loc, Env.empty, (Label_multiply_defined (label.lbl_name)))","arity":3},
  {"type":"construct","text":"Label_multiply_defined (label.lbl_name)","arity":1},
  {"type":"apply","text":"defined.(label.lbl_pos) <- true","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"List.iter check_defined lbl_pat_list","arity":2},
  {"type":"apply","text":"(closed = Closed) &&\n  (Warnings.is_active (Warnings.Missing_record_field_pattern \"\"))","arity":2},
  {"type":"apply","text":"closed = Closed","arity":2},
  {"type":"construct","text":"Closed","arity":0},
  {"type":"apply","text":"Warnings.is_active (Warnings.Missing_record_field_pattern \"\")","arity":1},
  {"type":"construct","text":"Warnings.Missing_record_field_pattern \"\"","arity":1},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"(Array.length all) - 1","arity":2},
  {"type":"apply","text":"Array.length all","arity":1},
  {"type":"apply","text":"not (defined.(i))","arity":1},
  {"type":"apply","text":"defined.(i)","arity":2},
  {"type":"apply","text":"undefined := (((all.(i)).lbl_name) :: (!undefined))","arity":2},
  {"type":"construct","text":"((all.(i)).lbl_name) :: (!undefined)","arity":2},
  {"type":"apply","text":"all.(i)","arity":2},
  {"type":"apply","text":"!undefined","arity":1},
  {"type":"apply","text":"(!undefined) <> []","arity":2},
  {"type":"apply","text":"!undefined","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"String.concat \", \" (List.rev (!undefined))","arity":2},
  {"type":"apply","text":"List.rev (!undefined)","arity":1},
  {"type":"apply","text":"!undefined","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Missing_record_field_pattern u)","arity":2},
  {"type":"construct","text":"Warnings.Missing_record_field_pattern u","arity":1},
  {"type":"construct","text":"Datatype_kind.Variant","arity":0},
  {"type":"apply","text":"Env.lookup_all_constructors_from_type ?use:None ~loc usage path env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"_::_","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"Env.find_type path env","arity":2},
  {"type":"pat_construct","text":"Type_open","arity":0},
  {"type":"apply","text":"compare_type_path env path (get_constr_type_path (get_type lbl))","arity":3},
  {"type":"apply","text":"get_constr_type_path (get_type lbl)","arity":1},
  {"type":"apply","text":"get_type lbl","arity":1},
  {"type":"apply","text":"filter x","arity":1},
  {"type":"construct","text":"(x, ignore) :: acc","arity":2},
  {"type":"apply","text":"Env.fold_constructors add_valid None env []","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nsplit_pat","arity":1},
  {"type":"construct","text":"({ (htc.untyped_case) with pattern = split_pat }, data) :: lst","arity":2},
  {"type":"apply","text":"List.fold_right\n  (fun (htc, data) (vals, exns) ->\n     let pat = htc.typed_pat in\n     match split_pattern pat with\n     | (Some _, Some _) when (htc.untyped_case).has_guard ->\n         raise\n           (Error\n              ((pat.pat_loc), env,\n                Mixed_value_and_exception_patterns_under_guard))\n     | (vp, ep) -> ((add_case vals htc data vp), (add_case exns htc data ep)))\n  zipped_cases ([], [])","arity":3},
  {"type":"apply","text":"split_pattern pat","arity":1},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"apply","text":"raise\n  (Error ((pat.pat_loc), env, Mixed_value_and_exception_patterns_under_guard))","arity":1},
  {"type":"construct","text":"Error ((pat.pat_loc), env, Mixed_value_and_exception_patterns_under_guard)","arity":3},
  {"type":"construct","text":"Mixed_value_and_exception_patterns_under_guard","arity":0},
  {"type":"apply","text":"add_case vals htc data vp","arity":4},
  {"type":"apply","text":"add_case exns htc data ep","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ppat_constant\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_interval\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"pat_construct","text":"Ppat_variant\n(_, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_construct\n(_, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_type\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_var\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_unpack\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_extension\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ppat_exception\np","arity":1},
  {"type":"pat_construct","text":"Ppat_variant\n(_, Some p)","arity":2},
  {"type":"pat_construct","text":"Some\np","arity":1},
  {"type":"pat_construct","text":"Ppat_construct\n(_, Some (_, p))","arity":2},
  {"type":"pat_construct","text":"Some\n(_, p)","arity":1},
  {"type":"pat_construct","text":"Ppat_constraint\n(p, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_alias\n(p, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_lazy\np","arity":1},
  {"type":"pat_construct","text":"Ppat_open\n(_, p)","arity":2},
  {"type":"apply","text":"has_literal_pattern p","arity":1},
  {"type":"pat_construct","text":"Ppat_tuple\nps","arity":1},
  {"type":"pat_construct","text":"Ppat_array\nps","arity":1},
  {"type":"apply","text":"List.exists has_literal_pattern ps","arity":2},
  {"type":"pat_construct","text":"Ppat_record\n(ps, _)","arity":2},
  {"type":"apply","text":"List.exists (fun (_, p) -> has_literal_pattern p) ps","arity":2},
  {"type":"apply","text":"has_literal_pattern p","arity":1},
  {"type":"pat_construct","text":"Ppat_effect\n(p, q)","arity":2},
  {"type":"pat_construct","text":"Ppat_or\n(p, q)","arity":2},
  {"type":"apply","text":"(has_literal_pattern p) || (has_literal_pattern q)","arity":2},
  {"type":"apply","text":"has_literal_pattern p","arity":1},
  {"type":"apply","text":"has_literal_pattern q","arity":1},
  {"type":"apply","text":"Ctype.check_scope_escape env level ty","arity":3},
  {"type":"pat_construct","text":"Escape\nesc","arity":1},
  {"type":"construct","text":"[Escape (map_escape trivial_expansion esc)]","arity":2},
  {"type":"construct","text":"Escape (map_escape trivial_expansion esc)","arity":1},
  {"type":"apply","text":"map_escape trivial_expansion esc","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise\n  (Error\n     (loc, env,\n       (Pattern_type_clash ((Errortrace.unification_error ~trace), None))))","arity":1},
  {"type":"construct","text":"Error\n  (loc, env,\n    (Pattern_type_clash ((Errortrace.unification_error ~trace), None)))","arity":3},
  {"type":"construct","text":"Pattern_type_clash ((Errortrace.unification_error ~trace), None)","arity":2},
  {"type":"apply","text":"Errortrace.unification_error ~trace","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"pat_construct","text":"Computation","arity":0},
  {"type":"apply","text":"as_computation_pattern pat","arity":1},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"apply","text":"raise (Error ((pat.pat_loc), (pat.pat_env), Exception_pattern_disallowed))","arity":1},
  {"type":"construct","text":"Error ((pat.pat_loc), (pat.pat_env), Exception_pattern_disallowed)","arity":3},
  {"type":"construct","text":"Exception_pattern_disallowed","arity":0},
  {"type":"pat_construct","text":"Computation","arity":0},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"apply","text":"as_computation_pattern pat","arity":1},
  {"type":"pat_construct","text":"Computation","arity":0},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:None sp.ppat_attributes\n  (fun () -> type_pat_aux tps category ~no_existentials ~penv sp expected_ty)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_pat_aux tps category ~no_existentials ~penv sp expected_ty","arity":6},
  {"type":"apply","text":"type_pat tps category ~no_existentials ~penv","arity":4},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:(Some (sp.ppat_desc)) (!! penv) x\n  (instance ?partial:None expected_ty)","arity":4},
  {"type":"construct","text":"Some (sp.ppat_desc)","arity":1},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"apply","text":"rp x","arity":1},
  {"type":"pat_construct","text":"Computation","arity":0},
  {"type":"apply","text":"rcp x","arity":1},
  {"type":"apply","text":"crp (pure category x)","arity":1},
  {"type":"apply","text":"pure category x","arity":2},
  {"type":"apply","text":"crp (only_impure category x)","arity":1},
  {"type":"apply","text":"only_impure category x","arity":2},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (instance ?partial:None expected_ty);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = Tpat_any\n  }","arity":1},
  {"type":"construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_var\nname","arity":1},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"enter_variable ?is_module:None ?is_as_variable:None tps loc name ty\n  sp.ppat_attributes","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = ty;\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_var (id, name, uid))\n  }","arity":1},
  {"type":"construct","text":"Tpat_var (id, name, uid)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_unpack\nname","arity":1},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = [];\n    pat_env = (!! penv);\n    pat_type = t;\n    pat_extra = [(Tpat_unpack, (name.loc), (sp.ppat_attributes))];\n    pat_loc = (sp.ppat_loc);\n    pat_desc = Tpat_any\n  }","arity":1},
  {"type":"construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"[(Tpat_unpack, (name.loc), (sp.ppat_attributes))]","arity":2},
  {"type":"construct","text":"Tpat_unpack","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\ns","arity":1},
  {"type":"apply","text":"enter_variable ?is_module:(Some true) ?is_as_variable:None tps loc v t\n  sp.ppat_attributes","arity":7},
  {"type":"construct","text":"Some true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = [];\n    pat_env = (!! penv);\n    pat_type = t;\n    pat_extra = [(Tpat_unpack, loc, (sp.ppat_attributes))];\n    pat_loc = (sp.ppat_loc);\n    pat_desc = (Tpat_var (id, v, uid))\n  }","arity":1},
  {"type":"construct","text":"Tpat_var (id, v, uid)","arity":3},
  {"type":"construct","text":"[(Tpat_unpack, loc, (sp.ppat_attributes))]","arity":2},
  {"type":"construct","text":"Tpat_unpack","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ppat_constraint\n({ ppat_desc = Ppat_var name; ppat_loc = lloc; ppat_attributes = attrs },\n ({ ptyp_desc = Ptyp_poly (_, _) } as sty))","arity":2},
  {"type":"pat_construct","text":"Ppat_var\nname","arity":1},
  {"type":"pat_construct","text":"Ptyp_poly\n(_, _)","arity":2},
  {"type":"apply","text":"solve_Ppat_poly_constraint tps (!! penv) lloc sty expected_ty","arity":5},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"enter_variable ?is_module:None ?is_as_variable:None tps lloc name ty' attrs","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = [];\n    pat_env = (!! penv);\n    pat_type = ty;\n    pat_extra = [((Tpat_constraint cty), loc, (sp.ppat_attributes))];\n    pat_loc = lloc;\n    pat_desc = (Tpat_var (id, name, uid))\n  }","arity":1},
  {"type":"construct","text":"Tpat_var (id, name, uid)","arity":3},
  {"type":"construct","text":"[((Tpat_constraint cty), loc, (sp.ppat_attributes))]","arity":2},
  {"type":"construct","text":"Tpat_constraint cty","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ppat_alias\n(sq, name)","arity":2},
  {"type":"apply","text":"type_pat tps Value ?penv:None sq expected_ty","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"solve_Ppat_alias (!! penv) q","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"enter_variable ?is_module:None ?is_as_variable:(Some true) tps name.loc name\n  ty_var sp.ppat_attributes","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (q.pat_type);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_alias (q, id, name, uid))\n  }","arity":1},
  {"type":"construct","text":"Tpat_alias (q, id, name, uid)","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_constant\ncst","arity":1},
  {"type":"apply","text":"constant_or_raise (!! penv) loc cst","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"rvp\n  (solve_expected\n     {\n       pat_attributes = (sp.ppat_attributes);\n       pat_env = (!! penv);\n       pat_type = (type_constant cst);\n       pat_extra = [];\n       pat_loc = loc;\n       pat_desc = (Tpat_constant cst)\n     })","arity":1},
  {"type":"apply","text":"solve_expected\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (type_constant cst);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_constant cst)\n  }","arity":1},
  {"type":"construct","text":"Tpat_constant cst","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_constant cst","arity":1},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_interval\n(c1, c2)","arity":2},
  {"type":"pat_construct","text":"Pconst_char\nc","arity":1},
  {"type":"apply","text":"raise (Error (loc, (!! penv), Invalid_interval))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), Invalid_interval)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Invalid_interval","arity":0},
  {"type":"apply","text":"get_bound c1","arity":1},
  {"type":"apply","text":"get_bound c2","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"c1 = c2","arity":2},
  {"type":"apply","text":"Pat.constant ?loc:(Some gloc) ?attrs:None (Const.char ?loc:(Some gloc) c1)","arity":3},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Const.char ?loc:(Some gloc) c1","arity":2},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"apply","text":"Pat.or_ ?loc:(Some gloc) ?attrs:None\n  (Pat.constant ?loc:(Some gloc) ?attrs:None (Const.char ?loc:(Some gloc) c1))\n  (loop (Char.chr ((Char.code c1) + 1)) c2)","arity":4},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Pat.constant ?loc:(Some gloc) ?attrs:None (Const.char ?loc:(Some gloc) c1)","arity":3},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Const.char ?loc:(Some gloc) c1","arity":2},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"apply","text":"loop (Char.chr ((Char.code c1) + 1)) c2","arity":2},
  {"type":"apply","text":"Char.chr ((Char.code c1) + 1)","arity":1},
  {"type":"apply","text":"(Char.code c1) + 1","arity":2},
  {"type":"apply","text":"Char.code c1","arity":1},
  {"type":"apply","text":"c1 <= c2","arity":2},
  {"type":"apply","text":"loop c1 c2","arity":2},
  {"type":"apply","text":"loop c2 c1","arity":2},
  {"type":"apply","text":"type_pat tps category ?penv:None p expected_ty","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_tuple\nspl","arity":1},
  {"type":"apply","text":"(List.length spl) >= 2","arity":2},
  {"type":"apply","text":"List.length spl","arity":1},
  {"type":"apply","text":"solve_Ppat_tuple ~refine:false loc penv spl expected_ty","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.map2\n  (let arg = type_pat tps Value in function | eta -> arg ?penv:None eta) spl\n  expected_tys","arity":3},
  {"type":"apply","text":"type_pat tps Value","arity":2},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"arg ?penv:None eta","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (newty (Ttuple (List.map (fun p -> p.pat_type) pl)));\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_tuple pl)\n  }","arity":1},
  {"type":"construct","text":"Tpat_tuple pl","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty (Ttuple (List.map (fun p -> p.pat_type) pl))","arity":1},
  {"type":"construct","text":"Ttuple (List.map (fun p -> p.pat_type) pl)","arity":1},
  {"type":"apply","text":"List.map (fun p -> p.pat_type) pl","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_construct\n(lid, sarg)","arity":2},
  {"type":"apply","text":"extract_concrete_variant (!! penv) expected_ty","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Variant_type\n(p0, p, _)","arity":3},
  {"type":"construct","text":"Some (p0, p, (is_principal expected_ty))","arity":1},
  {"type":"apply","text":"is_principal expected_ty","arity":1},
  {"type":"pat_construct","text":"Maybe_a_variant_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_a_variant_type","arity":0},
  {"type":"apply","text":"wrong_kind_sort_of_constructor lid.txt","arity":1},
  {"type":"construct","text":"Wrong_expected_kind (srt, Pattern, expected_ty)","arity":3},
  {"type":"construct","text":"Pattern","arity":0},
  {"type":"apply","text":"raise (Error (loc, (!! penv), error))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), error)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Env.lookup_all_constructors ?use:None ~loc:(lid.loc) Env.Pattern lid.txt\n  (!! penv)","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Env.Pattern","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"wrap_disambiguate \"This variant pattern is expected to have\"\n  (mk_expected ?explanation:None expected_ty)\n  (Constructor.disambiguate ?warn:None ?filter:None Env.Pattern lid (\n     !! penv) expected_type) candidates","arity":4},
  {"type":"apply","text":"mk_expected ?explanation:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Constructor.disambiguate ?warn:None ?filter:None Env.Pattern lid (!! penv)\n  expected_type","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Env.Pattern","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\nr","arity":1},
  {"type":"pat_construct","text":"_::_","arity":2},
  {"type":"apply","text":"raise (Error (loc, (!! penv), (Unexpected_existential (r, name))))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), (Unexpected_existential (r, name)))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Unexpected_existential (r, name)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(vl, { ppat_desc = Ppat_constraint (sp, sty) })","arity":1},
  {"type":"pat_construct","text":"Ppat_constraint\n(sp, sty)","arity":2},
  {"type":"apply","text":"(vl <> []) || (constr.cstr_arity > 1)","arity":2},
  {"type":"apply","text":"vl <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"constr.cstr_arity > 1","arity":2},
  {"type":"construct","text":"Some sp","arity":1},
  {"type":"construct","text":"Some (vl, sty)","arity":1},
  {"type":"pat_construct","text":"Some\n([], sp)","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Some sp","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(_, sp)","arity":1},
  {"type":"apply","text":"raise (Error ((sp.ppat_loc), (!! penv), Missing_type_constraint))","arity":1},
  {"type":"construct","text":"Error ((sp.ppat_loc), (!! penv), Missing_type_constraint)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Missing_type_constraint","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\n{ ppat_desc = Ppat_tuple spl }","arity":1},
  {"type":"pat_construct","text":"Ppat_tuple\nspl","arity":1},
  {"type":"apply","text":"(constr.cstr_arity > 1) ||\n  (Builtin_attributes.explicit_arity sp.ppat_attributes)","arity":2},
  {"type":"apply","text":"constr.cstr_arity > 1","arity":2},
  {"type":"apply","text":"Builtin_attributes.explicit_arity sp.ppat_attributes","arity":1},
  {"type":"pat_construct","text":"Some\n({ ppat_desc = Ppat_any } as sp)","arity":1},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"apply","text":"(constr.cstr_arity = 0) && (existential_styp = None)","arity":2},
  {"type":"apply","text":"constr.cstr_arity = 0","arity":2},
  {"type":"apply","text":"existential_styp = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Location.prerr_warning sp.ppat_loc Warnings.Wildcard_arg_to_constant_constr","arity":2},
  {"type":"construct","text":"Warnings.Wildcard_arg_to_constant_constr","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\n({ ppat_desc = Ppat_any } as sp)","arity":1},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"apply","text":"constr.cstr_arity > 1","arity":2},
  {"type":"apply","text":"replicate_list sp constr.cstr_arity","arity":2},
  {"type":"pat_construct","text":"Some\nsp","arity":1},
  {"type":"construct","text":"[sp]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Builtin_attributes.warn_on_literal_pattern constr.cstr_attributes","arity":1},
  {"type":"apply","text":"List.filter has_literal_pattern sargs","arity":2},
  {"type":"pat_construct","text":"sp::_","arity":2},
  {"type":"apply","text":"Location.prerr_warning sp.ppat_loc Warnings.Fragile_literal_pattern","arity":2},
  {"type":"construct","text":"Warnings.Fragile_literal_pattern","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(List.length sargs) <> constr.cstr_arity","arity":2},
  {"type":"apply","text":"List.length sargs","arity":1},
  {"type":"apply","text":"raise\n  (Error\n     (loc, (!! penv),\n       (Constructor_arity_mismatch\n          ((lid.txt), (constr.cstr_arity), (List.length sargs)))))","arity":1},
  {"type":"construct","text":"Error\n  (loc, (!! penv),\n    (Constructor_arity_mismatch\n       ((lid.txt), (constr.cstr_arity), (List.length sargs))))","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Constructor_arity_mismatch\n  ((lid.txt), (constr.cstr_arity), (List.length sargs))","arity":3},
  {"type":"apply","text":"List.length sargs","arity":1},
  {"type":"apply","text":"solve_Ppat_construct ~refine:false tps penv loc constr no_existentials\n  existential_styp expected_ty","arity":8},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ppat_or\n(p1, p2)","arity":2},
  {"type":"apply","text":"check_non_escaping p1","arity":1},
  {"type":"apply","text":"check_non_escaping p2","arity":1},
  {"type":"pat_construct","text":"Ppat_alias\n(p, _)","arity":2},
  {"type":"apply","text":"check_non_escaping p","arity":1},
  {"type":"pat_construct","text":"Ppat_constraint\n(_, _)","arity":2},
  {"type":"apply","text":"raise (Error ((p.ppat_loc), (!! penv), Inlined_record_escape))","arity":1},
  {"type":"construct","text":"Error ((p.ppat_loc), (!! penv), Inlined_record_escape)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Inlined_record_escape","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"constr.cstr_inlined <> None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.iter check_non_escaping sargs","arity":2},
  {"type":"apply","text":"Option.iter (fun (_, sarg) -> check_non_escaping sarg) sarg","arity":2},
  {"type":"apply","text":"check_non_escaping sarg","arity":1},
  {"type":"apply","text":"List.map2\n  (let arg = type_pat tps Value in function | eta -> arg ?penv:None eta)\n  sargs ty_args","arity":3},
  {"type":"apply","text":"type_pat tps Value","arity":2},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"arg ?penv:None eta","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (instance ?partial:None expected_ty);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_construct (lid, constr, args, existential_ctyp))\n  }","arity":1},
  {"type":"construct","text":"Tpat_construct (lid, constr, args, existential_ctyp)","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_variant\n(tag, sarg)","arity":2},
  {"type":"apply","text":"tag <> Parmatch.some_private_tag","arity":2},
  {"type":"apply","text":"sarg = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"solve_Ppat_variant ~refine:false loc penv tag constant expected_ty","arity":6},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Some\nsp","arity":1},
  {"type":"pat_construct","text":"ty::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Some (type_pat tps Value ?penv:None sp ty)","arity":1},
  {"type":"apply","text":"type_pat tps Value ?penv:None sp ty","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type;\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_variant (tag, arg, (ref row)))\n  }","arity":1},
  {"type":"construct","text":"Tpat_variant (tag, arg, (ref row))","arity":3},
  {"type":"apply","text":"ref row","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_record\n(lid_sp_list, closed)","arity":2},
  {"type":"apply","text":"lid_sp_list <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"extract_concrete_record (!! penv) expected_ty","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Record_type\n(p0, p, _)","arity":3},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"construct","text":"Some (p0, p, (is_principal expected_ty))","arity":1},
  {"type":"apply","text":"is_principal expected_ty","arity":1},
  {"type":"pat_construct","text":"Maybe_a_record_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Not_a_record_type","arity":0},
  {"type":"construct","text":"Wrong_expected_kind (Record, Pattern, expected_ty)","arity":3},
  {"type":"construct","text":"Record","arity":0},
  {"type":"construct","text":"Pattern","arity":0},
  {"type":"apply","text":"raise (Error (loc, (!! penv), error))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), error)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"solve_Ppat_record_field ~refine:false loc penv label label_lid record_ty","arity":6},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_pat tps Value ?penv:None sarg ty_arg","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"check_recordpat_labels loc lbl_pat_list closed","arity":3},
  {"type":"construct","text":"Tpat_record (lbl_pat_list, closed)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None record_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"wrap_disambiguate \"This record pattern is expected to have\"\n  (mk_expected ?explanation:None expected_ty)\n  (type_label_a_list loc false (!! penv) Env.Projection type_label_pat\n     expected_type) lid_sp_list","arity":4},
  {"type":"apply","text":"mk_expected ?explanation:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_label_a_list loc false (!! penv) Env.Projection type_label_pat\n  expected_type","arity":6},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Env.Projection","arity":0},
  {"type":"apply","text":"rvp (solve_expected (make_record_pat lbl_a_list))","arity":1},
  {"type":"apply","text":"solve_expected (make_record_pat lbl_a_list)","arity":1},
  {"type":"apply","text":"make_record_pat lbl_a_list","arity":1},
  {"type":"pat_construct","text":"Ppat_array\nspl","arity":1},
  {"type":"apply","text":"solve_Ppat_array ~refine:false loc penv expected_ty","arity":4},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.map (fun p -> type_pat tps Value ?penv:None p ty_elt) spl","arity":2},
  {"type":"apply","text":"type_pat tps Value ?penv:None p ty_elt","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (instance ?partial:None expected_ty);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_array pl)\n  }","arity":1},
  {"type":"construct","text":"Tpat_array pl","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_or\n(sp1, sp2)","arity":2},
  {"type":"apply","text":"copy_type_pat_state tps","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"copy_type_pat_state tps","arity":1},
  {"type":"apply","text":"with_local_level ?post:None\n  (fun () ->\n     let type_pat_rec tps penv sp =\n       type_pat tps category ?penv:(Some penv) sp expected_ty in\n     let penv1 =\n       Pattern_env.copy ?equations_scope:(Some (get_current_level ())) penv in\n     let penv2 = Pattern_env.copy ?equations_scope:None penv1 in\n     let p1 = type_pat_rec tps1 penv1 sp1 in\n     let p2 = type_pat_rec tps2 penv2 sp2 in\n     ((penv1.env), p1, (penv2.env), p2))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_pat tps category ?penv:(Some penv) sp expected_ty","arity":5},
  {"type":"construct","text":"Some penv","arity":1},
  {"type":"apply","text":"Pattern_env.copy ?equations_scope:(Some (get_current_level ())) penv","arity":2},
  {"type":"construct","text":"Some (get_current_level ())","arity":1},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Pattern_env.copy ?equations_scope:None penv1","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_pat_rec tps1 penv1 sp1","arity":3},
  {"type":"apply","text":"type_pat_rec tps2 penv2 sp2","arity":3},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.iter\n  (fun { pv_type; pv_loc;_} ->\n     check_scope_escape pv_loc env1 outer_lev pv_type) p1_variables","arity":2},
  {"type":"apply","text":"check_scope_escape pv_loc env1 outer_lev pv_type","arity":4},
  {"type":"apply","text":"List.iter\n  (fun { pv_type; pv_loc;_} ->\n     check_scope_escape pv_loc env2 outer_lev pv_type) p2_variables","arity":2},
  {"type":"apply","text":"check_scope_escape pv_loc env2 outer_lev pv_type","arity":4},
  {"type":"apply","text":"enter_orpat_variables loc (!! penv) p1_variables p2_variables","arity":4},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"blit_type_pat_state\n  ~src:{\n         tps_module_variables = (tps1.tps_module_variables);\n         tps_pattern_force =\n           (tps2.tps_pattern_force @ tps1.tps_pattern_force);\n         tps_pattern_variables = (tps1.tps_pattern_variables)\n       } ~dst:tps","arity":2},
  {"type":"apply","text":"tps2.tps_pattern_force @ tps1.tps_pattern_force","arity":2},
  {"type":"apply","text":"alpha_pat alpha_env p2","arity":2},
  {"type":"apply","text":"rp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (instance ?partial:None expected_ty);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_or (p1, p2, None))\n  }","arity":1},
  {"type":"construct","text":"Tpat_or (p1, p2, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_lazy\nsp1","arity":1},
  {"type":"apply","text":"solve_Ppat_lazy ~refine:false loc penv expected_ty","arity":4},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_pat tps Value ?penv:None sp1 nv","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rvp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = (instance ?partial:None expected_ty);\n    pat_extra = [];\n    pat_loc = loc;\n    pat_desc = (Tpat_lazy p1)\n  }","arity":1},
  {"type":"construct","text":"Tpat_lazy p1","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_constraint\n(sp, sty)","arity":2},
  {"type":"apply","text":"solve_Ppat_constraint tps loc (!! penv) sty expected_ty","arity":5},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"type_pat tps category ?penv:None sp expected_ty'","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_constraint cty","arity":1},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"pat_construct","text":"Tpat_var\n(id, s, uid)","arity":3},
  {"type":"construct","text":"Tpat_alias ({ p with pat_attributes = []; pat_desc = Tpat_any }, id, s, uid)","arity":4},
  {"type":"construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[extra]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"extra :: (p.pat_extra)","arity":2},
  {"type":"pat_construct","text":"Ppat_type\nlid","arity":1},
  {"type":"apply","text":"build_or_pat (!! penv) loc lid","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"(pure category)\n  (solve_expected\n     {\n       p with\n       pat_extra = (((Tpat_type (path, lid)), loc, (sp.ppat_attributes)) ::\n         (p.pat_extra))\n     })","arity":1},
  {"type":"apply","text":"pure category","arity":1},
  {"type":"apply","text":"solve_expected\n  {\n    p with\n    pat_extra = (((Tpat_type (path, lid)), loc, (sp.ppat_attributes)) ::\n      (p.pat_extra))\n  }","arity":1},
  {"type":"construct","text":"((Tpat_type (path, lid)), loc, (sp.ppat_attributes)) :: (p.pat_extra)","arity":2},
  {"type":"construct","text":"Tpat_type (path, lid)","arity":2},
  {"type":"pat_construct","text":"Ppat_open\n(lid, p)","arity":2},
  {"type":"apply","text":"(!type_open) ?used_slot:None Asttypes.Fresh (!! penv) sp.ppat_loc lid","arity":5},
  {"type":"apply","text":"!type_open","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Asttypes.Fresh","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv new_env","arity":2},
  {"type":"apply","text":"type_pat tps category ?penv:(Some penv) p expected_ty","arity":5},
  {"type":"construct","text":"Some penv","arity":1},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Env.remove_last_open path new_env","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Some\nclosed_env","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv closed_env","arity":2},
  {"type":"construct","text":"((Tpat_open (path, lid, new_env)), loc, (sp.ppat_attributes)) ::\n(p.pat_extra)","arity":2},
  {"type":"construct","text":"Tpat_open (path, lid, new_env)","arity":3},
  {"type":"pat_construct","text":"Ppat_exception\np","arity":1},
  {"type":"apply","text":"type_pat tps Value ?penv:None p Predef.type_exn","arity":5},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rcp\n  {\n    pat_attributes = (sp.ppat_attributes);\n    pat_env = (!! penv);\n    pat_type = expected_ty;\n    pat_extra = [];\n    pat_loc = (sp.ppat_loc);\n    pat_desc = (Tpat_exception p_exn)\n  }","arity":1},
  {"type":"construct","text":"Tpat_exception p_exn","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"Ppat_effect\n(_, _)","arity":2},
  {"type":"apply","text":"raise (Error (loc, (!! penv), Effect_pattern_below_toplevel))","arity":1},
  {"type":"construct","text":"Error (loc, (!! penv), Effect_pattern_below_toplevel)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"Effect_pattern_below_toplevel","arity":0},
  {"type":"pat_construct","text":"Ppat_extension\next","arity":1},
  {"type":"apply","text":"raise (Error_forward (Builtin_attributes.error_of_extension ext))","arity":1},
  {"type":"construct","text":"Error_forward (Builtin_attributes.error_of_extension ext)","arity":1},
  {"type":"apply","text":"Builtin_attributes.error_of_extension ext","arity":1},
  {"type":"apply","text":"(List.iter (fun { pv_type;_} -> f pv_type) : pattern_variable list -> unit)","arity":1},
  {"type":"apply","text":"f pv_type","arity":1},
  {"type":"apply","text":"List.fold_right\n  (fun { pv_id; pv_type; pv_loc; pv_kind; pv_attributes; pv_uid } env ->\n     let check = if pv_kind = As_var then check_as else check in\n     Env.add_value ?check pv_id\n       {\n         val_uid = pv_uid;\n         val_attributes = pv_attributes;\n         Types.val_loc = pv_loc;\n         val_kind = Val_reg;\n         val_type = pv_type\n       } env) pv env","arity":3},
  {"type":"apply","text":"pv_kind = As_var","arity":2},
  {"type":"construct","text":"As_var","arity":0},
  {"type":"apply","text":"Env.add_value ?check pv_id\n  {\n    val_uid = pv_uid;\n    val_attributes = pv_attributes;\n    Types.val_loc = pv_loc;\n    val_kind = Val_reg;\n    val_type = pv_type\n  } env","arity":4},
  {"type":"construct","text":"Val_reg","arity":0},
  {"type":"pat_construct","text":"Modvars_allowed\nmvs","arity":1},
  {"type":"pat_construct","text":"Modvars_ignored","arity":0},
  {"type":"pat_construct","text":"Modvars_rejected","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"List.fold_left\n  (fun env { mv_id; mv_name; mv_loc; mv_uid } ->\n     Typetexp.TyVarEnv.with_local_scope\n       (fun () ->\n          let (modl, md_shape) =\n            (!type_module) env\n              (let open Ast_helper in\n                 Mod.unpack ?loc:(Some mv_loc) ?attrs:None\n                   (Exp.ident ?loc:(Some (mv_name.loc)) ?attrs:None\n                      (mkloc (Longident.Lident (mv_name.txt)) mv_name.loc))) in\n          let pres =\n            match modl.mod_type with\n            | Mty_alias _ -> Mp_absent\n            | _ -> Mp_present in\n          let md =\n            {\n              md_uid = mv_uid;\n              md_loc = (mv_name.loc);\n              md_attributes = [];\n              md_type = (modl.mod_type)\n            } in\n          Env.add_module_declaration ?arg:None ?shape:(Some md_shape)\n            ~check:true mv_id pres md env)) env module_variables_as_list","arity":3},
  {"type":"apply","text":"Typetexp.TyVarEnv.with_local_scope\n  (fun () ->\n     let (modl, md_shape) =\n       (!type_module) env\n         (let open Ast_helper in\n            Mod.unpack ?loc:(Some mv_loc) ?attrs:None\n              (Exp.ident ?loc:(Some (mv_name.loc)) ?attrs:None\n                 (mkloc (Longident.Lident (mv_name.txt)) mv_name.loc))) in\n     let pres =\n       match modl.mod_type with | Mty_alias _ -> Mp_absent | _ -> Mp_present in\n     let md =\n       {\n         md_uid = mv_uid;\n         md_loc = (mv_name.loc);\n         md_attributes = [];\n         md_type = (modl.mod_type)\n       } in\n     Env.add_module_declaration ?arg:None ?shape:(Some md_shape) ~check:true\n       mv_id pres md env)","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"(!type_module) env\n  (let open Ast_helper in\n     Mod.unpack ?loc:(Some mv_loc) ?attrs:None\n       (Exp.ident ?loc:(Some (mv_name.loc)) ?attrs:None\n          (mkloc (Longident.Lident (mv_name.txt)) mv_name.loc)))","arity":2},
  {"type":"apply","text":"!type_module","arity":1},
  {"type":"apply","text":"Mod.unpack ?loc:(Some mv_loc) ?attrs:None\n  (Exp.ident ?loc:(Some (mv_name.loc)) ?attrs:None\n     (mkloc (Longident.Lident (mv_name.txt)) mv_name.loc))","arity":3},
  {"type":"construct","text":"Some mv_loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Exp.ident ?loc:(Some (mv_name.loc)) ?attrs:None\n  (mkloc (Longident.Lident (mv_name.txt)) mv_name.loc)","arity":3},
  {"type":"construct","text":"Some (mv_name.loc)","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mkloc (Longident.Lident (mv_name.txt)) mv_name.loc","arity":2},
  {"type":"construct","text":"Longident.Lident (mv_name.txt)","arity":1},
  {"type":"pat_construct","text":"Mty_alias\n_","arity":1},
  {"type":"construct","text":"Mp_absent","arity":0},
  {"type":"construct","text":"Mp_present","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Env.add_module_declaration ?arg:None ?shape:(Some md_shape) ~check:true mv_id\n  pres md env","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some md_shape","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"type_pat tps category ~no_existentials ~penv","arity":4},
  {"type":"apply","text":"create_type_pat_state ?cont allow_modules","arity":2},
  {"type":"apply","text":"Pattern_env.make env ~equations_scope:lev ~allow_recursive_equations:false","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_pat tps category ?no_existentials:None new_penv spat expected_ty","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! new_penv","arity":1},
  {"type":"apply","text":"create_type_pat_state ?cont:None allow_modules","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Pattern_env.make env ~equations_scope ~allow_recursive_equations:false","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n  (fun () ->\n     type_pat tps category ?no_existentials:(Some no_existentials) new_penv\n       pat ty)","arity":3},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_pat tps category ?no_existentials:(Some no_existentials) new_penv pat ty","arity":6},
  {"type":"construct","text":"Some no_existentials","arity":1},
  {"type":"apply","text":"List.map2 type_pat spatl expected_tys","arity":3},
  {"type":"apply","text":"!! new_penv","arity":1},
  {"type":"apply","text":"create_type_pat_state ?cont:None Modules_rejected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Pattern_env.make val_env ~equations_scope ~allow_recursive_equations:false","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_pat tps Value ?no_existentials:(Some In_class_args) new_penv spat nv","arity":6},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"Some In_class_args","arity":1},
  {"type":"construct","text":"In_class_args","arity":0},
  {"type":"apply","text":"has_variants pat","arity":1},
  {"type":"apply","text":"Parmatch.pressure_variants val_env [pat]","arity":2},
  {"type":"construct","text":"[pat]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"finalize_variants pat","arity":1},
  {"type":"apply","text":"List.iter (fun f -> f ()) tps.tps_pattern_force","arity":2},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"is_optional l","arity":1},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None val_env pat\n  (type_option (newvar ?name:None ()))","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_option (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.fold_right\n  (fun { pv_id; pv_type; pv_loc; pv_kind; pv_attributes }\n     (pv, val_env, met_env) ->\n     let check s =\n       if pv_kind = As_var\n       then Warnings.Unused_var s\n       else Warnings.Unused_var_strict s in\n     let id' = Ident.rename pv_id in\n     let val_uid = Uid.mk ~current_unit:(Env.get_unit_name ()) in\n     let val_env =\n       Env.add_value ?check:None pv_id\n         {\n           val_uid;\n           val_attributes = pv_attributes;\n           val_loc = pv_loc;\n           val_kind = Val_reg;\n           val_type = pv_type\n         } val_env in\n     let met_env =\n       Env.add_value ?check:(Some check) id'\n         {\n           val_uid;\n           val_attributes = pv_attributes;\n           val_loc = pv_loc;\n           val_kind = (Val_ivar (Immutable, cl_num));\n           val_type = pv_type\n         } met_env in\n     (((id', pv_id, pv_type) :: pv), val_env, met_env))\n  tps.tps_pattern_variables ([], val_env, met_env)","arity":3},
  {"type":"apply","text":"pv_kind = As_var","arity":2},
  {"type":"construct","text":"As_var","arity":0},
  {"type":"construct","text":"Warnings.Unused_var s","arity":1},
  {"type":"construct","text":"Warnings.Unused_var_strict s","arity":1},
  {"type":"apply","text":"Ident.rename pv_id","arity":1},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Env.add_value ?check:None pv_id\n  {\n    val_uid;\n    val_attributes = pv_attributes;\n    val_loc = pv_loc;\n    val_kind = Val_reg;\n    val_type = pv_type\n  } val_env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Val_reg","arity":0},
  {"type":"apply","text":"Env.add_value ?check:(Some check) id'\n  {\n    val_uid;\n    val_attributes = pv_attributes;\n    val_loc = pv_loc;\n    val_kind = (Val_ivar (Immutable, cl_num));\n    val_type = pv_type\n  } met_env","arity":4},
  {"type":"construct","text":"Some check","arity":1},
  {"type":"construct","text":"Val_ivar (Immutable, cl_num)","arity":2},
  {"type":"construct","text":"Immutable","arity":0},
  {"type":"construct","text":"(id', pv_id, pv_type) :: pv","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Pat.mk ?loc:None ?attrs:None (Ppat_alias (spat, (mknoloc \"selfpat-*\")))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Ppat_alias (spat, (mknoloc \"selfpat-*\"))","arity":2},
  {"type":"apply","text":"mknoloc \"selfpat-*\"","arity":1},
  {"type":"apply","text":"create_type_pat_state ?cont:None Modules_rejected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Pattern_env.make env ~equations_scope ~allow_recursive_equations:false","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_pat tps Value ?no_existentials:(Some In_self_pattern) new_penv spat nv","arity":6},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"Some In_self_pattern","arity":1},
  {"type":"construct","text":"In_self_pattern","arity":0},
  {"type":"apply","text":"List.iter (fun f -> f ()) tps.tps_pattern_force","arity":2},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Btype.snapshot ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Btype.backtrack s.snapshot","arity":1},
  {"type":"apply","text":"Pattern_env.set_env penv s.env","arity":2},
  {"type":"pat_construct","text":"Tpat_or\n(p1, p2, _)","arity":3},
  {"type":"apply","text":"find_valid_alternative f p1","arity":2},
  {"type":"pat_construct","text":"Empty_branch","arity":0},
  {"type":"pat_construct","text":"Error\n(_, _, _)","arity":3},
  {"type":"apply","text":"find_valid_alternative f p2","arity":2},
  {"type":"apply","text":"f pat","arity":1},
  {"type":"pat_construct","text":"Backtrack_or","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Refine_or\n_","arity":1},
  {"type":"construct","text":"Refine_or { inside_nonsplit_or = true }","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"check_counter_example_pat ~info ~penv type_pat_state","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"unify_pat_types_refine ~refine x.pat_loc penv x.pat_type\n  (instance ?partial:None expected_ty)","arity":5},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None pat_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"k (mp ?pat_type desc)","arity":1},
  {"type":"apply","text":"mp ?pat_type desc","arity":2},
  {"type":"pat_construct","text":"Backtrack_or","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Refine_or\n{ inside_nonsplit_or }","arity":1},
  {"type":"pat_construct","text":"Tpat_any","arity":0},
  {"type":"pat_construct","text":"Tpat_var\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"mkp k ?pat_type:None tp.pat_desc","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"info.explosion_fuel <= 0","arity":2},
  {"type":"apply","text":"k' ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"info.explosion_fuel - n","arity":2},
  {"type":"apply","text":"Parmatch.pats_of_type (!! penv) expected_ty","arity":2},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"raise Empty_branch","arity":1},
  {"type":"construct","text":"Empty_branch","arity":0},
  {"type":"pat_construct","text":"{ pat_desc = Tpat_any }::[]","arity":2},
  {"type":"pat_construct","text":"Tpat_any","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"k' ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"tp::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"check_rec ?info:(Some (decrease 1)) ?penv:None tp expected_ty k","arity":5},
  {"type":"construct","text":"Some (decrease 1)","arity":1},
  {"type":"apply","text":"decrease 1","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"tp::tpl","arity":2},
  {"type":"apply","text":"raise Need_backtrack","arity":1},
  {"type":"construct","text":"Need_backtrack","arity":0},
  {"type":"apply","text":"List.fold_left\n  (fun tp tp' -> { tp with pat_desc = (Tpat_or (tp, tp', None)) }) tp tpl","arity":3},
  {"type":"construct","text":"Tpat_or (tp, tp', None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"check_rec ?info:(Some (decrease 5)) ?penv:None tp expected_ty k","arity":5},
  {"type":"construct","text":"Some (decrease 5)","arity":1},
  {"type":"apply","text":"decrease 5","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_alias\n(p, _, _, _)","arity":4},
  {"type":"apply","text":"check_rec ?info:(Some info) ?penv:None p expected_ty k","arity":5},
  {"type":"construct","text":"Some info","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_constant\ncst","arity":1},
  {"type":"apply","text":"constant_or_raise (!! penv) loc (Untypeast.constant cst)","arity":3},
  {"type":"apply","text":"!! penv","arity":1},
  {"type":"apply","text":"Untypeast.constant cst","arity":1},
  {"type":"apply","text":"k\n  (solve_expected\n     (mp ?pat_type:(Some (type_constant cst)) (Tpat_constant cst)))","arity":1},
  {"type":"apply","text":"solve_expected (mp ?pat_type:(Some (type_constant cst)) (Tpat_constant cst))","arity":1},
  {"type":"apply","text":"mp ?pat_type:(Some (type_constant cst)) (Tpat_constant cst)","arity":2},
  {"type":"construct","text":"Some (type_constant cst)","arity":1},
  {"type":"apply","text":"type_constant cst","arity":1},
  {"type":"construct","text":"Tpat_constant cst","arity":1},
  {"type":"pat_construct","text":"Tpat_tuple\ntpl","arity":1},
  {"type":"apply","text":"(List.length tpl) >= 2","arity":2},
  {"type":"apply","text":"List.length tpl","arity":1},
  {"type":"apply","text":"solve_Ppat_tuple ~refine loc penv tpl expected_ty","arity":5},
  {"type":"apply","text":"List.combine tpl expected_tys","arity":2},
  {"type":"apply","text":"map_fold_cont (fun (p, t) -> check_rec ?info:None ?penv:None p t) tpl_ann\n  (fun pl ->\n     mkp k\n       ?pat_type:(Some (newty (Ttuple (List.map (fun p -> p.pat_type) pl))))\n       (Tpat_tuple pl))","arity":3},
  {"type":"apply","text":"check_rec ?info:None ?penv:None p t","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mkp k ?pat_type:(Some (newty (Ttuple (List.map (fun p -> p.pat_type) pl))))\n  (Tpat_tuple pl)","arity":3},
  {"type":"construct","text":"Some (newty (Ttuple (List.map (fun p -> p.pat_type) pl)))","arity":1},
  {"type":"apply","text":"newty (Ttuple (List.map (fun p -> p.pat_type) pl))","arity":1},
  {"type":"construct","text":"Ttuple (List.map (fun p -> p.pat_type) pl)","arity":1},
  {"type":"apply","text":"List.map (fun p -> p.pat_type) pl","arity":2},
  {"type":"construct","text":"Tpat_tuple pl","arity":1},
  {"type":"pat_construct","text":"Tpat_construct\n(cstr_lid, constr, targs, _)","arity":4},
  {"type":"apply","text":"constr.cstr_generalized && must_backtrack_on_gadt","arity":2},
  {"type":"apply","text":"raise Need_backtrack","arity":1},
  {"type":"construct","text":"Need_backtrack","arity":0},
  {"type":"apply","text":"solve_Ppat_construct ~refine type_pat_state penv loc constr None None\n  expected_ty","arity":8},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"map_fold_cont (fun (p, t) -> check_rec ?info:None ?penv:None p t)\n  (List.combine targs ty_args)\n  (fun args ->\n     mkp k ?pat_type:None\n       (Tpat_construct (cstr_lid, constr, args, existential_ctyp)))","arity":3},
  {"type":"apply","text":"check_rec ?info:None ?penv:None p t","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.combine targs ty_args","arity":2},
  {"type":"apply","text":"mkp k ?pat_type:None\n  (Tpat_construct (cstr_lid, constr, args, existential_ctyp))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_construct (cstr_lid, constr, args, existential_ctyp)","arity":4},
  {"type":"pat_construct","text":"Tpat_variant\n(tag, targ, _)","arity":3},
  {"type":"apply","text":"targ = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"solve_Ppat_variant ~refine loc penv tag constant expected_ty","arity":6},
  {"type":"apply","text":"mkp k ?pat_type:(Some pat_type) (Tpat_variant (tag, arg, (ref row)))","arity":3},
  {"type":"construct","text":"Some pat_type","arity":1},
  {"type":"construct","text":"Tpat_variant (tag, arg, (ref row))","arity":3},
  {"type":"apply","text":"ref row","arity":1},
  {"type":"pat_construct","text":"Some\np","arity":1},
  {"type":"pat_construct","text":"ty::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"check_rec ?info:None ?penv:None p ty (fun p -> k (Some p))","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"k (Some p)","arity":1},
  {"type":"construct","text":"Some p","arity":1},
  {"type":"apply","text":"k None","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_record\n(fields, closed)","arity":2},
  {"type":"apply","text":"generic_instance expected_ty","arity":1},
  {"type":"apply","text":"solve_Ppat_record_field ~refine loc penv label label_lid record_ty","arity":6},
  {"type":"apply","text":"check_rec ?info:None ?penv:None targ ty_arg\n  (fun arg -> k (label_lid, label, arg))","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"k (label_lid, label, arg)","arity":1},
  {"type":"apply","text":"map_fold_cont type_label_pat fields\n  (fun fields -> mkp k ?pat_type:None (Tpat_record (fields, closed)))","arity":3},
  {"type":"apply","text":"mkp k ?pat_type:None (Tpat_record (fields, closed))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_record (fields, closed)","arity":2},
  {"type":"pat_construct","text":"Tpat_array\ntpl","arity":1},
  {"type":"apply","text":"solve_Ppat_array ~refine loc penv expected_ty","arity":4},
  {"type":"apply","text":"map_fold_cont (fun p -> check_rec ?info:None ?penv:None p ty_elt) tpl\n  (fun pl -> mkp k ?pat_type:None (Tpat_array pl))","arity":3},
  {"type":"apply","text":"check_rec ?info:None ?penv:None p ty_elt","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mkp k ?pat_type:None (Tpat_array pl)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_array pl","arity":1},
  {"type":"pat_construct","text":"Tpat_or\n(tp1, tp2, _)","arity":3},
  {"type":"pat_construct","text":"Backtrack_or","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Refine_or\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"save_state penv","arity":1},
  {"type":"apply","text":"set_state state penv","arity":2},
  {"type":"apply","text":"check_rec ?info:None ?penv:None pat expected_ty k","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"find_valid_alternative type_alternative tp","arity":2},
  {"type":"apply","text":"split_or tp","arity":1},
  {"type":"apply","text":"enter_nonsplit_or info","arity":1},
  {"type":"apply","text":"check_rec ?info:(Some info) ?penv:(Some penv) tp expected_ty (fun x -> x)","arity":5},
  {"type":"construct","text":"Some info","arity":1},
  {"type":"construct","text":"Some penv","arity":1},
  {"type":"construct","text":"Ok res","arity":1},
  {"type":"pat_construct","text":"Need_backtrack","arity":0},
  {"type":"construct","text":"Error Adds_constraints","arity":1},
  {"type":"construct","text":"Adds_constraints","arity":0},
  {"type":"pat_construct","text":"Empty_branch","arity":0},
  {"type":"construct","text":"Error Empty","arity":1},
  {"type":"construct","text":"Empty","arity":0},
  {"type":"apply","text":"check_rec_result (Pattern_env.copy ?equations_scope:None penv) tp1","arity":2},
  {"type":"apply","text":"Pattern_env.copy ?equations_scope:None penv","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"check_rec_result (Pattern_env.copy ?equations_scope:None penv) tp2","arity":2},
  {"type":"apply","text":"Pattern_env.copy ?equations_scope:None penv","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Error\n(Empty)","arity":1},
  {"type":"pat_construct","text":"Empty","arity":0},
  {"type":"pat_construct","text":"Error\n(Empty)","arity":1},
  {"type":"pat_construct","text":"Empty","arity":0},
  {"type":"apply","text":"raise Empty_branch","arity":1},
  {"type":"construct","text":"Empty_branch","arity":0},
  {"type":"pat_construct","text":"Error\n(Adds_constraints)","arity":1},
  {"type":"pat_construct","text":"Adds_constraints","arity":0},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"pat_construct","text":"Error\n(Adds_constraints)","arity":1},
  {"type":"pat_construct","text":"Adds_constraints","arity":0},
  {"type":"pat_construct","text":"Backtrack_or","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Refine_or\n{ inside_nonsplit_or }","arity":1},
  {"type":"apply","text":"raise Need_backtrack","arity":1},
  {"type":"construct","text":"Need_backtrack","arity":0},
  {"type":"apply","text":"split_or tp","arity":1},
  {"type":"pat_construct","text":"Ok\np","arity":1},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"pat_construct","text":"Error\n_","arity":1},
  {"type":"pat_construct","text":"Ok\np","arity":1},
  {"type":"apply","text":"k p","arity":1},
  {"type":"pat_construct","text":"Ok\np1","arity":1},
  {"type":"pat_construct","text":"Ok\np2","arity":1},
  {"type":"apply","text":"mkp k ?pat_type:None (Tpat_or (p1, p2, None))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_or (p1, p2, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpat_lazy\ntp1","arity":1},
  {"type":"apply","text":"solve_Ppat_lazy ~refine loc penv expected_ty","arity":4},
  {"type":"apply","text":"check_rec ?info:(Some (no_explosion info)) ?penv:None tp1 nv\n  (fun p1 -> mkp k ?pat_type:None (Tpat_lazy p1))","arity":5},
  {"type":"construct","text":"Some (no_explosion info)","arity":1},
  {"type":"apply","text":"no_explosion info","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mkp k ?pat_type:None (Tpat_lazy p1)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_lazy p1","arity":1},
  {"type":"apply","text":"create_type_pat_state ?cont:None Modules_ignored","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Modules_ignored","arity":0},
  {"type":"apply","text":"check_counter_example_pat ~info:counter_example_args ~penv type_pat_state tp\n  expected_ty (fun x -> x)","arity":6},
  {"type":"apply","text":"Pattern_env.make env ~equations_scope:lev ~allow_recursive_equations:true","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"save_state penv","arity":1},
  {"type":"apply","text":"check_counter_example_pat ~counter_example_args penv p expected_ty","arity":4},
  {"type":"apply","text":"set_state state penv","arity":2},
  {"type":"construct","text":"Some typed_p","arity":1},
  {"type":"pat_construct","text":"Error\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Empty_branch","arity":0},
  {"type":"apply","text":"set_state state penv","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"_::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Refine_or { inside_nonsplit_or = false }","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Parmatch.check_partial\n  (partial_pred ~lev ~splitting_mode ?explode:(Some explode) env expected_ty)\n  loc cases","arity":3},
  {"type":"apply","text":"partial_pred ~lev ~splitting_mode ?explode:(Some explode) env expected_ty","arity":5},
  {"type":"construct","text":"Some explode","arity":1},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Parmatch.check_unused\n  (fun refute pat ->\n     match partial_pred ~lev ~splitting_mode:Backtrack_or ?explode:(Some 5)\n             env expected_ty pat\n     with\n     | Some pat' when refute ->\n         raise (Error ((pat.pat_loc), env, (Unrefuted_pattern pat')))\n     | r -> r) cases","arity":2},
  {"type":"apply","text":"partial_pred ~lev ~splitting_mode:Backtrack_or ?explode:(Some 5) env\n  expected_ty pat","arity":6},
  {"type":"construct","text":"Backtrack_or","arity":0},
  {"type":"construct","text":"Some 5","arity":1},
  {"type":"pat_construct","text":"Some\npat'","arity":1},
  {"type":"apply","text":"raise (Error ((pat.pat_loc), env, (Unrefuted_pattern pat')))","arity":1},
  {"type":"construct","text":"Error ((pat.pat_loc), env, (Unrefuted_pattern pat'))","arity":3},
  {"type":"construct","text":"Unrefuted_pattern pat'","arity":1},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"delayed_checks := []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"delayed_checks := ((f, (Warnings.backup ())) :: (!delayed_checks))","arity":2},
  {"type":"construct","text":"(f, (Warnings.backup ())) :: (!delayed_checks)","arity":2},
  {"type":"apply","text":"Warnings.backup ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"!delayed_checks","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Btype.snapshot ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Warnings.backup ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.iter (fun (f, w) -> Warnings.restore w; f ())\n  (List.rev (!delayed_checks))","arity":2},
  {"type":"apply","text":"Warnings.restore w","arity":1},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.rev (!delayed_checks)","arity":1},
  {"type":"apply","text":"!delayed_checks","arity":1},
  {"type":"apply","text":"Warnings.restore w_old","arity":1},
  {"type":"apply","text":"reset_delayed_checks ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Btype.backtrack snap","arity":1},
  {"type":"pat_construct","text":"Texp_let\n(_, _, e)","arity":3},
  {"type":"pat_construct","text":"Texp_sequence\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_try\n(e, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_ifthenelse\n(_, e, _)","arity":3},
  {"type":"pat_construct","text":"Texp_match\n(_, { c_rhs = e }::_, _, _)","arity":4},
  {"type":"pat_construct","text":"{ c_rhs = e }::_","arity":2},
  {"type":"pat_construct","text":"Texp_letmodule\n(_, _, _, _, e)","arity":5},
  {"type":"pat_construct","text":"Texp_letexception\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_open\n(_, e)","arity":2},
  {"type":"apply","text":"final_subexpression e","arity":1},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_constant\n_","arity":1},
  {"type":"pat_construct","text":"Texp_unreachable","arity":0},
  {"type":"pat_construct","text":"Texp_function\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_array\n[]","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Texp_let\n(_rec_flag, pat_exp_list, body)","arity":3},
  {"type":"apply","text":"(List.for_all (fun vb -> is_nonexpansive vb.vb_expr) pat_exp_list) &&\n  (is_nonexpansive body)","arity":2},
  {"type":"apply","text":"List.for_all (fun vb -> is_nonexpansive vb.vb_expr) pat_exp_list","arity":2},
  {"type":"apply","text":"is_nonexpansive vb.vb_expr","arity":1},
  {"type":"apply","text":"is_nonexpansive body","arity":1},
  {"type":"pat_construct","text":"Texp_apply\n(e, (_, None)::el)","arity":2},
  {"type":"pat_construct","text":"(_, None)::el","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"(is_nonexpansive e) && (List.for_all is_nonexpansive_opt (List.map snd el))","arity":2},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"apply","text":"List.for_all is_nonexpansive_opt (List.map snd el)","arity":2},
  {"type":"apply","text":"List.map snd el","arity":2},
  {"type":"pat_construct","text":"Texp_match\n(e, cases, _, _)","arity":4},
  {"type":"apply","text":"exists_general_pattern\n  {\n    f =\n      (fun (type k) ->\n         fun (p : k general_pattern) ->\n           match p.pat_desc with | Tpat_exception _ -> true | _ -> false)\n  } pat","arity":2},
  {"type":"pat_construct","text":"Tpat_exception\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(is_nonexpansive e) &&\n  (List.for_all\n     (fun { c_lhs; c_guard; c_rhs } ->\n        (is_nonexpansive_opt c_guard) &&\n          ((is_nonexpansive c_rhs) && (not (contains_exception_pat c_lhs))))\n     cases)","arity":2},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"apply","text":"List.for_all\n  (fun { c_lhs; c_guard; c_rhs } ->\n     (is_nonexpansive_opt c_guard) &&\n       ((is_nonexpansive c_rhs) && (not (contains_exception_pat c_lhs))))\n  cases","arity":2},
  {"type":"apply","text":"(is_nonexpansive_opt c_guard) &&\n  ((is_nonexpansive c_rhs) && (not (contains_exception_pat c_lhs)))","arity":2},
  {"type":"apply","text":"is_nonexpansive_opt c_guard","arity":1},
  {"type":"apply","text":"(is_nonexpansive c_rhs) && (not (contains_exception_pat c_lhs))","arity":2},
  {"type":"apply","text":"is_nonexpansive c_rhs","arity":1},
  {"type":"apply","text":"not (contains_exception_pat c_lhs)","arity":1},
  {"type":"apply","text":"contains_exception_pat c_lhs","arity":1},
  {"type":"pat_construct","text":"Texp_tuple\nel","arity":1},
  {"type":"apply","text":"List.for_all is_nonexpansive el","arity":2},
  {"type":"pat_construct","text":"Texp_construct\n(_, _, el)","arity":3},
  {"type":"apply","text":"List.for_all is_nonexpansive el","arity":2},
  {"type":"pat_construct","text":"Texp_variant\n(_, arg)","arity":2},
  {"type":"apply","text":"is_nonexpansive_opt arg","arity":1},
  {"type":"pat_construct","text":"Texp_record\n{ fields; extended_expression }","arity":1},
  {"type":"apply","text":"(Array.for_all\n   (fun (lbl, definition) ->\n      match definition with\n      | Overridden (_, exp) ->\n          (lbl.lbl_mut = Immutable) && (is_nonexpansive exp)\n      | Kept (_, _) -> true) fields)\n  && (is_nonexpansive_opt extended_expression)","arity":2},
  {"type":"apply","text":"Array.for_all\n  (fun (lbl, definition) ->\n     match definition with\n     | Overridden (_, exp) ->\n         (lbl.lbl_mut = Immutable) && (is_nonexpansive exp)\n     | Kept (_, _) -> true) fields","arity":2},
  {"type":"pat_construct","text":"Overridden\n(_, exp)","arity":2},
  {"type":"apply","text":"(lbl.lbl_mut = Immutable) && (is_nonexpansive exp)","arity":2},
  {"type":"apply","text":"lbl.lbl_mut = Immutable","arity":2},
  {"type":"construct","text":"Immutable","arity":0},
  {"type":"apply","text":"is_nonexpansive exp","arity":1},
  {"type":"pat_construct","text":"Kept\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"is_nonexpansive_opt extended_expression","arity":1},
  {"type":"pat_construct","text":"Texp_field\n(exp, _, _)","arity":3},
  {"type":"apply","text":"is_nonexpansive exp","arity":1},
  {"type":"pat_construct","text":"Texp_ifthenelse\n(_cond, ifso, ifnot)","arity":3},
  {"type":"apply","text":"(is_nonexpansive ifso) && (is_nonexpansive_opt ifnot)","arity":2},
  {"type":"apply","text":"is_nonexpansive ifso","arity":1},
  {"type":"apply","text":"is_nonexpansive_opt ifnot","arity":1},
  {"type":"pat_construct","text":"Texp_sequence\n(_e1, e2)","arity":2},
  {"type":"apply","text":"is_nonexpansive e2","arity":1},
  {"type":"pat_construct","text":"Texp_new\n(_, _, cl_decl)","arity":3},
  {"type":"apply","text":"(Btype.class_type_arity cl_decl.cty_type) > 0","arity":2},
  {"type":"apply","text":"Btype.class_type_arity cl_decl.cty_type","arity":1},
  {"type":"pat_construct","text":"Texp_lazy\ne","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Texp_object\n({ cstr_fields = fields; cstr_type = { csig_vars = vars } }, _)","arity":2},
  {"type":"apply","text":"ref 0","arity":1},
  {"type":"apply","text":"(List.for_all\n   (fun field ->\n      match field.cf_desc with\n      | Tcf_method (_, _, _) -> true\n      | Tcf_val (_, _, _, Tcfk_concrete (_, e), _) ->\n          (incr count; is_nonexpansive e)\n      | Tcf_val (_, _, _, Tcfk_virtual _, _) -> (incr count; true)\n      | Tcf_initializer e -> is_nonexpansive e\n      | Tcf_constraint (_, _) -> true\n      | Tcf_inherit (_, _, _, _, _) -> false\n      | Tcf_attribute _ -> true) fields)\n  &&\n  ((Vars.fold (fun _ (mut, _, _) b -> decr count; b && (mut = Immutable))\n      vars true)\n     && ((!count) = 0))","arity":2},
  {"type":"apply","text":"List.for_all\n  (fun field ->\n     match field.cf_desc with\n     | Tcf_method (_, _, _) -> true\n     | Tcf_val (_, _, _, Tcfk_concrete (_, e), _) ->\n         (incr count; is_nonexpansive e)\n     | Tcf_val (_, _, _, Tcfk_virtual _, _) -> (incr count; true)\n     | Tcf_initializer e -> is_nonexpansive e\n     | Tcf_constraint (_, _) -> true\n     | Tcf_inherit (_, _, _, _, _) -> false\n     | Tcf_attribute _ -> true) fields","arity":2},
  {"type":"pat_construct","text":"Tcf_method\n(_, _, _)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tcf_val\n(_, _, _, Tcfk_concrete (_, e), _)","arity":5},
  {"type":"pat_construct","text":"Tcfk_concrete\n(_, e)","arity":2},
  {"type":"apply","text":"incr count","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Tcf_val\n(_, _, _, Tcfk_virtual _, _)","arity":5},
  {"type":"pat_construct","text":"Tcfk_virtual\n_","arity":1},
  {"type":"apply","text":"incr count","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tcf_initializer\ne","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Tcf_constraint\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tcf_inherit\n(_, _, _, _, _)","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tcf_attribute\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"(Vars.fold (fun _ (mut, _, _) b -> decr count; b && (mut = Immutable)) vars\n   true)\n  && ((!count) = 0)","arity":2},
  {"type":"apply","text":"Vars.fold (fun _ (mut, _, _) b -> decr count; b && (mut = Immutable)) vars\n  true","arity":3},
  {"type":"apply","text":"decr count","arity":1},
  {"type":"apply","text":"b && (mut = Immutable)","arity":2},
  {"type":"apply","text":"mut = Immutable","arity":2},
  {"type":"construct","text":"Immutable","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"(!count) = 0","arity":2},
  {"type":"apply","text":"!count","arity":1},
  {"type":"pat_construct","text":"Texp_letmodule\n(_, _, _, mexp, e)","arity":5},
  {"type":"pat_construct","text":"Texp_open\n({ open_expr = mexp;_}, e)","arity":2},
  {"type":"apply","text":"(is_nonexpansive_mod mexp) && (is_nonexpansive e)","arity":2},
  {"type":"apply","text":"is_nonexpansive_mod mexp","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Texp_pack\nmexp","arity":1},
  {"type":"apply","text":"is_nonexpansive_mod mexp","arity":1},
  {"type":"pat_construct","text":"Texp_assert\n(exp, _)","arity":2},
  {"type":"apply","text":"is_nonexpansive exp","arity":1},
  {"type":"pat_construct","text":"Texp_apply\n({\n   exp_desc = Texp_ident\n     (_, _,\n      {\n        val_kind = Val_prim\n          { Primitive.prim_name = (\"%raise\" | \"%reraise\" | \"%raise_notrace\")\n            }\n        })\n   },\n (Nolabel, Some e)::[])","arity":2},
  {"type":"pat_construct","text":"Texp_ident\n(_, _,\n {\n   val_kind = Val_prim\n     { Primitive.prim_name = (\"%raise\" | \"%reraise\" | \"%raise_notrace\") }\n   })","arity":3},
  {"type":"pat_construct","text":"Val_prim\n{ Primitive.prim_name = (\"%raise\" | \"%reraise\" | \"%raise_notrace\") }","arity":1},
  {"type":"pat_construct","text":"(Nolabel, Some e)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"Some\ne","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Texp_array\n(_::_)","arity":1},
  {"type":"pat_construct","text":"_::_","arity":2},
  {"type":"pat_construct","text":"Texp_apply\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_try\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_setfield\n(_, _, _, _)","arity":4},
  {"type":"pat_construct","text":"Texp_while\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_for\n(_, _, _, _, _, _)","arity":6},
  {"type":"pat_construct","text":"Texp_send\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_instvar\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_setinstvar\n(_, _, _, _)","arity":4},
  {"type":"pat_construct","text":"Texp_override\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_letexception\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_letop\n_","arity":1},
  {"type":"pat_construct","text":"Texp_extension_constructor\n(_, _)","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tmod_ident\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Tmod_functor\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tmod_unpack\n(e, _)","arity":2},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"pat_construct","text":"Tmod_constraint\n(m, _, _, _)","arity":4},
  {"type":"apply","text":"is_nonexpansive_mod m","arity":1},
  {"type":"pat_construct","text":"Tmod_structure\nstr","arity":1},
  {"type":"apply","text":"List.for_all\n  (fun item ->\n     match item.str_desc with\n     | Tstr_eval (_, _) | Tstr_primitive _ | Tstr_type (_, _) | Tstr_modtype\n       _ | Tstr_class_type _ -> true\n     | Tstr_value (_, pat_exp_list) ->\n         List.for_all (fun vb -> is_nonexpansive vb.vb_expr) pat_exp_list\n     | Tstr_module { mb_expr = m;_} | Tstr_open { open_expr = m;_}\n       | Tstr_include { incl_mod = m;_} -> is_nonexpansive_mod m\n     | Tstr_recmodule id_mod_list ->\n         List.for_all (fun { mb_expr = m;_} -> is_nonexpansive_mod m)\n           id_mod_list\n     | Tstr_exception\n         { tyexn_constructor = { ext_kind = Text_decl (_, _, _) } } -> false\n     | Tstr_exception\n         { tyexn_constructor = { ext_kind = Text_rebind (_, _) } } -> true\n     | Tstr_typext te ->\n         List.for_all\n           (function\n            | { ext_kind = Text_decl (_, _, _) } -> false\n            | { ext_kind = Text_rebind (_, _) } -> true)\n           te.tyext_constructors\n     | Tstr_class _ -> false\n     | Tstr_attribute _ -> true) str.str_items","arity":2},
  {"type":"pat_construct","text":"Tstr_eval\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Tstr_primitive\n_","arity":1},
  {"type":"pat_construct","text":"Tstr_type\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Tstr_modtype\n_","arity":1},
  {"type":"pat_construct","text":"Tstr_class_type\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tstr_value\n(_, pat_exp_list)","arity":2},
  {"type":"apply","text":"List.for_all (fun vb -> is_nonexpansive vb.vb_expr) pat_exp_list","arity":2},
  {"type":"apply","text":"is_nonexpansive vb.vb_expr","arity":1},
  {"type":"pat_construct","text":"Tstr_module\n{ mb_expr = m;_}","arity":1},
  {"type":"pat_construct","text":"Tstr_open\n{ open_expr = m;_}","arity":1},
  {"type":"pat_construct","text":"Tstr_include\n{ incl_mod = m;_}","arity":1},
  {"type":"apply","text":"is_nonexpansive_mod m","arity":1},
  {"type":"pat_construct","text":"Tstr_recmodule\nid_mod_list","arity":1},
  {"type":"apply","text":"List.for_all (fun { mb_expr = m;_} -> is_nonexpansive_mod m) id_mod_list","arity":2},
  {"type":"apply","text":"is_nonexpansive_mod m","arity":1},
  {"type":"pat_construct","text":"Tstr_exception\n{ tyexn_constructor = { ext_kind = Text_decl (_, _, _) } }","arity":1},
  {"type":"pat_construct","text":"Text_decl\n(_, _, _)","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tstr_exception\n{ tyexn_constructor = { ext_kind = Text_rebind (_, _) } }","arity":1},
  {"type":"pat_construct","text":"Text_rebind\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tstr_typext\nte","arity":1},
  {"type":"apply","text":"List.for_all\n  (function\n   | { ext_kind = Text_decl (_, _, _) } -> false\n   | { ext_kind = Text_rebind (_, _) } -> true) te.tyext_constructors","arity":2},
  {"type":"pat_construct","text":"Text_decl\n(_, _, _)","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Text_rebind\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tstr_class\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tstr_attribute\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tmod_apply\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Tmod_apply_unit\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Some\ne","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"apply","text":"not (is_nonexpansive e)","arity":1},
  {"type":"apply","text":"is_nonexpansive e","arity":1},
  {"type":"apply","text":"let_bound_idents valbinds","arity":1},
  {"type":"apply","text":"List.map\n  (fun { vb_pat; vb_expr; vb_rec_kind = _; vb_attributes; vb_loc } ->\n     match Value_rec_check.is_valid_recursive_expression ids vb_expr with\n     | None -> raise (Error ((vb_expr.exp_loc), env, Illegal_letrec_expr))\n     | Some vb_rec_kind ->\n         { vb_loc; vb_attributes; vb_rec_kind; vb_expr; vb_pat }) valbinds","arity":2},
  {"type":"apply","text":"Value_rec_check.is_valid_recursive_expression ids vb_expr","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error ((vb_expr.exp_loc), env, Illegal_letrec_expr))","arity":1},
  {"type":"construct","text":"Error ((vb_expr.exp_loc), env, Illegal_letrec_expr)","arity":3},
  {"type":"construct","text":"Illegal_letrec_expr","arity":0},
  {"type":"pat_construct","text":"Some\nvb_rec_kind","arity":1},
  {"type":"apply","text":"List.iter\n  (fun expr ->\n     if not (Value_rec_check.is_valid_class_expr ids expr)\n     then raise (Error ((expr.cl_loc), env, Illegal_class_expr))) exprs","arity":2},
  {"type":"apply","text":"not (Value_rec_check.is_valid_class_expr ids expr)","arity":1},
  {"type":"apply","text":"Value_rec_check.is_valid_class_expr ids expr","arity":2},
  {"type":"apply","text":"raise (Error ((expr.cl_loc), env, Illegal_class_expr))","arity":1},
  {"type":"construct","text":"Error ((expr.cl_loc), env, Illegal_class_expr)","arity":3},
  {"type":"construct","text":"Illegal_class_expr","arity":0},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_kind = Val_prim { Primitive.prim_name = prim_name;_} })","arity":3},
  {"type":"pat_construct","text":"Val_prim\n{ Primitive.prim_name = prim_name;_}","arity":1},
  {"type":"apply","text":"prim_name = name","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ptyp_arrow\n(p, _, sty)","arity":3},
  {"type":"apply","text":"is_optional p","arity":1},
  {"type":"apply","text":"type_option (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newty (Tarrow (p, ty1, (approx_type env sty), commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (p, ty1, (approx_type env sty), commu_ok)","arity":4},
  {"type":"apply","text":"approx_type env sty","arity":2},
  {"type":"pat_construct","text":"Ptyp_tuple\nargs","arity":1},
  {"type":"apply","text":"newty (Ttuple (List.map (approx_type env) args))","arity":1},
  {"type":"construct","text":"Ttuple (List.map (approx_type env) args)","arity":1},
  {"type":"apply","text":"List.map (approx_type env) args","arity":2},
  {"type":"apply","text":"approx_type env","arity":1},
  {"type":"pat_construct","text":"Ptyp_constr\n(lid, ctl)","arity":2},
  {"type":"apply","text":"Env.lookup_type ?use:(Some false) ~loc:(lid.loc) lid.txt env","arity":4},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(List.length ctl) <> decl.type_arity","arity":2},
  {"type":"apply","text":"List.length ctl","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.map (approx_type env) ctl","arity":2},
  {"type":"apply","text":"approx_type env","arity":1},
  {"type":"apply","text":"newconstr path tyl","arity":2},
  {"type":"pat_construct","text":"Ptyp_poly\n(_, sty)","arity":2},
  {"type":"apply","text":"approx_type env sty","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Ppat_constraint\n(_, sty)","arity":2},
  {"type":"apply","text":"approx_type env sty","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_pattern_approx env spat","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"Labelled\n_","arity":1},
  {"type":"pat_construct","text":"Optional\n_","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pat_types spat.ppat_loc env ty (type_option (newvar ?name:None ()))","arity":4},
  {"type":"apply","text":"type_option (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Optional\n_","arity":1},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"apply","text":"type_option ty","arity":1},
  {"type":"apply","text":"newty (Tarrow (label, ty, ret_ty, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (label, ty, ret_ty, commu_ok)","arity":4},
  {"type":"pat_construct","text":"Pconstraint\nconstrain","arity":1},
  {"type":"apply","text":"approx_type env constrain","arity":2},
  {"type":"apply","text":"unify env ty ty_constrain","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Expr_type_clash (err, None, None))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Expr_type_clash (err, None, None)))","arity":3},
  {"type":"construct","text":"Expr_type_clash (err, None, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pcoerce\n(constrain, coerce)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\nsty","arity":1},
  {"type":"apply","text":"approx_type env sty","arity":2},
  {"type":"apply","text":"approx_ty_opt constrain","arity":1},
  {"type":"apply","text":"approx_type env coerce","arity":2},
  {"type":"apply","text":"unify env ty ty_constrain","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Expr_type_clash (err, None, None))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Expr_type_clash (err, None, None)))","arity":3},
  {"type":"construct","text":"Expr_type_clash (err, None, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nconstraint_","arity":1},
  {"type":"apply","text":"type_approx_constraint env ty constraint_ ~loc","arity":4},
  {"type":"pat_construct","text":"Pexp_let\n(_, _, e)","arity":3},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pexp_function\n(params, c, body)","arity":3},
  {"type":"apply","text":"type_approx_function env params c body ~loc","arity":5},
  {"type":"pat_construct","text":"Pexp_match\n(_, { pc_rhs = e }::_)","arity":2},
  {"type":"pat_construct","text":"{ pc_rhs = e }::_","arity":2},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pexp_try\n(e, _)","arity":2},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pexp_tuple\nl","arity":1},
  {"type":"apply","text":"newty (Ttuple (List.map (type_approx env) l))","arity":1},
  {"type":"construct","text":"Ttuple (List.map (type_approx env) l)","arity":1},
  {"type":"apply","text":"List.map (type_approx env) l","arity":2},
  {"type":"apply","text":"type_approx env","arity":1},
  {"type":"pat_construct","text":"Pexp_ifthenelse\n(_, e, _)","arity":3},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pexp_sequence\n(_, e)","arity":2},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pexp_constraint\n(e, sty)","arity":2},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"apply","text":"type_approx_constraint env ty (Pconstraint sty) ~loc","arity":4},
  {"type":"construct","text":"Pconstraint sty","arity":1},
  {"type":"pat_construct","text":"Pexp_coerce\n(e, sty1, sty2)","arity":3},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"apply","text":"type_approx_constraint env ty (Pcoerce (sty1, sty2)) ~loc","arity":4},
  {"type":"construct","text":"Pcoerce (sty1, sty2)","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"{ pparam_desc = Pparam_val (label, default, pat) }::params","arity":2},
  {"type":"pat_construct","text":"Pparam_val\n(label, default, pat)","arity":3},
  {"type":"apply","text":"type_approx_fun env label default pat\n  (type_approx_function env params c body ~loc)","arity":5},
  {"type":"apply","text":"type_approx_function env params c body ~loc","arity":5},
  {"type":"pat_construct","text":"{ pparam_desc = Pparam_newtype _ }::_","arity":2},
  {"type":"pat_construct","text":"Pparam_newtype\n_","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pfunction_body\nbody","arity":1},
  {"type":"apply","text":"type_approx env body","arity":2},
  {"type":"pat_construct","text":"Pfunction_cases\n({ pc_rhs = e }::_, _, _)","arity":3},
  {"type":"pat_construct","text":"{ pc_rhs = e }::_","arity":2},
  {"type":"apply","text":"newty\n  (Tarrow (Nolabel, (newvar ?name:None ()), (type_approx env e), commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, (newvar ?name:None ()), (type_approx env e), commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_approx env e","arity":2},
  {"type":"pat_construct","text":"Pfunction_cases\n([], _, _)","arity":3},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_approx_constraint_opt env body_ty c ~loc","arity":4},
  {"type":"apply","text":"expand_head env ty_fun","arity":2},
  {"type":"apply","text":"TypeSet.mem ty visited","arity":2},
  {"type":"apply","text":"List.rev ls","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(l, _, ty_res, _)","arity":4},
  {"type":"apply","text":"list_labels_aux env (TypeSet.add ty visited) (l :: ls) ty_res","arity":4},
  {"type":"apply","text":"TypeSet.add ty visited","arity":2},
  {"type":"construct","text":"l :: ls","arity":2},
  {"type":"apply","text":"List.rev ls","arity":1},
  {"type":"apply","text":"is_Tvar ty","arity":1},
  {"type":"apply","text":"Btype.snapshot ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"wrap_trace_gadt_instances env (list_labels_aux env TypeSet.empty []) ty","arity":3},
  {"type":"apply","text":"list_labels_aux env TypeSet.empty []","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Btype.backtrack snap","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"with_local_level_iter\n  (fun () ->\n     match get_desc pty with\n     | Tpoly (body, tl) ->\n         let (_, ty') = instance_poly ?keep_names:None ~fixed:true tl body in\n         let (vars, exp_ty) =\n           instance_parameterized_type ?keep_names:None vars exp.exp_type in\n         (unify_exp_types exp.exp_loc env exp_ty ty';\n          ((exp_ty, vars), (exp_ty :: vars)))\n     | _ -> assert false) ~post:generalize","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"get_desc pty","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(body, tl)","arity":2},
  {"type":"apply","text":"instance_poly ?keep_names:None ~fixed:true tl body","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"instance_parameterized_type ?keep_names:None vars exp.exp_type","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_exp_types exp.exp_loc env exp_ty ty'","arity":4},
  {"type":"construct","text":"exp_ty :: vars","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"polyfy env exp_ty vars","arity":3},
  {"type":"apply","text":"not complete","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"raise\n  (Error\n     ((exp.exp_loc), env,\n       (Less_general\n          (kind,\n            (Errortrace.unification_error\n               ~trace:[Ctype.expanded_diff env ~got:ty ~expected:ty_expected])))))","arity":1},
  {"type":"construct","text":"Error\n  ((exp.exp_loc), env,\n    (Less_general\n       (kind,\n         (Errortrace.unification_error\n            ~trace:[Ctype.expanded_diff env ~got:ty ~expected:ty_expected]))))","arity":3},
  {"type":"construct","text":"Less_general\n  (kind,\n    (Errortrace.unification_error\n       ~trace:[Ctype.expanded_diff env ~got:ty ~expected:ty_expected]))","arity":2},
  {"type":"apply","text":"Errortrace.unification_error\n  ~trace:[Ctype.expanded_diff env ~got:ty ~expected:ty_expected]","arity":1},
  {"type":"construct","text":"[Ctype.expanded_diff env ~got:ty ~expected:ty_expected]","arity":2},
  {"type":"apply","text":"Ctype.expanded_diff env ~got:ty ~expected:ty_expected","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"generalize exp.exp_type","arity":1},
  {"type":"apply","text":"generalize ty_expected","arity":1},
  {"type":"apply","text":"List.iter generalize vars","arity":2},
  {"type":"apply","text":"check_univars env kind exp ty_expected vars","arity":5},
  {"type":"apply","text":"get_desc (expand_head exp.exp_env exp.exp_type)","arity":1},
  {"type":"apply","text":"expand_head exp.exp_env exp.exp_type","arity":2},
  {"type":"pat_construct","text":"Tconstr\n(p, _, _)","arity":3},
  {"type":"apply","text":"Path.same p Predef.path_unit","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Texp_let\n(_, _, e)","arity":3},
  {"type":"pat_construct","text":"Texp_sequence\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_letexception\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_letmodule\n(_, _, _, _, e)","arity":5},
  {"type":"apply","text":"loop e","arity":1},
  {"type":"apply","text":"List.find_opt (function | (Texp_constraint _, _, _) -> true | _ -> false)\n  exp_extra","arity":2},
  {"type":"pat_construct","text":"Texp_constraint\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Some\n(_, loc, _)","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"Location.prerr_warning loc Warnings.Non_unit_statement","arity":2},
  {"type":"construct","text":"Warnings.Non_unit_statement","arity":0},
  {"type":"apply","text":"loop exp","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"check_statement exp","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"get_desc (expand_head exp.exp_env exp.exp_type)","arity":1},
  {"type":"apply","text":"expand_head exp.exp_env exp.exp_type","arity":2},
  {"type":"pat_construct","text":"Tarrow\n(_, _, _, _)","arity":4},
  {"type":"apply","text":"List.exists (function | (Texp_constraint _, _, _) -> true | _ -> false)\n  exp_extra","arity":2},
  {"type":"pat_construct","text":"Texp_constraint\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"check_statement ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_constant\n_","arity":1},
  {"type":"pat_construct","text":"Texp_tuple\n_","arity":1},
  {"type":"pat_construct","text":"Texp_construct\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_variant\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_record\n_","arity":1},
  {"type":"pat_construct","text":"Texp_field\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_setfield\n(_, _, _, _)","arity":4},
  {"type":"pat_construct","text":"Texp_array\n_","arity":1},
  {"type":"pat_construct","text":"Texp_while\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_for\n(_, _, _, _, _, _)","arity":6},
  {"type":"pat_construct","text":"Texp_instvar\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_setinstvar\n(_, _, _, _)","arity":4},
  {"type":"pat_construct","text":"Texp_override\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_assert\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_lazy\n_","arity":1},
  {"type":"pat_construct","text":"Texp_object\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_pack\n_","arity":1},
  {"type":"pat_construct","text":"Texp_unreachable","arity":0},
  {"type":"pat_construct","text":"Texp_extension_constructor\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_ifthenelse\n(_, _, None)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Texp_function\n(_, _)","arity":2},
  {"type":"apply","text":"check_statement ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Texp_match\n(_, cases, eff_cases, _)","arity":4},
  {"type":"apply","text":"List.iter (fun { c_rhs;_} -> check c_rhs) cases","arity":2},
  {"type":"apply","text":"check c_rhs","arity":1},
  {"type":"apply","text":"List.iter (fun { c_rhs;_} -> check c_rhs) eff_cases","arity":2},
  {"type":"apply","text":"check c_rhs","arity":1},
  {"type":"pat_construct","text":"Texp_try\n(e, cases, eff_cases)","arity":3},
  {"type":"apply","text":"check e","arity":1},
  {"type":"apply","text":"List.iter (fun { c_rhs;_} -> check c_rhs) cases","arity":2},
  {"type":"apply","text":"check c_rhs","arity":1},
  {"type":"apply","text":"List.iter (fun { c_rhs;_} -> check c_rhs) eff_cases","arity":2},
  {"type":"apply","text":"check c_rhs","arity":1},
  {"type":"pat_construct","text":"Texp_ifthenelse\n(_, e1, Some e2)","arity":3},
  {"type":"pat_construct","text":"Some\ne2","arity":1},
  {"type":"apply","text":"check e1","arity":1},
  {"type":"apply","text":"check e2","arity":1},
  {"type":"pat_construct","text":"Texp_let\n(_, _, e)","arity":3},
  {"type":"pat_construct","text":"Texp_sequence\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_open\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_letexception\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Texp_letmodule\n(_, _, _, _, e)","arity":5},
  {"type":"apply","text":"check e","arity":1},
  {"type":"pat_construct","text":"Texp_apply\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_send\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Texp_new\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Texp_letop\n_","arity":1},
  {"type":"apply","text":"Location.prerr_warning exp_loc Warnings.Ignored_partial_application","arity":2},
  {"type":"construct","text":"Warnings.Ignored_partial_application","arity":0},
  {"type":"apply","text":"check exp","arity":1},
  {"type":"apply","text":"check_statement ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"get_desc (expand_head exp.exp_env exp.exp_type)","arity":1},
  {"type":"apply","text":"expand_head exp.exp_env exp.exp_type","arity":2},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"add_delayed_check doit","arity":1},
  {"type":"apply","text":"doit ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(not\n   (List.exists (function | (Tpat_constraint _, _, _) -> true | _ -> false)\n      p.pat_extra))\n  &&\n  (match p.pat_desc with\n   | Tpat_any -> true\n   | Tpat_exception _ -> true\n   | Tpat_or (p1, p2, _) -> (check p1) && (check p2)\n   | Tpat_value p -> check (p :> value general_pattern)\n   | _ -> false)","arity":2},
  {"type":"apply","text":"not\n  (List.exists (function | (Tpat_constraint _, _, _) -> true | _ -> false)\n     p.pat_extra)","arity":1},
  {"type":"apply","text":"List.exists (function | (Tpat_constraint _, _, _) -> true | _ -> false)\n  p.pat_extra","arity":2},
  {"type":"pat_construct","text":"Tpat_constraint\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tpat_exception\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Tpat_or\n(p1, p2, _)","arity":3},
  {"type":"apply","text":"(check p1) && (check p2)","arity":2},
  {"type":"apply","text":"check p1","arity":1},
  {"type":"apply","text":"check p2","arity":1},
  {"type":"pat_construct","text":"Tpat_value\np","arity":1},
  {"type":"apply","text":"check (p :> value general_pattern)","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"check p","arity":1},
  {"type":"apply","text":"with_type_mark\n  (fun mark ->\n     let rec check ty =\n       if try_mark_node mark ty\n       then\n         (if (get_level ty) <= level\n          then raise Exit\n          else iter_type_expr check ty) in\n     try check ty; true with | Exit -> false)","arity":1},
  {"type":"apply","text":"try_mark_node mark ty","arity":2},
  {"type":"apply","text":"(get_level ty) <= level","arity":2},
  {"type":"apply","text":"get_level ty","arity":1},
  {"type":"apply","text":"raise Exit","arity":1},
  {"type":"construct","text":"Exit","arity":0},
  {"type":"apply","text":"iter_type_expr check ty","arity":2},
  {"type":"apply","text":"check ty","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Exit","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref ([] : (Path.t * Location.t list ref) list)","arity":1},
  {"type":"construct","text":"([] : (Path.t * Location.t list ref) list)","arity":0},
  {"type":"apply","text":"with_type_mark\n  (fun mark ->\n     let rec loop ty =\n       if try_mark_node mark ty\n       then\n         match get_desc ty with\n         | Tvariant row ->\n             (if not (is_fixed row)\n              then\n                List.iter\n                  (fun (_, f) ->\n                     match row_field_repr f with\n                     | Reither (_, _, _) -> raise Exit\n                     | _ -> ()) (row_fields row);\n              iter_row loop row)\n         | _ -> iter_type_expr loop ty in\n     try loop ty; false with | Exit -> true)","arity":1},
  {"type":"apply","text":"try_mark_node mark ty","arity":2},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tvariant\nrow","arity":1},
  {"type":"apply","text":"not (is_fixed row)","arity":1},
  {"type":"apply","text":"is_fixed row","arity":1},
  {"type":"apply","text":"List.iter\n  (fun (_, f) ->\n     match row_field_repr f with | Reither (_, _, _) -> raise Exit | _ -> ())\n  (row_fields row)","arity":2},
  {"type":"apply","text":"row_field_repr f","arity":1},
  {"type":"pat_construct","text":"Reither\n(_, _, _)","arity":3},
  {"type":"apply","text":"raise Exit","arity":1},
  {"type":"construct","text":"Exit","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"row_fields row","arity":1},
  {"type":"apply","text":"iter_row loop row","arity":2},
  {"type":"apply","text":"iter_type_expr loop ty","arity":2},
  {"type":"apply","text":"loop ty","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Exit","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"pat_construct","text":"Ppat_var\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_constant\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_interval\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_construct\n(_, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_extension\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_type\n_","arity":1},
  {"type":"pat_construct","text":"Ppat_unpack\n_","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Ppat_array\npats","arity":1},
  {"type":"apply","text":"List.iter f pats","arity":2},
  {"type":"pat_construct","text":"Ppat_or\n(p1, p2)","arity":2},
  {"type":"pat_construct","text":"Ppat_effect\n(p1, p2)","arity":2},
  {"type":"apply","text":"f p1","arity":1},
  {"type":"apply","text":"f p2","arity":1},
  {"type":"pat_construct","text":"Ppat_variant\n(_, arg)","arity":2},
  {"type":"apply","text":"Option.iter f arg","arity":2},
  {"type":"pat_construct","text":"Ppat_tuple\nlst","arity":1},
  {"type":"apply","text":"List.iter f lst","arity":2},
  {"type":"pat_construct","text":"Ppat_construct\n(_, Some (_, p))","arity":2},
  {"type":"pat_construct","text":"Some\n(_, p)","arity":1},
  {"type":"pat_construct","text":"Ppat_exception\np","arity":1},
  {"type":"pat_construct","text":"Ppat_alias\n(p, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_open\n(_, p)","arity":2},
  {"type":"pat_construct","text":"Ppat_constraint\n(p, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_lazy\np","arity":1},
  {"type":"apply","text":"f p","arity":1},
  {"type":"pat_construct","text":"Ppat_record\n(args, _flag)","arity":2},
  {"type":"apply","text":"List.iter (fun (_, p) -> f p) args","arity":2},
  {"type":"apply","text":"f p","arity":1},
  {"type":"apply","text":"f p","arity":1},
  {"type":"apply","text":"raise Found","arity":1},
  {"type":"construct","text":"Found","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"shallow_iter_ppat loop p","arity":2},
  {"type":"apply","text":"loop p","arity":1},
  {"type":"pat_construct","text":"Found","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"exists_ppat\n  (function\n   | { ppat_desc = (Ppat_variant (_, _) | Ppat_type _) } -> true\n   | _ -> false) p","arity":2},
  {"type":"pat_construct","text":"Ppat_variant\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Ppat_type\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"exists_general_pattern\n  {\n    f =\n      (fun (type k) ->\n         fun (p : k general_pattern) ->\n           match p.pat_desc with\n           | Tpat_construct (_, cd, _, _) when cd.cstr_generalized -> true\n           | _ -> false)\n  } p","arity":2},
  {"type":"pat_construct","text":"Tpat_construct\n(_, cd, _, _)","arity":4},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"exists_ppat\n  (function | { ppat_desc = Ppat_construct (_, _) } -> true | _ -> false) p","arity":2},
  {"type":"pat_construct","text":"Ppat_construct\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"exists_ppat (function | { ppat_desc = Ppat_unpack _ } -> true | _ -> false) p","arity":2},
  {"type":"pat_construct","text":"Ppat_unpack\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"iter_general_pattern\n  {\n    f =\n      (fun (type k) ->\n         fun (pat : k general_pattern) ->\n           match pat.pat_desc with\n           | Tpat_variant (s, arg, row) ->\n               let row = !row in\n               if\n                 (List.exists\n                    (fun (s', fi) ->\n                       (s = s') && ((row_field_repr fi) <> Rabsent))\n                    (row_fields row))\n                   || ((not (is_fixed row)) && (not (static_row row)))\n               then ()\n               else\n                 (let ty_arg =\n                    match arg with\n                    | None -> []\n                    | Some p -> [correct_levels p.pat_type] in\n                  let fields =\n                    [(s,\n                       (rf_either ?use_ext_of:None ~no_arg:(arg = None)\n                          ty_arg ~matched:true))] in\n                  let row' =\n                    create_row ~fields ~more:(newvar ?name:None ())\n                      ~closed:false ~fixed:None ~name:None in\n                  unify_pat ?sdesc_for_hint:None env\n                    { pat with pat_type = (newty (Tvariant row')) }\n                    (correct_levels pat.pat_type))\n           | _ -> ())\n  }","arity":1},
  {"type":"pat_construct","text":"Tpat_variant\n(s, arg, row)","arity":3},
  {"type":"apply","text":"!row","arity":1},
  {"type":"apply","text":"(List.exists (fun (s', fi) -> (s = s') && ((row_field_repr fi) <> Rabsent))\n   (row_fields row))\n  || ((not (is_fixed row)) && (not (static_row row)))","arity":2},
  {"type":"apply","text":"List.exists (fun (s', fi) -> (s = s') && ((row_field_repr fi) <> Rabsent))\n  (row_fields row)","arity":2},
  {"type":"apply","text":"(s = s') && ((row_field_repr fi) <> Rabsent)","arity":2},
  {"type":"apply","text":"s = s'","arity":2},
  {"type":"apply","text":"(row_field_repr fi) <> Rabsent","arity":2},
  {"type":"apply","text":"row_field_repr fi","arity":1},
  {"type":"construct","text":"Rabsent","arity":0},
  {"type":"apply","text":"row_fields row","arity":1},
  {"type":"apply","text":"(not (is_fixed row)) && (not (static_row row))","arity":2},
  {"type":"apply","text":"not (is_fixed row)","arity":1},
  {"type":"apply","text":"is_fixed row","arity":1},
  {"type":"apply","text":"not (static_row row)","arity":1},
  {"type":"apply","text":"static_row row","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\np","arity":1},
  {"type":"construct","text":"[correct_levels p.pat_type]","arity":2},
  {"type":"apply","text":"correct_levels p.pat_type","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[(s, (rf_either ?use_ext_of:None ~no_arg:(arg = None) ty_arg ~matched:true))]","arity":2},
  {"type":"apply","text":"rf_either ?use_ext_of:None ~no_arg:(arg = None) ty_arg ~matched:true","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"arg = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"create_row ~fields ~more:(newvar ?name:None ()) ~closed:false ~fixed:None\n  ~name:None","arity":5},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env\n  { pat with pat_type = (newty (Tvariant row')) }\n  (correct_levels pat.pat_type)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newty (Tvariant row')","arity":1},
  {"type":"construct","text":"Tvariant row'","arity":1},
  {"type":"apply","text":"correct_levels pat.pat_type","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"((Texp_constraint _ | Texp_coerce (_, _)), loc, _)::_","arity":2},
  {"type":"pat_construct","text":"Texp_constraint\n_","arity":1},
  {"type":"pat_construct","text":"Texp_coerce\n(_, _)","arity":2},
  {"type":"pat_construct","text":"_::rest","arity":2},
  {"type":"apply","text":"aux rest","arity":1},
  {"type":"apply","text":"aux exp.exp_extra","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"Ident.create_local default","arity":1},
  {"type":"pat_construct","text":"p::rem","arity":2},
  {"type":"pat_construct","text":"Tpat_var\n(id, _, _)","arity":3},
  {"type":"pat_construct","text":"Tpat_alias\n(_, id, _, _)","arity":4},
  {"type":"apply","text":"name_pattern default rem","arity":2},
  {"type":"apply","text":"name_pattern default (List.map (fun c -> c.c_lhs) lst)","arity":2},
  {"type":"apply","text":"List.map (fun c -> c.c_lhs) lst","arity":2},
  {"type":"apply","text":"proper_exp_loc exp","arity":1},
  {"type":"apply","text":"unify_exp_types loc env exp.exp_type expected_ty","arity":4},
  {"type":"pat_construct","text":"Error\n(loc, env, Expr_type_clash (err, tfc, None))","arity":3},
  {"type":"pat_construct","text":"Expr_type_clash\n(err, tfc, None)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Expr_type_clash (err, tfc, sdesc_for_hint))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Expr_type_clash (err, tfc, sdesc_for_hint)))","arity":3},
  {"type":"construct","text":"Expr_type_clash (err, tfc, sdesc_for_hint)","arity":3},
  {"type":"pat_construct","text":"Pexp_ident\n_","arity":1},
  {"type":"pat_construct","text":"Pexp_apply\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_field\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_constraint\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_coerce\n(_, _, _)","arity":3},
  {"type":"pat_construct","text":"Pexp_send\n(_, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_new\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Pexp_sequence\n(_, e)","arity":2},
  {"type":"pat_construct","text":"Pexp_open\n(_, e)","arity":2},
  {"type":"apply","text":"is_inferred e","arity":1},
  {"type":"pat_construct","text":"Pexp_ifthenelse\n(_, e1, Some e2)","arity":3},
  {"type":"pat_construct","text":"Some\ne2","arity":1},
  {"type":"apply","text":"(is_inferred e1) && (is_inferred e2)","arity":2},
  {"type":"apply","text":"is_inferred e1","arity":1},
  {"type":"apply","text":"is_inferred e2","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"get_desc typ","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(Nolabel, a, b, _)","arity":4},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"get_desc b","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(Nolabel, c, d, _)","arity":4},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"Apply","arity":0},
  {"type":"pat_construct","text":"Revapply","arity":0},
  {"type":"apply","text":"get_desc f","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(Nolabel, fl, fr, _)","arity":4},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"(is_Tvar fl) &&\n  ((is_Tvar fr) &&\n     ((is_Tvar x) &&\n        ((is_Tvar res) && ((Types.eq_type fl x) && (Types.eq_type fr res)))))","arity":2},
  {"type":"apply","text":"is_Tvar fl","arity":1},
  {"type":"apply","text":"(is_Tvar fr) &&\n  ((is_Tvar x) &&\n     ((is_Tvar res) && ((Types.eq_type fl x) && (Types.eq_type fr res))))","arity":2},
  {"type":"apply","text":"is_Tvar fr","arity":1},
  {"type":"apply","text":"(is_Tvar x) &&\n  ((is_Tvar res) && ((Types.eq_type fl x) && (Types.eq_type fr res)))","arity":2},
  {"type":"apply","text":"is_Tvar x","arity":1},
  {"type":"apply","text":"(is_Tvar res) && ((Types.eq_type fl x) && (Types.eq_type fr res))","arity":2},
  {"type":"apply","text":"is_Tvar res","arity":1},
  {"type":"apply","text":"(Types.eq_type fl x) && (Types.eq_type fr res)","arity":2},
  {"type":"apply","text":"Types.eq_type fl x","arity":2},
  {"type":"apply","text":"Types.eq_type fr res","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\nexplanation","arity":1},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Error\n(loc', env', Expr_type_clash (err', None, exp'))","arity":3},
  {"type":"pat_construct","text":"Expr_type_clash\n(err', None, exp')","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"not loc'.Location.loc_ghost","arity":1},
  {"type":"construct","text":"Expr_type_clash (err', (Some explanation), exp')","arity":3},
  {"type":"construct","text":"Some explanation","arity":1},
  {"type":"apply","text":"raise (Error (loc', env', err))","arity":1},
  {"type":"construct","text":"Error (loc', env', err)","arity":3},
  {"type":"apply","text":"generalize_structure exp.exp_type","arity":1},
  {"type":"apply","text":"maybe_expansive exp","arity":1},
  {"type":"apply","text":"lower_contravariant env exp.exp_type","arity":2},
  {"type":"apply","text":"generalize exp.exp_type","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some (Pvc_constraint\n{ locally_abstract_univars = []; typ })","arity":1},
  {"type":"pat_construct","text":"Pvc_constraint\n{ locally_abstract_univars = []; typ }","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ptyp_poly\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Exp.constraint_ ?loc:(Some loc) ?attrs:None expr typ","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some (Pvc_coercion\n{ ground; coercion })","arity":1},
  {"type":"pat_construct","text":"Pvc_coercion\n{ ground; coercion }","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Exp.coerce ?loc:(Some loc) ?attrs:None expr ground coercion","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some (Pvc_constraint\n{ locally_abstract_univars = vars; typ })","arity":1},
  {"type":"pat_construct","text":"Pvc_constraint\n{ locally_abstract_univars = vars; typ }","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Exp.constraint_ ?loc:(Some loc) ?attrs:None expr typ","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.fold_right\n  (let arg = Exp.newtype ?loc:(Some loc) in\n   function | eta -> arg ?attrs:None eta) vars expr","arity":3},
  {"type":"apply","text":"Exp.newtype ?loc:(Some loc)","arity":1},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"apply","text":"arg ?attrs:None eta","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(Pvc_constraint { locally_abstract_univars = []; typ } | Pvc_coercion\n { coercion = typ;_})","arity":1},
  {"type":"pat_construct","text":"Pvc_constraint\n{ locally_abstract_univars = []; typ }","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pvc_coercion\n{ coercion = typ;_}","arity":1},
  {"type":"apply","text":"Pat.constraint_ ?loc:(Some { (pat.ppat_loc) with Location.loc_ghost = true })\n  ?attrs:None pat typ","arity":4},
  {"type":"construct","text":"Some { (pat.ppat_loc) with Location.loc_ghost = true }","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some (Pvc_constraint\n{ locally_abstract_univars = vars; typ })","arity":1},
  {"type":"pat_construct","text":"Pvc_constraint\n{ locally_abstract_univars = vars; typ }","arity":1},
  {"type":"apply","text":"Typ.varify_constructors vars typ","arity":2},
  {"type":"apply","text":"Typ.poly ?loc:(Some (typ.ptyp_loc)) ?attrs:None vars varified","arity":4},
  {"type":"construct","text":"Some (typ.ptyp_loc)","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Pat.constraint_ ?loc:(Some loc) ?attrs:None pat t","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"pat_construct","text":"Ppat_constraint\n(_, _)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_coerce\n(_, _, sty)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_constraint\n(_, sty)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"Pat.constraint_ ?loc:(Some { (pat.ppat_loc) with Location.loc_ghost = true })\n  ?attrs:None pat sty","arity":4},
  {"type":"construct","text":"Some { (pat.ppat_loc) with Location.loc_ghost = true }","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg env sexp\n  (mk_expected ?explanation:None (newvar ?name:None ()))","arity":4},
  {"type":"apply","text":"mk_expected ?explanation:None (newvar ?name:None ())","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Cmt_format.get_saved_types ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:None sexp.pexp_attributes\n  (fun () -> type_expect_ ?recarg env sexp ty_expected_explained)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_expect_ ?recarg env sexp ty_expected_explained","arity":4},
  {"type":"apply","text":"Cmt_format.set_saved_types ((Cmt_format.Partial_expression exp) ::\n  previous_saved_types)","arity":1},
  {"type":"construct","text":"(Cmt_format.Partial_expression exp) :: previous_saved_types","arity":2},
  {"type":"construct","text":"Cmt_format.Partial_expression exp","arity":1},
  {"type":"construct","text":"Rejected","arity":0},
  {"type":"apply","text":"with_explanation explanation","arity":1},
  {"type":"apply","text":"with_explanation\n  (fun () ->\n     unify_exp ?sdesc_for_hint:(Some desc) env (re exp)\n       (instance ?partial:None ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:(Some desc) env (re exp)\n  (instance ?partial:None ty_expected)","arity":4},
  {"type":"construct","text":"Some desc","arity":1},
  {"type":"apply","text":"re exp","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_ident\nlid","arity":1},
  {"type":"apply","text":"type_ident env ?recarg:(Some recarg) lid","arity":3},
  {"type":"construct","text":"Some recarg","arity":1},
  {"type":"pat_construct","text":"Val_ivar\n(_, cl_num)","arity":2},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident (\"self-\" ^ cl_num)) env","arity":2},
  {"type":"construct","text":"Longident.Lident (\"self-\" ^ cl_num)","arity":1},
  {"type":"apply","text":"\"self-\" ^ cl_num","arity":2},
  {"type":"construct","text":"Texp_instvar\n  (self_path, path,\n    (match lid.txt with\n     | Longident.Lident txt -> { loc = (lid.loc); txt }\n     | _ -> assert false))","arity":3},
  {"type":"pat_construct","text":"Longident.Lident\ntxt","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Val_self\n(_, _, _, cl_num)","arity":4},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident (\"self-\" ^ cl_num)) env","arity":2},
  {"type":"construct","text":"Longident.Lident (\"self-\" ^ cl_num)","arity":1},
  {"type":"apply","text":"\"self-\" ^ cl_num","arity":2},
  {"type":"construct","text":"Texp_ident (path, lid, desc)","arity":3},
  {"type":"construct","text":"Texp_ident (path, lid, desc)","arity":3},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None desc.val_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc\n  }","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None desc.val_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_constant\n({ pconst_desc = Pconst_string (str, _, _);_} as cst)","arity":1},
  {"type":"pat_construct","text":"Pconst_string\n(str, _, _)","arity":3},
  {"type":"apply","text":"constant_or_raise env loc cst","arity":3},
  {"type":"apply","text":"expand_head env (protect_expansion env ty_expected)","arity":2},
  {"type":"apply","text":"protect_expansion env ty_expected","arity":2},
  {"type":"construct","text":"Pdot\n  ((Pident (Ident.create_persistent \"CamlinternalFormatBasics\")), \"format6\")","arity":2},
  {"type":"construct","text":"Pident (Ident.create_persistent \"CamlinternalFormatBasics\")","arity":1},
  {"type":"apply","text":"Ident.create_persistent \"CamlinternalFormatBasics\"","arity":1},
  {"type":"apply","text":"get_desc ty_exp","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(path, _, _)","arity":3},
  {"type":"apply","text":"Path.same path fmt6_path","arity":2},
  {"type":"apply","text":"(!Clflags.principal) && ((get_level ty_exp) <> generic_level)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"(get_level ty_exp) <> generic_level","arity":2},
  {"type":"apply","text":"get_level ty_exp","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc\n  (Warnings.Not_principal \"this coercion to format6\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"this coercion to format6\"","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_format loc str env","arity":3},
  {"type":"apply","text":"type_expect ?recarg:None env format_parsetree ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None Predef.type_string);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_constant cst)\n  }","arity":1},
  {"type":"construct","text":"Texp_constant cst","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_string","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_constant\ncst","arity":1},
  {"type":"apply","text":"constant_or_raise env loc cst","arity":3},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (type_constant cst);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_constant cst)\n  }","arity":1},
  {"type":"construct","text":"Texp_constant cst","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_constant cst","arity":1},
  {"type":"pat_construct","text":"Pexp_let\n(Nonrecursive, ({ pvb_pat = spat; pvb_attributes = [];_} as vb)::[], sbody)","arity":3},
  {"type":"pat_construct","text":"Nonrecursive","arity":0},
  {"type":"pat_construct","text":"({ pvb_pat = spat; pvb_attributes = [];_} as vb)::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"may_contain_gadts spat","arity":1},
  {"type":"apply","text":"vb_exp_constraint vb","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None env\n  {\n    sexp with\n    pexp_desc =\n      (Pexp_match (sval, [Ast_helper.Exp.case spat ?guard:None sbody]))\n  } ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Pexp_match (sval, [Ast_helper.Exp.case spat ?guard:None sbody])","arity":2},
  {"type":"construct","text":"[Ast_helper.Exp.case spat ?guard:None sbody]","arity":2},
  {"type":"apply","text":"Ast_helper.Exp.case spat ?guard:None sbody","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_let\n(rec_flag, spat_sexp_list, sbody)","arity":3},
  {"type":"apply","text":"rec_flag = Recursive","arity":2},
  {"type":"construct","text":"Recursive","arity":0},
  {"type":"construct","text":"In_rec","arity":0},
  {"type":"apply","text":"(List.compare_length_with spat_sexp_list 1) > 0","arity":2},
  {"type":"apply","text":"List.compare_length_with spat_sexp_list 1","arity":2},
  {"type":"construct","text":"In_group","arity":0},
  {"type":"construct","text":"With_attributes","arity":0},
  {"type":"apply","text":"List.exists (fun pvb -> may_contain_modules pvb.pvb_pat) spat_sexp_list","arity":2},
  {"type":"apply","text":"may_contain_modules pvb.pvb_pat","arity":1},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_if may_contain_modules\n  (fun () ->\n     let allow_modules =\n       if may_contain_modules\n       then let scope = create_scope () in Modules_allowed { scope }\n       else Modules_rejected in\n     let (pat_exp_list, new_env) =\n       type_let ?check:None ?check_strict:None existential_context env\n         rec_flag spat_sexp_list allow_modules in\n     let body = type_expect ?recarg:None new_env sbody ty_expected_explained in\n     let pat_exp_list =\n       match rec_flag with\n       | Recursive -> annotate_recursive_bindings env pat_exp_list\n       | Nonrecursive -> pat_exp_list in\n     if (rec_flag = Recursive) && may_contain_modules\n     then\n       List.iter\n         (fun vb ->\n            let bound_exp = vb.vb_expr in\n            let bound_exp_type =\n              Ctype.instance ?partial:None bound_exp.exp_type in\n            let loc = proper_exp_loc bound_exp in\n            let outer_var = newvar2 ?name:None outer_level in\n            unify_exp_types loc new_env bound_exp_type outer_var)\n         pat_exp_list;\n     (pat_exp_list, body, new_env))\n  ~post:(fun (_pat_exp_list, body, new_env) ->\n           unify_exp ?sdesc_for_hint:None new_env body (newvar ?name:None ()))","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"create_scope ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Modules_allowed { scope }","arity":1},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"apply","text":"type_let ?check:None ?check_strict:None existential_context env rec_flag\n  spat_sexp_list allow_modules","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None new_env sbody ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Recursive","arity":0},
  {"type":"apply","text":"annotate_recursive_bindings env pat_exp_list","arity":2},
  {"type":"pat_construct","text":"Nonrecursive","arity":0},
  {"type":"apply","text":"(rec_flag = Recursive) && may_contain_modules","arity":2},
  {"type":"apply","text":"rec_flag = Recursive","arity":2},
  {"type":"construct","text":"Recursive","arity":0},
  {"type":"apply","text":"List.iter\n  (fun vb ->\n     let bound_exp = vb.vb_expr in\n     let bound_exp_type = Ctype.instance ?partial:None bound_exp.exp_type in\n     let loc = proper_exp_loc bound_exp in\n     let outer_var = newvar2 ?name:None outer_level in\n     unify_exp_types loc new_env bound_exp_type outer_var) pat_exp_list","arity":2},
  {"type":"apply","text":"Ctype.instance ?partial:None bound_exp.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"proper_exp_loc bound_exp","arity":1},
  {"type":"apply","text":"newvar2 ?name:None outer_level","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_exp_types loc new_env bound_exp_type outer_var","arity":4},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None new_env body (newvar ?name:None ())","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (body.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_let (rec_flag, pat_exp_list, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_let (rec_flag, pat_exp_list, body)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_function\n(params, body_constraint, body)","arity":3},
  {"type":"apply","text":"type_function env params body_constraint body ty_expected ~first:true\n  ~in_function","arity":7},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"No_gadt","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Contains_gadt","arity":0},
  {"type":"apply","text":"List.fold_right\n  (fun param rest_ty ->\n     newty\n       (Tarrow\n          ((param.fp_arg_label), (newvar ?name:None ()), rest_ty, commu_ok)))\n  params\n  (match body with\n   | Tfunction_body _ -> newvar ?name:None ()\n   | Tfunction_cases _ ->\n       newty\n         (Tarrow\n            (Nolabel, (newvar ?name:None ()), (newvar ?name:None ()),\n              commu_ok)))","arity":3},
  {"type":"apply","text":"newty\n  (Tarrow ((param.fp_arg_label), (newvar ?name:None ()), rest_ty, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow ((param.fp_arg_label), (newvar ?name:None ()), rest_ty, commu_ok)","arity":4},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Tfunction_body\n_","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Tfunction_cases\n_","arity":1},
  {"type":"apply","text":"newty\n  (Tarrow (Nolabel, (newvar ?name:None ()), (newvar ?name:None ()), commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, (newvar ?name:None ()), (newvar ?name:None ()), commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify env ty_function exp_type","arity":3},
  {"type":"pat_construct","text":"Unify\ntrace","arity":1},
  {"type":"apply","text":"(List.length params) +\n  (match body with | Tfunction_body _ -> 0 | Tfunction_cases _ -> 1)","arity":2},
  {"type":"apply","text":"List.length params","arity":1},
  {"type":"pat_construct","text":"Tfunction_body\n_","arity":1},
  {"type":"pat_construct","text":"Tfunction_cases\n_","arity":1},
  {"type":"construct","text":"Function_arity_type_clash\n  { trace; type_constraint = exp_type; syntactic_arity }","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, err))","arity":1},
  {"type":"construct","text":"Error (loc, env, err)","arity":3},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type;\n    exp_extra =\n      (List.map (fun { txt; loc } -> ((Texp_newtype txt), loc, [])) newtypes);\n    exp_loc = loc;\n    exp_desc = (Texp_function (params, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_function (params, body)","arity":2},
  {"type":"apply","text":"List.map (fun { txt; loc } -> ((Texp_newtype txt), loc, [])) newtypes","arity":2},
  {"type":"construct","text":"Texp_newtype txt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_apply\n(sfunct, sargs)","arity":2},
  {"type":"apply","text":"sargs <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"expand_head env ty_fun","arity":2},
  {"type":"apply","text":"TypeSet.mem ty seen","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"get_desc ty","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(_l, ty_arg, ty_fun, _com)","arity":4},
  {"type":"apply","text":"enforce_current_level env ty_arg","arity":2},
  {"type":"pat_construct","text":"Unify\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"lower_args (TypeSet.add ty seen) ty_fun","arity":2},
  {"type":"apply","text":"TypeSet.add ty seen","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_iter\n  (fun () ->\n     let funct =\n       with_local_level_if_principal\n         (fun () -> type_exp ?recarg:None env sfunct)\n         ~post:generalize_structure_exp in\n     let ty = instance ?partial:None funct.exp_type in (funct, [ty]))\n  ~post:(wrap_trace_gadt_instances env (lower_args TypeSet.empty))","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_if_principal (fun () -> type_exp ?recarg:None env sfunct)\n  ~post:generalize_structure_exp","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env sfunct","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None funct.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[ty]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"wrap_trace_gadt_instances env (lower_args TypeSet.empty)","arity":2},
  {"type":"apply","text":"lower_args TypeSet.empty","arity":1},
  {"type":"apply","text":"type_sfunct sfunct","arity":1},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_type; val_kind = Val_prim { prim_name = \"%revapply\" } })","arity":3},
  {"type":"pat_construct","text":"Val_prim\n{ prim_name = \"%revapply\" }","arity":1},
  {"type":"pat_construct","text":"(Nolabel, sarg)::(Nolabel, actual_sfunct)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"(Nolabel, actual_sfunct)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"(is_inferred actual_sfunct) && (check_apply_prim_type Revapply val_type)","arity":2},
  {"type":"apply","text":"is_inferred actual_sfunct","arity":1},
  {"type":"apply","text":"check_apply_prim_type Revapply val_type","arity":2},
  {"type":"construct","text":"Revapply","arity":0},
  {"type":"apply","text":"type_sfunct actual_sfunct","arity":1},
  {"type":"construct","text":"[(Nolabel, sarg)]","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_type; val_kind = Val_prim { prim_name = \"%apply\" } })","arity":3},
  {"type":"pat_construct","text":"Val_prim\n{ prim_name = \"%apply\" }","arity":1},
  {"type":"pat_construct","text":"(Nolabel, actual_sfunct)::(Nolabel, sarg)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"(Nolabel, sarg)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"check_apply_prim_type Apply val_type","arity":2},
  {"type":"construct","text":"Apply","arity":0},
  {"type":"apply","text":"type_sfunct actual_sfunct","arity":1},
  {"type":"construct","text":"[(Nolabel, sarg)]","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_application env funct sargs","arity":3},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = ty_res;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_apply (funct, args))\n  }","arity":1},
  {"type":"construct","text":"Texp_apply (funct, args)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_match\n(sarg, caselist)","arity":2},
  {"type":"apply","text":"with_local_level ?post:(Some (may_lower_contravariant_then_generalize env))\n  (fun () -> type_exp ?recarg:None env sarg)","arity":2},
  {"type":"construct","text":"Some (may_lower_contravariant_then_generalize env)","arity":1},
  {"type":"apply","text":"may_lower_contravariant_then_generalize env","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env sarg","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"List.rev valc","arity":1},
  {"type":"apply","text":"List.rev effc","arity":1},
  {"type":"apply","text":"List.rev conts","arity":1},
  {"type":"pat_construct","text":"({ pc_lhs = { ppat_desc = Ppat_effect (p1, p2) } } as c)::rest","arity":2},
  {"type":"pat_construct","text":"Ppat_effect\n(p1, p2)","arity":2},
  {"type":"apply","text":"split_cases valc ({ c with pc_lhs = p1 } :: effc) (p2 :: conts) rest","arity":4},
  {"type":"construct","text":"{ c with pc_lhs = p1 } :: effc","arity":2},
  {"type":"construct","text":"p2 :: conts","arity":2},
  {"type":"pat_construct","text":"c::rest","arity":2},
  {"type":"apply","text":"split_cases (c :: valc) effc conts rest","arity":4},
  {"type":"construct","text":"c :: valc","arity":2},
  {"type":"apply","text":"split_cases [] [] [] caselist","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"(val_caselist = []) && (eff_caselist <> [])","arity":2},
  {"type":"apply","text":"val_caselist = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"eff_caselist <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, No_value_clauses))","arity":1},
  {"type":"construct","text":"Error (loc, env, No_value_clauses)","arity":3},
  {"type":"construct","text":"No_value_clauses","arity":0},
  {"type":"apply","text":"type_cases Computation env arg.exp_type ty_expected_explained ?conts:None\n  ~check_if_total:true loc val_caselist","arity":8},
  {"type":"construct","text":"Computation","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_effect_cases Value env ty_expected_explained loc eff_caselist eff_conts","arity":6},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"List.for_all (fun c -> pattern_needs_partial_application_check c.c_lhs)\n  val_cases","arity":2},
  {"type":"apply","text":"pattern_needs_partial_application_check c.c_lhs","arity":1},
  {"type":"apply","text":"check_partial_application ~statement:false arg","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_expected);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_match (arg, val_cases, eff_cases, partial))\n  }","arity":1},
  {"type":"construct","text":"Texp_match (arg, val_cases, eff_cases, partial)","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_try\n(sbody, caselist)","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None env sbody ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"List.rev exnc","arity":1},
  {"type":"apply","text":"List.rev effc","arity":1},
  {"type":"apply","text":"List.rev conts","arity":1},
  {"type":"pat_construct","text":"({ pc_lhs = { ppat_desc = Ppat_effect (p1, p2) } } as c)::rest","arity":2},
  {"type":"pat_construct","text":"Ppat_effect\n(p1, p2)","arity":2},
  {"type":"apply","text":"split_cases exnc ({ c with pc_lhs = p1 } :: effc) (p2 :: conts) rest","arity":4},
  {"type":"construct","text":"{ c with pc_lhs = p1 } :: effc","arity":2},
  {"type":"construct","text":"p2 :: conts","arity":2},
  {"type":"pat_construct","text":"c::rest","arity":2},
  {"type":"apply","text":"split_cases (c :: exnc) effc conts rest","arity":4},
  {"type":"construct","text":"c :: exnc","arity":2},
  {"type":"apply","text":"split_cases [] [] [] caselist","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_cases Value env Predef.type_exn ty_expected_explained ?conts:None\n  ~check_if_total:false loc exn_caselist","arity":8},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_effect_cases Value env ty_expected_explained loc eff_caselist eff_conts","arity":6},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (body.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_try (body, exn_cases, eff_cases))\n  }","arity":1},
  {"type":"construct","text":"Texp_try (body, exn_cases, eff_cases)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_tuple\nsexpl","arity":1},
  {"type":"apply","text":"(List.length sexpl) >= 2","arity":2},
  {"type":"apply","text":"List.length sexpl","arity":1},
  {"type":"apply","text":"List.map (fun _ -> newgenvar ?name:None ()) sexpl","arity":2},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newgenty (Ttuple subtypes)","arity":1},
  {"type":"construct","text":"Ttuple subtypes","arity":1},
  {"type":"apply","text":"with_explanation\n  (fun () -> unify_exp_types loc env to_unify (generic_instance ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env to_unify (generic_instance ty_expected)","arity":4},
  {"type":"apply","text":"generic_instance ty_expected","arity":1},
  {"type":"apply","text":"List.map2\n  (fun body ty ->\n     type_expect ?recarg:None env body (mk_expected ?explanation:None ty))\n  sexpl subtypes","arity":3},
  {"type":"apply","text":"type_expect ?recarg:None env body (mk_expected ?explanation:None ty)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (newty (Ttuple (List.map (fun e -> e.exp_type) expl)));\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_tuple expl)\n  }","arity":1},
  {"type":"construct","text":"Texp_tuple expl","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty (Ttuple (List.map (fun e -> e.exp_type) expl))","arity":1},
  {"type":"construct","text":"Ttuple (List.map (fun e -> e.exp_type) expl)","arity":1},
  {"type":"apply","text":"List.map (fun e -> e.exp_type) expl","arity":2},
  {"type":"pat_construct","text":"Pexp_construct\n(lid, sarg)","arity":2},
  {"type":"apply","text":"type_construct env loc lid sarg ty_expected_explained sexp.pexp_attributes","arity":6},
  {"type":"pat_construct","text":"Pexp_variant\n(l, sarg)","arity":2},
  {"type":"apply","text":"protect_expansion env ty_expected","arity":2},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_desc (expand_head env ty_expected1)","arity":1},
  {"type":"apply","text":"expand_head env ty_expected1","arity":2},
  {"type":"apply","text":"get_desc (expand_head env ty_expected0)","arity":1},
  {"type":"apply","text":"expand_head env ty_expected0","arity":2},
  {"type":"pat_construct","text":"Some\nsarg","arity":1},
  {"type":"pat_construct","text":"Tvariant\nrow","arity":1},
  {"type":"pat_construct","text":"Tvariant\nrow0","arity":1},
  {"type":"apply","text":"row_field_repr (get_row_field l row)","arity":1},
  {"type":"apply","text":"get_row_field l row","arity":2},
  {"type":"apply","text":"row_field_repr (get_row_field l row0)","arity":1},
  {"type":"apply","text":"get_row_field l row0","arity":2},
  {"type":"pat_construct","text":"Rpresent (Some\nty)","arity":1},
  {"type":"pat_construct","text":"Some\nty","arity":1},
  {"type":"pat_construct","text":"Rpresent (Some\nty0)","arity":1},
  {"type":"pat_construct","text":"Some\nty0","arity":1},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env sarg ty ty0","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = ty_expected0;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_variant (l, (Some arg)))\n  }","arity":1},
  {"type":"construct","text":"Texp_variant (l, (Some arg))","arity":2},
  {"type":"construct","text":"Some arg","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise Exit","arity":1},
  {"type":"construct","text":"Exit","arity":0},
  {"type":"apply","text":"raise Exit","arity":1},
  {"type":"construct","text":"Exit","arity":0},
  {"type":"pat_construct","text":"Exit","arity":0},
  {"type":"apply","text":"Option.map (type_exp ?recarg:None env) sarg","arity":2},
  {"type":"apply","text":"type_exp ?recarg:None env","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Option.map (fun arg -> arg.exp_type) arg","arity":2},
  {"type":"apply","text":"create_row ~fields:[(l, (rf_present arg_type))] ~more:(newvar ?name:None ())\n  ~closed:false ~fixed:None ~name:None","arity":5},
  {"type":"construct","text":"[(l, (rf_present arg_type))]","arity":2},
  {"type":"apply","text":"rf_present arg_type","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (newty (Tvariant row));\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_variant (l, arg))\n  }","arity":1},
  {"type":"construct","text":"Texp_variant (l, arg)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty (Tvariant row)","arity":1},
  {"type":"construct","text":"Tvariant row","arity":1},
  {"type":"pat_construct","text":"Pexp_record\n(lid_sexp_list, opt_sexp)","arity":2},
  {"type":"apply","text":"lid_sexp_list <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nsexp","arity":1},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () -> type_exp ?recarg:(Some recarg) env sexp)\n  ~post:generalize_structure_exp","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:(Some recarg) env sexp","arity":3},
  {"type":"construct","text":"Some recarg","arity":1},
  {"type":"construct","text":"Some exp","arity":1},
  {"type":"apply","text":"extract_concrete_record env ty_expected","arity":2},
  {"type":"pat_construct","text":"Record_type\n(p0, p, _)","arity":3},
  {"type":"construct","text":"Some (p0, p, (is_principal ty_expected))","arity":1},
  {"type":"apply","text":"is_principal ty_expected","arity":1},
  {"type":"pat_construct","text":"Maybe_a_record_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_a_record_type","arity":0},
  {"type":"construct","text":"Wrong_expected_kind (Record, (Expression explanation), ty_expected)","arity":3},
  {"type":"construct","text":"Record","arity":0},
  {"type":"construct","text":"Expression explanation","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, error))","arity":1},
  {"type":"construct","text":"Error (loc, env, error)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nexp","arity":1},
  {"type":"apply","text":"extract_concrete_record env exp.exp_type","arity":2},
  {"type":"pat_construct","text":"Record_type\n(p0, p, _)","arity":3},
  {"type":"construct","text":"Some (p0, p, (is_principal exp.exp_type))","arity":1},
  {"type":"apply","text":"is_principal exp.exp_type","arity":1},
  {"type":"pat_construct","text":"Maybe_a_record_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_a_record_type","arity":0},
  {"type":"construct","text":"Expr_not_a_record_type (exp.exp_type)","arity":1},
  {"type":"apply","text":"raise (Error ((exp.exp_loc), env, error))","arity":1},
  {"type":"construct","text":"Error ((exp.exp_loc), env, error)","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(_, _, true)","arity":1},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(_, _, false)","arity":1},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Some\n(_, p', _)","arity":1},
  {"type":"apply","text":"Env.find_type p' env","arity":2},
  {"type":"apply","text":"with_local_level ?post:(Some generalize_structure)\n  (fun () -> newconstr p' (instance_list decl.type_params))","arity":2},
  {"type":"construct","text":"Some generalize_structure","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"newconstr p' (instance_list decl.type_params)","arity":2},
  {"type":"apply","text":"instance_list decl.type_params","arity":1},
  {"type":"apply","text":"opt_sexp = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"wrap_disambiguate \"This record expression is expected to have\"\n  (mk_expected ?explanation:None ty_record)\n  (type_label_a_list loc closed env Env.Construct\n     (type_label_exp true env loc ty_record) expected_type) lid_sexp_list","arity":4},
  {"type":"apply","text":"mk_expected ?explanation:None ty_record","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_label_a_list loc closed env Env.Construct\n  (type_label_exp true env loc ty_record) expected_type","arity":6},
  {"type":"construct","text":"Env.Construct","arity":0},
  {"type":"apply","text":"type_label_exp true env loc ty_record","arity":4},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"with_explanation\n  (fun () ->\n     unify_exp_types loc env (instance ?partial:None ty_record)\n       (instance ?partial:None ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env (instance ?partial:None ty_record)\n  (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_record","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"(_, lbl1, _)::(_, lbl2, _)::_","arity":2},
  {"type":"pat_construct","text":"(_, lbl2, _)::_","arity":2},
  {"type":"apply","text":"lbl1.lbl_pos = lbl2.lbl_pos","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, (Label_multiply_defined (lbl1.lbl_name))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Label_multiply_defined (lbl1.lbl_name)))","arity":3},
  {"type":"construct","text":"Label_multiply_defined (lbl1.lbl_name)","arity":1},
  {"type":"pat_construct","text":"_::rem","arity":2},
  {"type":"apply","text":"check_duplicates rem","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"check_duplicates lbl_exp_list","arity":1},
  {"type":"apply","text":"List.hd lbl_exp_list","arity":1},
  {"type":"apply","text":"List.find (fun (_, lbl', _) -> lbl'.lbl_pos = lbl.lbl_pos) lbl_exp_list","arity":2},
  {"type":"apply","text":"lbl'.lbl_pos = lbl.lbl_pos","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"Array.map\n  (fun lbl ->\n     match matching_label lbl with\n     | (lid, _lbl, lbl_exp) -> Overridden (lid, lbl_exp)\n     | exception Not_found ->\n         let present_indices =\n           List.map (fun (_, lbl, _) -> lbl.lbl_pos) lbl_exp_list in\n         let label_names = extract_label_names env ty_expected in\n         let rec missing_labels n =\n           function\n           | [] -> []\n           | lbl::rem ->\n               if List.mem n present_indices\n               then missing_labels (n + 1) rem\n               else lbl :: (missing_labels (n + 1) rem) in\n         let missing = missing_labels 0 label_names in\n         raise (Error (loc, env, (Label_missing missing)))) lbl.lbl_all","arity":2},
  {"type":"apply","text":"matching_label lbl","arity":1},
  {"type":"construct","text":"Overridden (lid, lbl_exp)","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"List.map (fun (_, lbl, _) -> lbl.lbl_pos) lbl_exp_list","arity":2},
  {"type":"apply","text":"extract_label_names env ty_expected","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"lbl::rem","arity":2},
  {"type":"apply","text":"List.mem n present_indices","arity":2},
  {"type":"apply","text":"missing_labels (n + 1) rem","arity":2},
  {"type":"apply","text":"n + 1","arity":2},
  {"type":"construct","text":"lbl :: (missing_labels (n + 1) rem)","arity":2},
  {"type":"apply","text":"missing_labels (n + 1) rem","arity":2},
  {"type":"apply","text":"n + 1","arity":2},
  {"type":"apply","text":"missing_labels 0 label_names","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, (Label_missing missing)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Label_missing missing))","arity":3},
  {"type":"construct","text":"Label_missing missing","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nexp","arity":1},
  {"type":"apply","text":"instance ?partial:None exp.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance_label ~fixed:false lbl","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_exp_types exp.exp_loc env ty_exp ty_res1","arity":4},
  {"type":"apply","text":"matching_label lbl","arity":1},
  {"type":"construct","text":"Overridden (lid, lbl_exp)","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"instance_label ~fixed:false lbl","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_exp_types loc env ty_arg1 ty_arg2","arity":4},
  {"type":"apply","text":"with_explanation\n  (fun () ->\n     unify_exp_types loc env (instance ?partial:None ty_expected) ty_res2)","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env (instance ?partial:None ty_expected) ty_res2","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Kept (ty_arg1, (lbl.lbl_mut))","arity":2},
  {"type":"apply","text":"Array.map unify_kept lbl.lbl_all","arity":2},
  {"type":"construct","text":"Some { exp with exp_type = ty_exp }","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"(_, lbl, _)::_","arity":2},
  {"type":"apply","text":"Array.length lbl.lbl_all","arity":1},
  {"type":"apply","text":"(opt_sexp <> None) && ((List.length lid_sexp_list) = num_fields)","arity":2},
  {"type":"apply","text":"opt_sexp <> None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"(List.length lid_sexp_list) = num_fields","arity":2},
  {"type":"apply","text":"List.length lid_sexp_list","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc Warnings.Useless_record_with","arity":2},
  {"type":"construct","text":"Warnings.Useless_record_with","arity":0},
  {"type":"apply","text":"List.hd lbl_exp_list","arity":1},
  {"type":"apply","text":"Array.map2 (fun descr def -> (descr, def)) label_descriptions\n  label_definitions","arity":3},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_expected);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc =\n      (Texp_record { extended_expression = opt_exp; representation; fields })\n  }","arity":1},
  {"type":"construct","text":"Texp_record { extended_expression = opt_exp; representation; fields }","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_field\n(srecord, lid)","arity":2},
  {"type":"apply","text":"type_label_access env srecord Env.Projection lid","arity":4},
  {"type":"construct","text":"Env.Projection","arity":0},
  {"type":"apply","text":"instance_label ~fixed:false label","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env record ty_res","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = ty_arg;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_field (record, lid, label))\n  }","arity":1},
  {"type":"construct","text":"Texp_field (record, lid, label)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_setfield\n(srecord, lid, snewval)","arity":3},
  {"type":"apply","text":"type_label_access env srecord Env.Mutation lid","arity":4},
  {"type":"construct","text":"Env.Mutation","arity":0},
  {"type":"apply","text":"expected_type = None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_label_exp false env loc ty_record (lid, label, snewval)","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env record ty_record","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"label.lbl_mut = Immutable","arity":2},
  {"type":"construct","text":"Immutable","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Label_not_mutable (lid.txt))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Label_not_mutable (lid.txt)))","arity":3},
  {"type":"construct","text":"Label_not_mutable (lid.txt)","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None Predef.type_unit);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_setfield (record, label_loc, label, newval))\n  }","arity":1},
  {"type":"construct","text":"Texp_setfield (record, label_loc, label, newval)","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_array\nsargl","arity":1},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Predef.type_array ty","arity":1},
  {"type":"apply","text":"with_explanation\n  (fun () -> unify_exp_types loc env to_unify (generic_instance ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env to_unify (generic_instance ty_expected)","arity":4},
  {"type":"apply","text":"generic_instance ty_expected","arity":1},
  {"type":"apply","text":"List.map\n  (fun sarg ->\n     type_expect ?recarg:None env sarg (mk_expected ?explanation:None ty))\n  sargl","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None env sarg (mk_expected ?explanation:None ty)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_expected);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_array argl)\n  }","arity":1},
  {"type":"construct","text":"Texp_array argl","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_ifthenelse\n(scond, sifso, sifnot)","arity":3},
  {"type":"apply","text":"type_expect ?recarg:None env scond\n  (mk_expected ?explanation:(Some If_conditional) Predef.type_bool)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some If_conditional) Predef.type_bool","arity":2},
  {"type":"construct","text":"Some If_conditional","arity":1},
  {"type":"construct","text":"If_conditional","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sifso\n  (mk_expected ?explanation:(Some If_no_else_branch) Predef.type_unit)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some If_no_else_branch) Predef.type_unit","arity":2},
  {"type":"construct","text":"Some If_no_else_branch","arity":1},
  {"type":"construct","text":"If_no_else_branch","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (ifso.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_ifthenelse (cond, ifso, None))\n  }","arity":1},
  {"type":"construct","text":"Texp_ifthenelse (cond, ifso, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\nsifnot","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None env sifso ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sifnot ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env ifnot ifso.exp_type","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (ifso.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_ifthenelse (cond, ifso, (Some ifnot)))\n  }","arity":1},
  {"type":"construct","text":"Texp_ifthenelse (cond, ifso, (Some ifnot))","arity":3},
  {"type":"construct","text":"Some ifnot","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_sequence\n(sexp1, sexp2)","arity":2},
  {"type":"apply","text":"type_statement ?explanation:(Some Sequence_left_hand_side) env sexp1","arity":3},
  {"type":"construct","text":"Some Sequence_left_hand_side","arity":1},
  {"type":"construct","text":"Sequence_left_hand_side","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sexp2 ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (exp2.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_sequence (exp1, exp2))\n  }","arity":1},
  {"type":"construct","text":"Texp_sequence (exp1, exp2)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_while\n(scond, sbody)","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None env scond\n  (mk_expected ?explanation:(Some While_loop_conditional) Predef.type_bool)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some While_loop_conditional) Predef.type_bool","arity":2},
  {"type":"construct","text":"Some While_loop_conditional","arity":1},
  {"type":"construct","text":"While_loop_conditional","arity":0},
  {"type":"pat_construct","text":"Texp_construct\n(_, { cstr_name = \"true\" }, _)","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_statement ?explanation:(Some While_loop_body) env sbody","arity":3},
  {"type":"construct","text":"Some While_loop_body","arity":1},
  {"type":"construct","text":"While_loop_body","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_while (cond, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_while (cond, body)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_for\n(param, slow, shigh, dir, sbody)","arity":5},
  {"type":"apply","text":"type_expect ?recarg:None env slow\n  (mk_expected ?explanation:(Some For_loop_start_index) Predef.type_int)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some For_loop_start_index) Predef.type_int","arity":2},
  {"type":"construct","text":"Some For_loop_start_index","arity":1},
  {"type":"construct","text":"For_loop_start_index","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env shigh\n  (mk_expected ?explanation:(Some For_loop_stop_index) Predef.type_int)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some For_loop_stop_index) Predef.type_int","arity":2},
  {"type":"construct","text":"Some For_loop_stop_index","arity":1},
  {"type":"construct","text":"For_loop_stop_index","arity":0},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"apply","text":"Ident.create_local \"_for\"","arity":1},
  {"type":"pat_construct","text":"Ppat_var\n{ txt }","arity":1},
  {"type":"apply","text":"Env.enter_value ?check:(Some (fun s -> Warnings.Unused_for_index s)) txt\n  {\n    val_uid = (Uid.mk ~current_unit:(Env.get_unit_name ()));\n    val_attributes = [];\n    val_loc = loc;\n    val_kind = Val_reg;\n    val_type = (instance ?partial:None Predef.type_int)\n  } env","arity":4},
  {"type":"construct","text":"Some (fun s -> Warnings.Unused_for_index s)","arity":1},
  {"type":"construct","text":"Warnings.Unused_for_index s","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_int","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Val_reg","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"raise (Error ((param.ppat_loc), env, Invalid_for_loop_index))","arity":1},
  {"type":"construct","text":"Error ((param.ppat_loc), env, Invalid_for_loop_index)","arity":3},
  {"type":"construct","text":"Invalid_for_loop_index","arity":0},
  {"type":"apply","text":"type_statement ?explanation:(Some For_loop_body) new_env sbody","arity":3},
  {"type":"construct","text":"Some For_loop_body","arity":1},
  {"type":"construct","text":"For_loop_body","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None Predef.type_unit);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_for (id, param, low, high, dir, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_for (id, param, low, high, dir, body)","arity":6},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_constraint\n(sarg, sty)","arity":2},
  {"type":"apply","text":"type_constraint env sty","arity":2},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env sarg ty\n  (instance ?partial:None ty)","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (arg.exp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty);\n    exp_extra = ((exp_extra, loc, (sexp.pexp_attributes)) :: (arg.exp_extra));\n    exp_loc = (arg.exp_loc);\n    exp_desc = (arg.exp_desc)\n  }","arity":1},
  {"type":"construct","text":"(exp_extra, loc, (sexp.pexp_attributes)) :: (arg.exp_extra)","arity":2},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_coerce\n(sarg, sty, sty')","arity":3},
  {"type":"apply","text":"type_coerce (expression_constraint sarg) env loc sty sty'\n  ~loc_arg:(sarg.pexp_loc)","arity":6},
  {"type":"apply","text":"expression_constraint sarg","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (arg.exp_attributes);\n    exp_env = env;\n    exp_type = ty';\n    exp_extra = ((exp_extra, loc, (sexp.pexp_attributes)) :: (arg.exp_extra));\n    exp_loc = (arg.exp_loc);\n    exp_desc = (arg.exp_desc)\n  }","arity":1},
  {"type":"construct","text":"(exp_extra, loc, (sexp.pexp_attributes)) :: (arg.exp_extra)","arity":2},
  {"type":"pat_construct","text":"Pexp_send\n(e, { txt = met })","arity":2},
  {"type":"apply","text":"with_local_level_if_principal (fun () -> type_send env loc explanation e met)\n  ~post:(fun (_, _, typ) -> generalize_structure typ)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_send env loc explanation e met","arity":5},
  {"type":"apply","text":"generalize_structure typ","arity":1},
  {"type":"apply","text":"get_desc typ","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(ty, [])","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpoly\n(ty, tl)","arity":2},
  {"type":"apply","text":"(!Clflags.principal) && ((get_level typ) <> generic_level)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"(get_level typ) <> generic_level","arity":2},
  {"type":"apply","text":"get_level typ","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc\n  (Warnings.Not_principal \"this use of a polymorphic method\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"this use of a polymorphic method\"","arity":1},
  {"type":"apply","text":"snd (instance_poly ?keep_names:None ~fixed:false tl ty)","arity":1},
  {"type":"apply","text":"instance_poly ?keep_names:None ~fixed:false tl ty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify env (instance ?partial:None typ) (newty (Tpoly (ty', [])))","arity":3},
  {"type":"apply","text":"instance ?partial:None typ","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newty (Tpoly (ty', []))","arity":1},
  {"type":"construct","text":"Tpoly (ty', [])","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = typ;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_send (obj, meth))\n  }","arity":1},
  {"type":"construct","text":"Texp_send (obj, meth)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_new\ncl","arity":1},
  {"type":"apply","text":"Env.lookup_class ?use:None ~loc:(cl.loc) cl.txt env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Virtual_class (cl.txt))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Virtual_class (cl.txt)))","arity":3},
  {"type":"construct","text":"Virtual_class (cl.txt)","arity":1},
  {"type":"pat_construct","text":"Some\nty","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_new (cl_path, cl, cl_decl))\n  }","arity":1},
  {"type":"construct","text":"Texp_new (cl_path, cl, cl_decl)","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_setinstvar\n(lab, snewval)","arity":2},
  {"type":"apply","text":"Env.lookup_instance_variable ?use:None ~loc lab.txt env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Mutable","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env snewval\n  (mk_expected ?explanation:None (instance ?partial:None ty))","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None (instance ?partial:None ty)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident (\"self-\" ^ cl_num)) env","arity":2},
  {"type":"construct","text":"Longident.Lident (\"self-\" ^ cl_num)","arity":1},
  {"type":"apply","text":"\"self-\" ^ cl_num","arity":2},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None Predef.type_unit);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_setinstvar (path_self, path, lab, newval))\n  }","arity":1},
  {"type":"construct","text":"Texp_setinstvar (path_self, path, lab, newval)","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Instance_variable_not_mutable (lab.txt))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Instance_variable_not_mutable (lab.txt)))","arity":3},
  {"type":"construct","text":"Instance_variable_not_mutable (lab.txt)","arity":1},
  {"type":"pat_construct","text":"Pexp_override\nlst","arity":1},
  {"type":"apply","text":"List.fold_right\n  (fun (lab, _) l ->\n     if List.exists (fun l -> l.txt = lab.txt) l\n     then raise (Error (loc, env, (Value_multiply_overridden (lab.txt))));\n     lab\n     ::\n     l) lst []","arity":3},
  {"type":"apply","text":"List.exists (fun l -> l.txt = lab.txt) l","arity":2},
  {"type":"apply","text":"l.txt = lab.txt","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, (Value_multiply_overridden (lab.txt))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Value_multiply_overridden (lab.txt)))","arity":3},
  {"type":"construct","text":"Value_multiply_overridden (lab.txt)","arity":1},
  {"type":"construct","text":"lab :: l","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident \"selfpat-*\") env","arity":2},
  {"type":"construct","text":"Longident.Lident \"selfpat-*\"","arity":1},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident \"self-*\") env","arity":2},
  {"type":"construct","text":"Longident.Lident \"self-*\"","arity":1},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, Outside_class))","arity":1},
  {"type":"construct","text":"Error (loc, env, Outside_class)","arity":3},
  {"type":"construct","text":"Outside_class","arity":0},
  {"type":"pat_construct","text":"Val_self\n(sign, _, vars, _)","arity":4},
  {"type":"apply","text":"Vars.find lab.txt vars","arity":2},
  {"type":"apply","text":"Btype.instance_variable_type lab.txt sign","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None env snewval\n  (mk_expected ?explanation:None (instance ?partial:None ty))","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None (instance ?partial:None ty)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"Vars.fold (fun var _ li -> var :: li) vars []","arity":3},
  {"type":"construct","text":"var :: li","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Unbound_instance_variable ((lab.txt), vars))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Unbound_instance_variable ((lab.txt), vars)))","arity":3},
  {"type":"construct","text":"Unbound_instance_variable ((lab.txt), vars)","arity":2},
  {"type":"apply","text":"List.map type_override lst","arity":2},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = self_ty;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_override (path_self, modifs))\n  }","arity":1},
  {"type":"construct","text":"Texp_override (path_self, modifs)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Pexp_letmodule\n(name, smodl, sbody)","arity":3},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level\n  ?post:(Some\n           (fun (_id, _pres, _modl, new_env, body) ->\n              enforce_current_level new_env body.exp_type))\n  (fun () ->\n     let (modl, pres, id, new_env) =\n       Typetexp.TyVarEnv.with_local_scope\n         (fun () ->\n            let (modl, md_shape) = (!type_module) env smodl in\n            Mtype.lower_nongen lv modl.mod_type;\n            (let pres =\n               match modl.mod_type with\n               | Mty_alias _ -> Mp_absent\n               | _ -> Mp_present in\n             let scope = create_scope () in\n             let md_uid = Uid.mk ~current_unit:(Env.get_unit_name ()) in\n             let md_shape = Shape.set_uid_if_none md_shape md_uid in\n             let md =\n               {\n                 md_uid;\n                 md_loc = (name.loc);\n                 md_attributes = [];\n                 md_type = (modl.mod_type)\n               } in\n             let (id, new_env) =\n               match name.txt with\n               | None -> (None, env)\n               | Some name ->\n                   let (id, env) =\n                     Env.enter_module_declaration ~scope ?arg:None\n                       ?shape:(Some md_shape) name pres md env in\n                   ((Some id), env) in\n             (modl, pres, id, new_env))) in\n     let body = type_expect ?recarg:None new_env sbody ty_expected_explained in\n     (id, pres, modl, new_env, body))","arity":2},
  {"type":"construct","text":"Some\n  (fun (_id, _pres, _modl, new_env, body) ->\n     enforce_current_level new_env body.exp_type)","arity":1},
  {"type":"apply","text":"enforce_current_level new_env body.exp_type","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.TyVarEnv.with_local_scope\n  (fun () ->\n     let (modl, md_shape) = (!type_module) env smodl in\n     Mtype.lower_nongen lv modl.mod_type;\n     (let pres =\n        match modl.mod_type with | Mty_alias _ -> Mp_absent | _ -> Mp_present in\n      let scope = create_scope () in\n      let md_uid = Uid.mk ~current_unit:(Env.get_unit_name ()) in\n      let md_shape = Shape.set_uid_if_none md_shape md_uid in\n      let md =\n        {\n          md_uid;\n          md_loc = (name.loc);\n          md_attributes = [];\n          md_type = (modl.mod_type)\n        } in\n      let (id, new_env) =\n        match name.txt with\n        | None -> (None, env)\n        | Some name ->\n            let (id, env) =\n              Env.enter_module_declaration ~scope ?arg:None\n                ?shape:(Some md_shape) name pres md env in\n            ((Some id), env) in\n      (modl, pres, id, new_env)))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"(!type_module) env smodl","arity":2},
  {"type":"apply","text":"!type_module","arity":1},
  {"type":"apply","text":"Mtype.lower_nongen lv modl.mod_type","arity":2},
  {"type":"pat_construct","text":"Mty_alias\n_","arity":1},
  {"type":"construct","text":"Mp_absent","arity":0},
  {"type":"construct","text":"Mp_present","arity":0},
  {"type":"apply","text":"create_scope ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Shape.set_uid_if_none md_shape md_uid","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nname","arity":1},
  {"type":"apply","text":"Env.enter_module_declaration ~scope ?arg:None ?shape:(Some md_shape) name\n  pres md env","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some md_shape","arity":1},
  {"type":"construct","text":"Some id","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None new_env sbody ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (body.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_letmodule (id, name, pres, modl, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_letmodule (id, name, pres, modl, body)","arity":5},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_letexception\n(cd, sbody)","arity":2},
  {"type":"apply","text":"Typedecl.transl_exception env cd","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None newenv sbody ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (body.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_letexception (cd, body))\n  }","arity":1},
  {"type":"construct","text":"Texp_letexception (cd, body)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_assert\ne","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None env e\n  (mk_expected ?explanation:(Some Assert_condition) Predef.type_bool)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some Assert_condition) Predef.type_bool","arity":2},
  {"type":"construct","text":"Some Assert_condition","arity":1},
  {"type":"construct","text":"Assert_condition","arity":0},
  {"type":"pat_construct","text":"Texp_construct\n(_, { cstr_name = \"false\" }, _)","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"l::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"_::s","arity":2},
  {"type":"apply","text":"innermost_location s","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_assert (cond, (innermost_location sexp.pexp_loc_stack)))\n  }","arity":1},
  {"type":"construct","text":"Texp_assert (cond, (innermost_location sexp.pexp_loc_stack))","arity":2},
  {"type":"apply","text":"innermost_location sexp.pexp_loc_stack","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_lazy\ne","arity":1},
  {"type":"apply","text":"newgenvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Predef.type_lazy_t ty","arity":1},
  {"type":"apply","text":"with_explanation\n  (fun () -> unify_exp_types loc env to_unify (generic_instance ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env to_unify (generic_instance ty_expected)","arity":4},
  {"type":"apply","text":"generic_instance ty_expected","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None env e (mk_expected ?explanation:None ty)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_expected);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_lazy arg)\n  }","arity":1},
  {"type":"construct","text":"Texp_lazy arg","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_object\ns","arity":1},
  {"type":"apply","text":"(!type_object) env loc s","arity":3},
  {"type":"apply","text":"!type_object","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = ((desc.cstr_type).csig_self);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_object (desc, meths))\n  }","arity":1},
  {"type":"construct","text":"Texp_object (desc, meths)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_poly\n(sbody, sty)","arity":2},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () ->\n     match sty with\n     | None -> ((protect_expansion env ty_expected), None)\n     | Some sty ->\n         let sty = Ast_helper.Typ.force_poly sty in\n         let cty =\n           Typetexp.transl_simple_type env ?univars:None ~closed:false sty in\n         ((cty.ctyp_type), (Some cty)))\n  ~post:(fun (ty, _) -> generalize_structure ty)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"protect_expansion env ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nsty","arity":1},
  {"type":"apply","text":"Ast_helper.Typ.force_poly sty","arity":1},
  {"type":"apply","text":"Typetexp.transl_simple_type env ?univars:None ~closed:false sty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"Some cty","arity":1},
  {"type":"apply","text":"generalize_structure ty","arity":1},
  {"type":"apply","text":"sty <> None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"with_explanation\n  (fun () ->\n     unify_exp_types loc env (instance ?partial:None ty)\n       (instance ?partial:None ty_expected))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env (instance ?partial:None ty)\n  (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_desc (expand_head env ty)","arity":1},
  {"type":"apply","text":"expand_head env ty","arity":2},
  {"type":"pat_construct","text":"Tpoly\n(ty', [])","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sbody (mk_expected ?explanation:None ty')","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty'","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpoly\n(ty', tl)","arity":2},
  {"type":"apply","text":"with_local_level\n  ?post:(Some\n           (fun (exp, vars) ->\n              generalize_and_check_univars env \"method\" exp ty_expected vars))\n  (fun () ->\n     let (vars, ty'') =\n       with_local_level_if_principal\n         (fun () -> instance_poly ?keep_names:None ~fixed:true tl ty')\n         ~post:(fun (_, ty'') -> generalize_structure ty'') in\n     let exp =\n       type_expect ?recarg:None env sbody\n         (mk_expected ?explanation:None ty'') in\n     (exp, vars))","arity":2},
  {"type":"construct","text":"Some\n  (fun (exp, vars) ->\n     generalize_and_check_univars env \"method\" exp ty_expected vars)","arity":1},
  {"type":"apply","text":"generalize_and_check_univars env \"method\" exp ty_expected vars","arity":5},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () -> instance_poly ?keep_names:None ~fixed:true tl ty')\n  ~post:(fun (_, ty'') -> generalize_structure ty'')","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_poly ?keep_names:None ~fixed:true tl ty'","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"generalize_structure ty''","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None env sbody (mk_expected ?explanation:None ty'')","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty''","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"type_exp ?recarg:None env sbody","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newty (Tpoly ((exp.exp_type), []))","arity":1},
  {"type":"construct","text":"Tpoly ((exp.exp_type), [])","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env exp ty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"re\n  {\n    exp with\n    exp_extra = (((Texp_poly cty), loc, (sexp.pexp_attributes)) ::\n      (exp.exp_extra))\n  }","arity":1},
  {"type":"construct","text":"((Texp_poly cty), loc, (sexp.pexp_attributes)) :: (exp.exp_extra)","arity":2},
  {"type":"construct","text":"Texp_poly cty","arity":1},
  {"type":"pat_construct","text":"Pexp_newtype\n({ txt = name }, sbody)","arity":2},
  {"type":"apply","text":"type_newtype loc env name\n  (fun env ->\n     let expr = type_exp ?recarg:None env sbody in (expr, (expr.exp_type)))","arity":4},
  {"type":"apply","text":"type_exp ?recarg:None env sbody","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"rue\n  {\n    body with\n    exp_type = ety;\n    exp_extra = (((Texp_newtype name), loc, (sexp.pexp_attributes)) ::\n      (body.exp_extra));\n    exp_loc = loc\n  }","arity":1},
  {"type":"construct","text":"((Texp_newtype name), loc, (sexp.pexp_attributes)) :: (body.exp_extra)","arity":2},
  {"type":"construct","text":"Texp_newtype name","arity":1},
  {"type":"pat_construct","text":"Pexp_pack\nm","arity":1},
  {"type":"apply","text":"get_desc (Ctype.expand_head env (instance ?partial:None ty_expected))","arity":1},
  {"type":"apply","text":"Ctype.expand_head env (instance ?partial:None ty_expected)","arity":2},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Tpackage\n(p, fl)","arity":2},
  {"type":"apply","text":"(!Clflags.principal) &&\n  ((get_level (Ctype.expand_head env (protect_expansion env ty_expected))) <\n     Btype.generic_level)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"(get_level (Ctype.expand_head env (protect_expansion env ty_expected))) <\n  Btype.generic_level","arity":2},
  {"type":"apply","text":"get_level (Ctype.expand_head env (protect_expansion env ty_expected))","arity":1},
  {"type":"apply","text":"Ctype.expand_head env (protect_expansion env ty_expected)","arity":2},
  {"type":"apply","text":"protect_expansion env ty_expected","arity":2},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Not_principal \"this module packing\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"this module packing\"","arity":1},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, Cannot_infer_signature))","arity":1},
  {"type":"construct","text":"Error (loc, env, Cannot_infer_signature)","arity":3},
  {"type":"construct","text":"Cannot_infer_signature","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Not_a_packed_module ty_expected)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Not_a_packed_module ty_expected))","arity":3},
  {"type":"construct","text":"Not_a_packed_module ty_expected","arity":1},
  {"type":"apply","text":"(!type_package) env m p fl","arity":4},
  {"type":"apply","text":"!type_package","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (newty (Tpackage (p, fl')));\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_pack modl)\n  }","arity":1},
  {"type":"construct","text":"Texp_pack modl","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty (Tpackage (p, fl'))","arity":1},
  {"type":"construct","text":"Tpackage (p, fl')","arity":2},
  {"type":"pat_construct","text":"Pexp_open\n(od, e)","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(!type_open_decl) ?used_slot:None env od","arity":3},
  {"type":"apply","text":"!type_open_decl","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None newenv e ty_expected_explained","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_var newenv tv exp.exp_type","arity":3},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (exp.exp_type);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_open (od, exp))\n  }","arity":1},
  {"type":"construct","text":"Texp_open (od, exp)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pexp_letop\n{ let_ = slet; ands = sands; body = sbody }","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"{ pbop_pat = spat;_}::rest","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Ast_helper.Pat.tuple ?loc:(Some loc) ?attrs:None [spat_acc; spat]","arity":3},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[spat_acc; spat]","arity":2},
  {"type":"construct","text":"[spat]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"newty (Ttuple [ty_acc; ty])","arity":1},
  {"type":"construct","text":"Ttuple [ty_acc; ty]","arity":1},
  {"type":"construct","text":"[ty_acc; ty]","arity":2},
  {"type":"construct","text":"[ty]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"loop spat_acc ty_acc rest","arity":3},
  {"type":"apply","text":"with_local_level_iter_if_principal\n  (fun () ->\n     let let_loc = (slet.pbop_op).loc in\n     let (op_path, op_desc) = type_binding_op_ident env slet.pbop_op in\n     let op_type = instance ?partial:None op_desc.val_type in\n     let (spat_params, ty_params) =\n       loop slet.pbop_pat (newvar ?name:None ()) sands in\n     let ty_func_result = newvar ?name:None () in\n     let ty_func =\n       newty (Tarrow (Nolabel, ty_params, ty_func_result, commu_ok)) in\n     let ty_result = newvar ?name:None () in\n     let ty_andops = newvar ?name:None () in\n     let ty_op =\n       newty\n         (Tarrow\n            (Nolabel, ty_andops,\n              (newty (Tarrow (Nolabel, ty_func, ty_result, commu_ok))),\n              commu_ok)) in\n     (try unify env op_type ty_op\n      with\n      | Unify err ->\n          raise\n            (Error\n               (let_loc, env, (Letop_type_clash (((slet.pbop_op).txt), err)))));\n     ((op_path, op_desc, op_type, spat_params, ty_params, ty_func_result,\n        ty_result, ty_andops),\n       [ty_andops; ty_params; ty_func_result; ty_result]))\n  ~post:generalize_structure","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_binding_op_ident env slet.pbop_op","arity":2},
  {"type":"apply","text":"instance ?partial:None op_desc.val_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"loop slet.pbop_pat (newvar ?name:None ()) sands","arity":3},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newty (Tarrow (Nolabel, ty_params, ty_func_result, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, ty_params, ty_func_result, commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newty\n  (Tarrow\n     (Nolabel, ty_andops,\n       (newty (Tarrow (Nolabel, ty_func, ty_result, commu_ok))), commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow\n  (Nolabel, ty_andops,\n    (newty (Tarrow (Nolabel, ty_func, ty_result, commu_ok))), commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"newty (Tarrow (Nolabel, ty_func, ty_result, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, ty_func, ty_result, commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"unify env op_type ty_op","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (let_loc, env, (Letop_type_clash (((slet.pbop_op).txt), err))))","arity":1},
  {"type":"construct","text":"Error (let_loc, env, (Letop_type_clash (((slet.pbop_op).txt), err)))","arity":3},
  {"type":"construct","text":"Letop_type_clash (((slet.pbop_op).txt), err)","arity":2},
  {"type":"construct","text":"[ty_andops; ty_params; ty_func_result; ty_result]","arity":2},
  {"type":"construct","text":"[ty_params; ty_func_result; ty_result]","arity":2},
  {"type":"construct","text":"[ty_func_result; ty_result]","arity":2},
  {"type":"construct","text":"[ty_result]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_andops env slet.pbop_exp sands ty_andops","arity":4},
  {"type":"apply","text":"Ast_helper.Exp.case spat_params ?guard:None sbody","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_cases Value env ty_params (mk_expected ?explanation:None ty_func_result)\n  ?conts:None ~check_if_total:true loc [scase]","arity":8},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_func_result","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[scase]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"case::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"name_cases \"param\" cases","arity":2},
  {"type":"construct","text":"Texp_letop { partial; body; param; ands; let_ }","arity":1},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_result);\n    exp_extra = [];\n    exp_loc = (sexp.pexp_loc);\n    exp_desc = desc\n  }","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_result","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_extension\n({ txt = (\"ocaml.extension_constructor\" | \"extension_constructor\");_},\n payload)","arity":1},
  {"type":"pat_construct","text":"PStr\n({ pstr_desc = Pstr_eval ({ pexp_desc = Pexp_construct (lid, None);_}, _) }::[])","arity":1},
  {"type":"pat_construct","text":"{ pstr_desc = Pstr_eval ({ pexp_desc = Pexp_construct (lid, None);_}, _) }::[]","arity":2},
  {"type":"pat_construct","text":"Pstr_eval\n({ pexp_desc = Pexp_construct (lid, None);_}, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_construct\n(lid, None)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"Env.lookup_constructor ?use:None ~loc:(lid.loc) Env.Positive lid.txt env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Env.Positive","arity":0},
  {"type":"pat_construct","text":"Cstr_extension\n(path, _)","arity":2},
  {"type":"apply","text":"raise (Error ((lid.loc), env, Not_an_extension_constructor))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, Not_an_extension_constructor)","arity":3},
  {"type":"construct","text":"Not_an_extension_constructor","arity":0},
  {"type":"apply","text":"rue\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None Predef.type_extension_constructor);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_extension_constructor (lid, path))\n  }","arity":1},
  {"type":"construct","text":"Texp_extension_constructor (lid, path)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None Predef.type_extension_constructor","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, Invalid_extension_constructor_payload))","arity":1},
  {"type":"construct","text":"Error (loc, env, Invalid_extension_constructor_payload)","arity":3},
  {"type":"construct","text":"Invalid_extension_constructor_payload","arity":0},
  {"type":"pat_construct","text":"Pexp_extension\next","arity":1},
  {"type":"apply","text":"raise (Error_forward (Builtin_attributes.error_of_extension ext))","arity":1},
  {"type":"construct","text":"Error_forward (Builtin_attributes.error_of_extension ext)","arity":1},
  {"type":"apply","text":"Builtin_attributes.error_of_extension ext","arity":1},
  {"type":"pat_construct","text":"Pexp_unreachable","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = (sexp.pexp_attributes);\n    exp_env = env;\n    exp_type = (instance ?partial:None ty_expected);\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = Texp_unreachable\n  }","arity":1},
  {"type":"construct","text":"Texp_unreachable","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env pexp","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env pexp ty\n  (instance ?partial:None ty)","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_kind = Val_self (_, _, _, _) })","arity":3},
  {"type":"pat_construct","text":"Val_self\n(_, _, _, _)","arity":4},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed env sty'","arity":2},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level\n  ?post:(Some (fun (_, arg_type, _) -> enforce_current_level env arg_type))\n  (fun () ->\n     let (arg, arg_type) = type_without_constraint env in\n     (arg, arg_type, (generalizable lv arg_type)))","arity":2},
  {"type":"construct","text":"Some (fun (_, arg_type, _) -> enforce_current_level env arg_type)","arity":1},
  {"type":"apply","text":"enforce_current_level env arg_type","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_without_constraint env","arity":1},
  {"type":"apply","text":"generalizable lv arg_type","arity":2},
  {"type":"apply","text":"!self_coercion","arity":1},
  {"type":"apply","text":"get_desc ty'","arity":1},
  {"type":"pat_construct","text":"(path, r)::_","arity":2},
  {"type":"pat_construct","text":"Tconstr\n(path', _, _)","arity":3},
  {"type":"apply","text":"(is_self arg) && (Path.same path path')","arity":2},
  {"type":"apply","text":"is_self arg","arity":1},
  {"type":"apply","text":"Path.same path path'","arity":2},
  {"type":"apply","text":"r := (loc :: (!r))","arity":2},
  {"type":"construct","text":"loc :: (!r)","arity":2},
  {"type":"apply","text":"!r","arity":1},
  {"type":"apply","text":"force ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"((free_variables ?env:(Some env) arg_type) = []) &&\n  ((free_variables ?env:(Some env) ty') = [])","arity":2},
  {"type":"apply","text":"(free_variables ?env:(Some env) arg_type) = []","arity":2},
  {"type":"apply","text":"free_variables ?env:(Some env) arg_type","arity":2},
  {"type":"construct","text":"Some env","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"(free_variables ?env:(Some env) ty') = []","arity":2},
  {"type":"apply","text":"free_variables ?env:(Some env) ty'","arity":2},
  {"type":"construct","text":"Some env","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"(not gen) &&\n  (let snap = snapshot () in\n   let (ty, _b) = enlarge_type env ty' in\n   try force (); Ctype.unify env arg_type ty; true\n   with | Unify _ -> (backtrack snap; false))","arity":2},
  {"type":"apply","text":"not gen","arity":1},
  {"type":"apply","text":"snapshot ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"enlarge_type env ty'","arity":2},
  {"type":"apply","text":"force ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Ctype.unify env arg_type ty","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Unify\n_","arity":1},
  {"type":"apply","text":"backtrack snap","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"subtype env arg_type ty'","arity":3},
  {"type":"apply","text":"force ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"force' ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(not gen) && (!Clflags.principal)","arity":2},
  {"type":"apply","text":"not gen","arity":1},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Not_principal \"this ground coercion\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"this ground coercion\"","arity":1},
  {"type":"pat_construct","text":"Subtype\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Not_subtype err)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Not_subtype err))","arity":3},
  {"type":"construct","text":"Not_subtype err","arity":1},
  {"type":"apply","text":"enlarge_type env ty'","arity":2},
  {"type":"apply","text":"force ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Ctype.unify env arg_type ty","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"full_expand ~may_forget_scope:true env ty'","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"raise\n  (Error (loc_arg, env, (Coercion_failure ({ expanded; ty = ty' }, err, b))))","arity":1},
  {"type":"construct","text":"Error (loc_arg, env, (Coercion_failure ({ expanded; ty = ty' }, err, b)))","arity":3},
  {"type":"construct","text":"Coercion_failure ({ expanded; ty = ty' }, err, b)","arity":3},
  {"type":"construct","text":"Texp_coerce (None, cty')","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nsty","arity":1},
  {"type":"apply","text":"with_local_level_iter\n  (fun () ->\n     let (cty, ty, force) = Typetexp.transl_simple_type_delayed env sty\n     and (cty', ty', force') = Typetexp.transl_simple_type_delayed env sty' in\n     ((cty, ty, force, cty', ty', force'), [ty; ty']))\n  ~post:generalize_structure","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed env sty","arity":2},
  {"type":"apply","text":"Typetexp.transl_simple_type_delayed env sty'","arity":2},
  {"type":"construct","text":"[ty; ty']","arity":2},
  {"type":"construct","text":"[ty']","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"subtype env (instance ?partial:None ty) (instance ?partial:None ty')","arity":3},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty'","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"force ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"force' ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"force'' ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Subtype\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Not_subtype err)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Not_subtype err))","arity":3},
  {"type":"construct","text":"Not_subtype err","arity":1},
  {"type":"apply","text":"type_with_constraint env ty","arity":2},
  {"type":"apply","text":"instance ?partial:None ty'","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Texp_coerce ((Some cty), cty')","arity":2},
  {"type":"construct","text":"Some cty","arity":1},
  {"type":"apply","text":"with_local_level ?post:(Some (fun cty -> generalize_structure cty.ctyp_type))\n  (fun () -> Typetexp.transl_simple_type env ?univars:None ~closed:false sty)","arity":2},
  {"type":"construct","text":"Some (fun cty -> generalize_structure cty.ctyp_type)","arity":1},
  {"type":"apply","text":"generalize_structure cty.ctyp_type","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.transl_simple_type env ?univars:None ~closed:false sty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"Texp_constraint cty","arity":1},
  {"type":"pat_construct","text":"Pcoerce\n(ty_constrain, ty_coerce)","arity":2},
  {"type":"apply","text":"type_coerce constraint_arg env loc ty_constrain ty_coerce ~loc_arg","arity":6},
  {"type":"pat_construct","text":"Pconstraint\nty_constrain","arity":1},
  {"type":"apply","text":"type_constraint env ty_constrain","arity":2},
  {"type":"apply","text":"constraint_arg.type_with_constraint env ty","arity":2},
  {"type":"apply","text":"unify_exp_types loc env ty (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Typetexp.valid_tyvar_name name","arity":1},
  {"type":"apply","text":"newvar ?name:(Some name) ()","arity":2},
  {"type":"construct","text":"Some name","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level ?post:None\n  (fun () ->\n     let decl =\n       new_local_type ?loc:(Some loc) ?manifest_and_scope:None Definition in\n     let scope = create_scope () in\n     let (id, new_env) = Env.enter_type ~scope name decl env in\n     let (result, exp_type) = type_body new_env in\n     let seen = Hashtbl.create ?random:None 8 in\n     let rec replace t =\n       if Hashtbl.mem seen (get_id t)\n       then ()\n       else\n         (Hashtbl.add seen (get_id t) ();\n          (match get_desc t with\n           | Tconstr (Path.Pident id', _, _) when id == id' -> link_type t ty\n           | _ -> Btype.iter_type_expr replace t)) in\n     let ety = Subst.type_expr Subst.identity exp_type in\n     replace ety; (result, ety))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"new_local_type ?loc:(Some loc) ?manifest_and_scope:None Definition","arity":3},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Definition","arity":0},
  {"type":"apply","text":"create_scope ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Env.enter_type ~scope name decl env","arity":4},
  {"type":"apply","text":"type_body new_env","arity":1},
  {"type":"apply","text":"Hashtbl.create ?random:None 8","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Hashtbl.mem seen (get_id t)","arity":2},
  {"type":"apply","text":"get_id t","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Hashtbl.add seen (get_id t) ()","arity":3},
  {"type":"apply","text":"get_id t","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"get_desc t","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(Path.Pident id', _, _)","arity":3},
  {"type":"pat_construct","text":"Path.Pident\nid'","arity":1},
  {"type":"apply","text":"id == id'","arity":2},
  {"type":"apply","text":"link_type t ty","arity":2},
  {"type":"apply","text":"Btype.iter_type_expr replace t","arity":2},
  {"type":"apply","text":"Subst.type_expr Subst.identity exp_type","arity":2},
  {"type":"apply","text":"replace ety","arity":1},
  {"type":"construct","text":"Rejected","arity":0},
  {"type":"apply","text":"Env.lookup_value ?use:None ~loc:(lid.loc) lid.txt env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_desc desc.val_type","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(p, _, _)","arity":3},
  {"type":"apply","text":"Path.is_constructor_typath p","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"get_desc desc.val_type","arity":1},
  {"type":"pat_construct","text":"Allowed","arity":0},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Required","arity":0},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Rejected","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Rejected","arity":0},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Required","arity":0},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(_, _, _)","arity":3},
  {"type":"apply","text":"raise (Error ((lid.loc), env, Inlined_record_escape))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, Inlined_record_escape)","arity":3},
  {"type":"construct","text":"Inlined_record_escape","arity":0},
  {"type":"pat_construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Required","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Location.mkloc (Longident.Lident (s.txt)) loc","arity":2},
  {"type":"construct","text":"Longident.Lident (s.txt)","arity":1},
  {"type":"apply","text":"type_ident env ?recarg:None lid","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Val_ivar\n(_, _)","arity":2},
  {"type":"apply","text":"fatal_error \"Illegal name for instance variable\"","arity":1},
  {"type":"pat_construct","text":"Val_self\n(_, _, _, cl_num)","arity":4},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident (\"self-\" ^ cl_num)) env","arity":2},
  {"type":"construct","text":"Longident.Lident (\"self-\" ^ cl_num)","arity":1},
  {"type":"apply","text":"\"self-\" ^ cl_num","arity":2},
  {"type":"apply","text":"(!Clflags.principal) || (Env.has_local_constraints env)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"Env.has_local_constraints env","arity":1},
  {"type":"apply","text":"with_local_level_iter_if separate\n  (fun () ->\n     let (ty_arg, ty_res) =\n       try filter_arrow env (instance ?partial:None ty_expected) arg_label\n       with\n       | Filter_arrow_failed err ->\n           let err =\n             match err with\n             | Unification_error unif_err ->\n                 Expr_type_clash (unif_err, explanation, None)\n             | Label_mismatch { got; expected; expected_type } ->\n                 Abstract_wrong_label\n                   { explanation; expected_type; expected; got }\n             | Not_a_function ->\n                 if first\n                 then Not_a_function (ty_fun, explanation)\n                 else Too_many_arguments (ty_fun, explanation) in\n           raise (Error (loc, env, err)) in\n     let ty_arg =\n       if is_optional arg_label\n       then\n         let tv = newvar ?name:None () in\n         ((try unify env ty_arg (type_option tv)\n           with | Unify _ -> assert false);\n          type_option tv)\n       else ty_arg in\n     ((ty_arg, ty_res), [ty_arg; ty_res])) ~post:generalize_structure","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"filter_arrow env (instance ?partial:None ty_expected) arg_label","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Filter_arrow_failed\nerr","arity":1},
  {"type":"pat_construct","text":"Unification_error\nunif_err","arity":1},
  {"type":"construct","text":"Expr_type_clash (unif_err, explanation, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Label_mismatch\n{ got; expected; expected_type }","arity":1},
  {"type":"construct","text":"Abstract_wrong_label { explanation; expected_type; expected; got }","arity":1},
  {"type":"pat_construct","text":"Not_a_function","arity":0},
  {"type":"construct","text":"Not_a_function (ty_fun, explanation)","arity":2},
  {"type":"construct","text":"Too_many_arguments (ty_fun, explanation)","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, err))","arity":1},
  {"type":"construct","text":"Error (loc, env, err)","arity":3},
  {"type":"apply","text":"is_optional arg_label","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify env ty_arg (type_option tv)","arity":3},
  {"type":"apply","text":"type_option tv","arity":1},
  {"type":"pat_construct","text":"Unify\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_option tv","arity":1},
  {"type":"construct","text":"[ty_arg; ty_res]","arity":2},
  {"type":"construct","text":"[ty_res]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"param::_","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pfunction_body\npexp","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pfunction_cases\n(_, loc_cases, _)","arity":3},
  {"type":"pat_construct","text":"{ pparam_loc = _; pparam_desc = Pparam_newtype newtype }::rest","arity":2},
  {"type":"pat_construct","text":"Pparam_newtype\nnewtype","arity":1},
  {"type":"apply","text":"type_newtype loc env newtype.txt\n  (fun env ->\n     let (exp_type, params, body, newtypes, contains_gadt) =\n       type_function env rest body_constraint body (newvar ?name:None ())\n         ~first:false ~in_function in\n     ((params, body, newtypes, contains_gadt), exp_type))","arity":4},
  {"type":"apply","text":"type_function env rest body_constraint body (newvar ?name:None ())\n  ~first:false ~in_function","arity":7},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"with_explanation ty_fun.explanation\n  (fun () ->\n     unify_exp_types loc env exp_type (instance ?partial:None ty_expected))","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env exp_type (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"newtype :: newtypes","arity":2},
  {"type":"pat_construct","text":"{ pparam_loc; pparam_desc = Pparam_val (arg_label, default_arg, pat) }::rest","arity":2},
  {"type":"pat_construct","text":"Pparam_val\n(arg_label, default_arg, pat)","arity":3},
  {"type":"apply","text":"split_function_ty env ty_expected ~arg_label ~first ~in_function","arity":5},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\ndefault","arity":1},
  {"type":"apply","text":"is_optional arg_label","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"unify env (type_option ty_default) ty_arg","arity":3},
  {"type":"apply","text":"type_option ty_default","arity":1},
  {"type":"pat_construct","text":"Unify\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"Ppat_constraint\n(_, sty)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Ast_helper.Exp.constraint_ ?loc:(Some gloc) ?attrs:None default sty","arity":4},
  {"type":"construct","text":"Some gloc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env default\n  (mk_expected ?explanation:None ty_default)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_default","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some default","arity":1},
  {"type":"apply","text":"(map_half_typed_cases ?additional_checks_for_split_cases:None ?conts:None\n   Value env ty_arg_internal ty_res pat.ppat_loc\n   [({ needs_refute = false; has_guard = false; pattern = pat }, ())]\n   ~type_body:(fun () pat ~when_env:_ ~ext_env ~cont:_ ~ty_expected\n                 ~ty_infer:_ ~contains_gadt:param_contains_gadt ->\n                 let (_, params, body, newtypes, suffix_contains_gadt) =\n                   type_function ext_env rest body_constraint body\n                     ty_expected ~first:false ~in_function in\n                 let contains_gadt =\n                   if param_contains_gadt\n                   then Contains_gadt\n                   else suffix_contains_gadt in\n                 (pat, params, body, newtypes, contains_gadt))\n   ~check_if_total:true)\n  |>\n  (function\n   | (result::[], partial) -> (result, partial)\n   | (([] | _::_::_), _) -> assert false)","arity":2},
  {"type":"apply","text":"map_half_typed_cases ?additional_checks_for_split_cases:None ?conts:None\n  Value env ty_arg_internal ty_res pat.ppat_loc\n  [({ needs_refute = false; has_guard = false; pattern = pat }, ())]\n  ~type_body:(fun () pat ~when_env:_ ~ext_env ~cont:_ ~ty_expected\n                ~ty_infer:_ ~contains_gadt:param_contains_gadt ->\n                let (_, params, body, newtypes, suffix_contains_gadt) =\n                  type_function ext_env rest body_constraint body ty_expected\n                    ~first:false ~in_function in\n                let contains_gadt =\n                  if param_contains_gadt\n                  then Contains_gadt\n                  else suffix_contains_gadt in\n                (pat, params, body, newtypes, contains_gadt))\n  ~check_if_total:true","arity":10},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Value","arity":0},
  {"type":"construct","text":"[({ needs_refute = false; has_guard = false; pattern = pat }, ())]","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_function ext_env rest body_constraint body ty_expected ~first:false\n  ~in_function","arity":7},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"Contains_gadt","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"result::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"_::_::_","arity":2},
  {"type":"pat_construct","text":"_::_","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"instance ?partial:None\n  (newgenty (Tarrow (arg_label, ty_arg, ty_res, commu_ok)))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newgenty (Tarrow (arg_label, ty_arg, ty_res, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (arg_label, ty_arg, ty_res, commu_ok)","arity":4},
  {"type":"apply","text":"with_explanation ty_fun.explanation\n  (fun () ->\n     unify_exp_types loc env exp_type (instance ?partial:None ty_expected))","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp_types loc env exp_type (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"list_labels env ty","arity":2},
  {"type":"apply","text":"(List.for_all ((<>) Nolabel) ls) && (not tvar)","arity":2},
  {"type":"apply","text":"List.for_all ((<>) Nolabel) ls","arity":2},
  {"type":"apply","text":"(<>) Nolabel","arity":1},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"not tvar","arity":1},
  {"type":"apply","text":"(is_optional arg_label) && (not_nolabel_function ty_res)","arity":2},
  {"type":"apply","text":"is_optional arg_label","arity":1},
  {"type":"apply","text":"not_nolabel_function ty_res","arity":1},
  {"type":"apply","text":"Location.prerr_warning pat.pat_loc Warnings.Unerasable_optional_argument","arity":2},
  {"type":"construct","text":"Warnings.Unerasable_optional_argument","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"name_pattern \"param\" [pat]","arity":2},
  {"type":"construct","text":"[pat]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Tparam_pat pat","arity":1},
  {"type":"pat_construct","text":"Some\ndefault_arg","arity":1},
  {"type":"apply","text":"Ident.create_local \"*opt*\"","arity":1},
  {"type":"construct","text":"Tparam_optional_default (pat, default_arg)","arity":2},
  {"type":"construct","text":"param :: params","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Pfunction_body\nbody","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env body (mk_expected ?explanation:None ty_expected)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nconstraint_","arity":1},
  {"type":"apply","text":"type_constraint_expect (expression_constraint body) env body_loc\n  ~loc_arg:body_loc constraint_ ty_expected","arity":6},
  {"type":"apply","text":"expression_constraint body","arity":1},
  {"type":"construct","text":"(exp_extra, body_loc, []) :: (body.exp_extra)","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Tfunction_body body","arity":1},
  {"type":"pat_construct","text":"Pfunction_cases\n(cases, _, attributes)","arity":3},
  {"type":"apply","text":"type_function_cases_expect env ty_expected loc cases attributes ~first\n  ~in_function","arity":7},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"type_cases_expect env ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nconstraint_","arity":1},
  {"type":"apply","text":"type_cases_expect env (newvar ?name:None ())","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_cases_expect env ty","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"type_constraint_expect function_cases_constraint_arg env loc ~loc_arg:loc\n  constraint_ ty_expected","arity":6},
  {"type":"construct","text":"Some exp_extra","arity":1},
  {"type":"apply","text":"name_cases \"param\" cases","arity":2},
  {"type":"construct","text":"Tfunction_cases { attributes; exp_extra; loc; param; partial; cases }","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"No_gadt","arity":0},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () -> type_exp ?recarg:(Some Allowed) env srecord)\n  ~post:generalize_structure_exp","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:(Some Allowed) env srecord","arity":3},
  {"type":"construct","text":"Some Allowed","arity":1},
  {"type":"construct","text":"Allowed","arity":0},
  {"type":"apply","text":"extract_concrete_record env ty_exp","arity":2},
  {"type":"pat_construct","text":"Record_type\n(p0, p, _)","arity":3},
  {"type":"construct","text":"Some (p0, p, (is_principal ty_exp))","arity":1},
  {"type":"apply","text":"is_principal ty_exp","arity":1},
  {"type":"pat_construct","text":"Maybe_a_record_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_a_record_type","arity":0},
  {"type":"construct","text":"Expr_not_a_record_type ty_exp","arity":1},
  {"type":"apply","text":"raise (Error ((record.exp_loc), env, error))","arity":1},
  {"type":"construct","text":"Error ((record.exp_loc), env, error)","arity":3},
  {"type":"apply","text":"Env.lookup_all_labels ?use:None ~loc:(lid.loc) usage lid.txt env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"wrap_disambiguate \"This expression has\"\n  (mk_expected ?explanation:None ty_exp)\n  (Label.disambiguate ?warn:None ?filter:None usage lid env expected_type)\n  labels","arity":4},
  {"type":"apply","text":"mk_expected ?explanation:None ty_exp","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Label.disambiguate ?warn:None ?filter:None usage lid env expected_type","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Ldot ((Lident \"CamlinternalFormatBasics\"), name)","arity":2},
  {"type":"construct","text":"Lident \"CamlinternalFormatBasics\"","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"e::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Some e","arity":1},
  {"type":"pat_construct","text":"_::_::_","arity":2},
  {"type":"pat_construct","text":"_::_","arity":2},
  {"type":"construct","text":"Some (mk_exp_loc (Pexp_tuple args))","arity":1},
  {"type":"apply","text":"mk_exp_loc (Pexp_tuple args)","arity":1},
  {"type":"construct","text":"Pexp_tuple args","arity":1},
  {"type":"apply","text":"mk_exp_loc (Pexp_construct ((mk_lid_loc lid), arg))","arity":1},
  {"type":"construct","text":"Pexp_construct ((mk_lid_loc lid), arg)","arity":2},
  {"type":"apply","text":"mk_lid_loc lid","arity":1},
  {"type":"apply","text":"mk_exp_loc (Pexp_constant { pconst_loc = loc; pconst_desc = cst })","arity":1},
  {"type":"construct","text":"Pexp_constant { pconst_loc = loc; pconst_desc = cst }","arity":1},
  {"type":"apply","text":"mk_cst (Pconst_integer ((Int.to_string n), None))","arity":1},
  {"type":"construct","text":"Pconst_integer ((Int.to_string n), None)","arity":2},
  {"type":"apply","text":"Int.to_string n","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_cst (Pconst_string (str, loc, None))","arity":1},
  {"type":"construct","text":"Pconst_string (str, loc, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_cst (Pconst_char chr)","arity":1},
  {"type":"construct","text":"Pconst_char chr","arity":1},
  {"type":"pat_construct","text":"Close_box","arity":0},
  {"type":"apply","text":"mk_constr \"Close_box\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Close_tag","arity":0},
  {"type":"apply","text":"mk_constr \"Close_tag\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Break\n(org, ns, ni)","arity":3},
  {"type":"apply","text":"mk_constr \"Break\" [mk_string org; mk_int ns; mk_int ni]","arity":2},
  {"type":"construct","text":"[mk_string org; mk_int ns; mk_int ni]","arity":2},
  {"type":"apply","text":"mk_string org","arity":1},
  {"type":"construct","text":"[mk_int ns; mk_int ni]","arity":2},
  {"type":"apply","text":"mk_int ns","arity":1},
  {"type":"construct","text":"[mk_int ni]","arity":2},
  {"type":"apply","text":"mk_int ni","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"FFlush","arity":0},
  {"type":"apply","text":"mk_constr \"FFlush\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Force_newline","arity":0},
  {"type":"apply","text":"mk_constr \"Force_newline\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Flush_newline","arity":0},
  {"type":"apply","text":"mk_constr \"Flush_newline\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Magic_size\n(org, sz)","arity":2},
  {"type":"apply","text":"mk_constr \"Magic_size\" [mk_string org; mk_int sz]","arity":2},
  {"type":"construct","text":"[mk_string org; mk_int sz]","arity":2},
  {"type":"apply","text":"mk_string org","arity":1},
  {"type":"construct","text":"[mk_int sz]","arity":2},
  {"type":"apply","text":"mk_int sz","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Escaped_at","arity":0},
  {"type":"apply","text":"mk_constr \"Escaped_at\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Escaped_percent","arity":0},
  {"type":"apply","text":"mk_constr \"Escaped_percent\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Scan_indic\nc","arity":1},
  {"type":"apply","text":"mk_constr \"Scan_indic\" [mk_char c]","arity":2},
  {"type":"construct","text":"[mk_char c]","arity":2},
  {"type":"apply","text":"mk_char c","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Open_tag (Format\n(fmt', str'))","arity":1},
  {"type":"pat_construct","text":"Format\n(fmt', str')","arity":2},
  {"type":"apply","text":"mk_constr \"Open_tag\" [mk_format fmt' str']","arity":2},
  {"type":"construct","text":"[mk_format fmt' str']","arity":2},
  {"type":"apply","text":"mk_format fmt' str'","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Open_box (Format\n(fmt', str'))","arity":1},
  {"type":"pat_construct","text":"Format\n(fmt', str')","arity":2},
  {"type":"apply","text":"mk_constr \"Open_box\" [mk_format fmt' str']","arity":2},
  {"type":"construct","text":"[mk_format fmt' str']","arity":2},
  {"type":"apply","text":"mk_format fmt' str'","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"mk_constr \"Format\" [mk_fmt fmt; mk_string str]","arity":2},
  {"type":"construct","text":"[mk_fmt fmt; mk_string str]","arity":2},
  {"type":"apply","text":"mk_fmt fmt","arity":1},
  {"type":"construct","text":"[mk_string str]","arity":2},
  {"type":"apply","text":"mk_string str","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Left","arity":0},
  {"type":"apply","text":"mk_constr \"Left\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Right","arity":0},
  {"type":"apply","text":"mk_constr \"Right\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Zeros","arity":0},
  {"type":"apply","text":"mk_constr \"Zeros\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_d","arity":0},
  {"type":"apply","text":"mk_constr \"Int_d\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_pd","arity":0},
  {"type":"apply","text":"mk_constr \"Int_pd\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_sd","arity":0},
  {"type":"apply","text":"mk_constr \"Int_sd\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_i","arity":0},
  {"type":"apply","text":"mk_constr \"Int_i\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_pi","arity":0},
  {"type":"apply","text":"mk_constr \"Int_pi\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_si","arity":0},
  {"type":"apply","text":"mk_constr \"Int_si\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_x","arity":0},
  {"type":"apply","text":"mk_constr \"Int_x\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_Cx","arity":0},
  {"type":"apply","text":"mk_constr \"Int_Cx\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_X","arity":0},
  {"type":"apply","text":"mk_constr \"Int_X\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_CX","arity":0},
  {"type":"apply","text":"mk_constr \"Int_CX\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_o","arity":0},
  {"type":"apply","text":"mk_constr \"Int_o\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_Co","arity":0},
  {"type":"apply","text":"mk_constr \"Int_Co\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_u","arity":0},
  {"type":"apply","text":"mk_constr \"Int_u\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_Cd","arity":0},
  {"type":"apply","text":"mk_constr \"Int_Cd\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_Ci","arity":0},
  {"type":"apply","text":"mk_constr \"Int_Ci\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_Cu","arity":0},
  {"type":"apply","text":"mk_constr \"Int_Cu\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"fst fconv","arity":1},
  {"type":"pat_construct","text":"Float_flag_","arity":0},
  {"type":"apply","text":"mk_constr \"Float_flag_\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_flag_p","arity":0},
  {"type":"apply","text":"mk_constr \"Float_flag_p\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_flag_s","arity":0},
  {"type":"apply","text":"mk_constr \"Float_flag_s\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"snd fconv","arity":1},
  {"type":"pat_construct","text":"Float_f","arity":0},
  {"type":"apply","text":"mk_constr \"Float_f\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_e","arity":0},
  {"type":"apply","text":"mk_constr \"Float_e\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_E","arity":0},
  {"type":"apply","text":"mk_constr \"Float_E\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_g","arity":0},
  {"type":"apply","text":"mk_constr \"Float_g\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_G","arity":0},
  {"type":"apply","text":"mk_constr \"Float_G\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_h","arity":0},
  {"type":"apply","text":"mk_constr \"Float_h\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_H","arity":0},
  {"type":"apply","text":"mk_constr \"Float_H\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_F","arity":0},
  {"type":"apply","text":"mk_constr \"Float_F\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_CF","arity":0},
  {"type":"apply","text":"mk_constr \"Float_CF\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"mk_exp_loc (Pexp_tuple [flag; kind])","arity":1},
  {"type":"construct","text":"Pexp_tuple [flag; kind]","arity":1},
  {"type":"construct","text":"[flag; kind]","arity":2},
  {"type":"construct","text":"[kind]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Line_counter","arity":0},
  {"type":"apply","text":"mk_constr \"Line_counter\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Char_counter","arity":0},
  {"type":"apply","text":"mk_constr \"Char_counter\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Token_counter","arity":0},
  {"type":"apply","text":"mk_constr \"Token_counter\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"mk_lid_loc (Longident.Lident \"None\")","arity":1},
  {"type":"construct","text":"Longident.Lident \"None\"","arity":1},
  {"type":"apply","text":"mk_exp_loc (Pexp_construct (lid_loc, None))","arity":1},
  {"type":"construct","text":"Pexp_construct (lid_loc, None)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nn","arity":1},
  {"type":"apply","text":"mk_lid_loc (Longident.Lident \"Some\")","arity":1},
  {"type":"construct","text":"Longident.Lident \"Some\"","arity":1},
  {"type":"apply","text":"mk_exp_loc (Pexp_construct (lid_loc, (Some (mk_int n))))","arity":1},
  {"type":"construct","text":"Pexp_construct (lid_loc, (Some (mk_int n)))","arity":2},
  {"type":"construct","text":"Some (mk_int n)","arity":1},
  {"type":"apply","text":"mk_int n","arity":1},
  {"type":"pat_construct","text":"Char_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Char_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"String_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"String_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Int_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int32_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Int32_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Nativeint_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Nativeint_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int64_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Int64_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Float_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Bool_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Bool_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Alpha_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Alpha_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Theta_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Theta_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Any_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Any_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Reader_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Reader_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_reader_ty\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Ignored_reader_ty\" [mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Format_arg_ty\n(sub_fmtty, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Format_arg_ty\" [mk_fmtty sub_fmtty; mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty sub_fmtty; mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty sub_fmtty","arity":1},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Format_subst_ty\n(sub_fmtty1, sub_fmtty2, rest)","arity":3},
  {"type":"apply","text":"mk_constr \"Format_subst_ty\"\n  [mk_fmtty sub_fmtty1; mk_fmtty sub_fmtty2; mk_fmtty rest]","arity":2},
  {"type":"construct","text":"[mk_fmtty sub_fmtty1; mk_fmtty sub_fmtty2; mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty sub_fmtty1","arity":1},
  {"type":"construct","text":"[mk_fmtty sub_fmtty2; mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty sub_fmtty2","arity":1},
  {"type":"construct","text":"[mk_fmtty rest]","arity":2},
  {"type":"apply","text":"mk_fmtty rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"End_of_fmtty","arity":0},
  {"type":"apply","text":"mk_constr \"End_of_fmtty\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_char","arity":0},
  {"type":"apply","text":"mk_constr \"Ignored_char\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_caml_char","arity":0},
  {"type":"apply","text":"mk_constr \"Ignored_caml_char\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_string\npad_opt","arity":1},
  {"type":"apply","text":"mk_constr \"Ignored_string\" [mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_caml_string\npad_opt","arity":1},
  {"type":"apply","text":"mk_constr \"Ignored_caml_string\" [mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_int\n(iconv, pad_opt)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_int\" [mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_int32\n(iconv, pad_opt)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_int32\" [mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_nativeint\n(iconv, pad_opt)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_nativeint\" [mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_int64\n(iconv, pad_opt)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_int64\" [mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_float\n(pad_opt, prec_opt)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_float\" [mk_int_opt pad_opt; mk_int_opt prec_opt]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt; mk_int_opt prec_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[mk_int_opt prec_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt prec_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_bool\npad_opt","arity":1},
  {"type":"apply","text":"mk_constr \"Ignored_bool\" [mk_int_opt pad_opt]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_format_arg\n(pad_opt, fmtty)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_format_arg\" [mk_int_opt pad_opt; mk_fmtty fmtty]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt; mk_fmtty fmtty]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[mk_fmtty fmtty]","arity":2},
  {"type":"apply","text":"mk_fmtty fmtty","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_format_subst\n(pad_opt, fmtty)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_format_subst\" [mk_int_opt pad_opt; mk_fmtty fmtty]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt; mk_fmtty fmtty]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[mk_fmtty fmtty]","arity":2},
  {"type":"apply","text":"mk_fmtty fmtty","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_reader","arity":0},
  {"type":"apply","text":"mk_constr \"Ignored_reader\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_scan_char_set\n(width_opt, char_set)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_scan_char_set\" [mk_int_opt width_opt; mk_string char_set]","arity":2},
  {"type":"construct","text":"[mk_int_opt width_opt; mk_string char_set]","arity":2},
  {"type":"apply","text":"mk_int_opt width_opt","arity":1},
  {"type":"construct","text":"[mk_string char_set]","arity":2},
  {"type":"apply","text":"mk_string char_set","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_scan_get_counter\ncounter","arity":1},
  {"type":"apply","text":"mk_constr \"Ignored_scan_get_counter\" [mk_counter counter]","arity":2},
  {"type":"construct","text":"[mk_counter counter]","arity":2},
  {"type":"apply","text":"mk_counter counter","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_scan_next_char","arity":0},
  {"type":"apply","text":"mk_constr \"Ignored_scan_next_char\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"No_padding","arity":0},
  {"type":"apply","text":"mk_constr \"No_padding\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Lit_padding\n(s, w)","arity":2},
  {"type":"apply","text":"mk_constr \"Lit_padding\" [mk_side s; mk_int w]","arity":2},
  {"type":"construct","text":"[mk_side s; mk_int w]","arity":2},
  {"type":"apply","text":"mk_side s","arity":1},
  {"type":"construct","text":"[mk_int w]","arity":2},
  {"type":"apply","text":"mk_int w","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Arg_padding\ns","arity":1},
  {"type":"apply","text":"mk_constr \"Arg_padding\" [mk_side s]","arity":2},
  {"type":"construct","text":"[mk_side s]","arity":2},
  {"type":"apply","text":"mk_side s","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"No_precision","arity":0},
  {"type":"apply","text":"mk_constr \"No_precision\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Lit_precision\nw","arity":1},
  {"type":"apply","text":"mk_constr \"Lit_precision\" [mk_int w]","arity":2},
  {"type":"construct","text":"[mk_int w]","arity":2},
  {"type":"apply","text":"mk_int w","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Arg_precision","arity":0},
  {"type":"apply","text":"mk_constr \"Arg_precision\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Char\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Char\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Caml_char\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Caml_char\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"String\n(pad, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"String\" [mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Caml_string\n(pad, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Caml_string\" [mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int\n(iconv, pad, prec, rest)","arity":4},
  {"type":"apply","text":"mk_constr \"Int\"\n  [mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_precision prec","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int32\n(iconv, pad, prec, rest)","arity":4},
  {"type":"apply","text":"mk_constr \"Int32\"\n  [mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_precision prec","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Nativeint\n(iconv, pad, prec, rest)","arity":4},
  {"type":"apply","text":"mk_constr \"Nativeint\"\n  [mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_precision prec","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Int64\n(iconv, pad, prec, rest)","arity":4},
  {"type":"apply","text":"mk_constr \"Int64\"\n  [mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_iconv iconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_iconv iconv","arity":1},
  {"type":"construct","text":"[mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_precision prec","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Float\n(fconv, pad, prec, rest)","arity":4},
  {"type":"apply","text":"mk_constr \"Float\"\n  [mk_fconv fconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fconv fconv; mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fconv fconv","arity":1},
  {"type":"construct","text":"[mk_padding pad; mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_precision prec; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_precision prec","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Bool\n(pad, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Bool\" [mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_padding pad; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_padding pad","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Flush\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Flush\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"String_literal\n(s, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"String_literal\" [mk_string s; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_string s; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_string s","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Char_literal\n(c, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Char_literal\" [mk_char c; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_char c; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_char c","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Format_arg\n(pad_opt, fmtty, rest)","arity":3},
  {"type":"apply","text":"mk_constr \"Format_arg\" [mk_int_opt pad_opt; mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt; mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmtty fmtty","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Format_subst\n(pad_opt, fmtty, rest)","arity":3},
  {"type":"apply","text":"mk_constr \"Format_subst\" [mk_int_opt pad_opt; mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_int_opt pad_opt; mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_int_opt pad_opt","arity":1},
  {"type":"construct","text":"[mk_fmtty fmtty; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmtty fmtty","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Alpha\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Alpha\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Theta\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Theta\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Formatting_lit\n(fmting, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Formatting_lit\" [mk_formatting_lit fmting; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_formatting_lit fmting; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_formatting_lit fmting","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Formatting_gen\n(fmting, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Formatting_gen\" [mk_formatting_gen fmting; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_formatting_gen fmting; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_formatting_gen fmting","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Reader\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Reader\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Scan_char_set\n(width_opt, char_set, rest)","arity":3},
  {"type":"apply","text":"mk_constr \"Scan_char_set\"\n  [mk_int_opt width_opt; mk_string char_set; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_int_opt width_opt; mk_string char_set; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_int_opt width_opt","arity":1},
  {"type":"construct","text":"[mk_string char_set; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_string char_set","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Scan_get_counter\n(cnt, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Scan_get_counter\" [mk_counter cnt; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_counter cnt; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_counter cnt","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Scan_next_char\nrest","arity":1},
  {"type":"apply","text":"mk_constr \"Scan_next_char\" [mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Ignored_param\n(ign, rest)","arity":2},
  {"type":"apply","text":"mk_constr \"Ignored_param\" [mk_ignored ign; mk_fmt rest]","arity":2},
  {"type":"construct","text":"[mk_ignored ign; mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_ignored ign","arity":1},
  {"type":"construct","text":"[mk_fmt rest]","arity":2},
  {"type":"apply","text":"mk_fmt rest","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"End_of_format","arity":0},
  {"type":"apply","text":"mk_constr \"End_of_format\" []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Custom\n(_, _, _)","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"not (!Clflags.strict_formats)","arity":1},
  {"type":"apply","text":"!Clflags.strict_formats","arity":1},
  {"type":"apply","text":"fmt_ebb_of_string ?legacy_behavior:(Some legacy_behavior) str","arity":2},
  {"type":"construct","text":"Some legacy_behavior","arity":1},
  {"type":"pat_construct","text":"Fmt_EBB\nfmt","arity":1},
  {"type":"apply","text":"mk_constr \"Format\" [mk_fmt fmt; mk_string str]","arity":2},
  {"type":"construct","text":"[mk_fmt fmt; mk_string str]","arity":2},
  {"type":"apply","text":"mk_fmt fmt","arity":1},
  {"type":"construct","text":"[mk_string str]","arity":2},
  {"type":"apply","text":"mk_string str","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Failure\nmsg","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Invalid_format msg)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Invalid_format msg))","arity":3},
  {"type":"construct","text":"Invalid_format msg","arity":1},
  {"type":"apply","text":"(!Clflags.principal) || (Env.has_local_constraints env)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"Env.has_local_constraints env","arity":1},
  {"type":"apply","text":"with_local_level\n  ?post:(Some\n           (fun (vars, arg) ->\n              if vars = []\n              then enforce_current_level env arg.exp_type\n              else\n                (if maybe_expansive arg\n                 then lower_contravariant env arg.exp_type;\n                 generalize_and_check_univars env \"field value\" arg\n                   label.lbl_arg vars)))\n  (fun () ->\n     let (vars, ty_arg) =\n       with_local_level_iter_if separate\n         (fun () ->\n            let (vars, ty_arg, ty_res) =\n              with_local_level_iter_if separate\n                (fun () ->\n                   let (_, ty_arg, ty_res) as r =\n                     instance_label ~fixed:true label in\n                   (r, [ty_arg; ty_res])) ~post:generalize_structure in\n            (try\n               unify env (instance ?partial:None ty_res)\n                 (instance ?partial:None ty_expected)\n             with\n             | Unify err ->\n                 raise\n                   (Error ((lid.loc), env, (Label_mismatch ((lid.txt), err)))));\n            (let ty_arg = instance ?partial:None ty_arg in\n             ((vars, ty_arg), [ty_arg]))) ~post:generalize_structure in\n     if label.lbl_private = Private\n     then\n       (if create\n        then raise (Error (loc, env, (Private_type ty_expected)))\n        else\n          raise\n            (Error ((lid.loc), env, (Private_label ((lid.txt), ty_expected)))));\n     (let arg =\n        type_argument ?explanation:None ?recarg:None env sarg ty_arg\n          (instance ?partial:None ty_arg) in\n      (vars, arg)))","arity":2},
  {"type":"construct","text":"Some\n  (fun (vars, arg) ->\n     if vars = []\n     then enforce_current_level env arg.exp_type\n     else\n       (if maybe_expansive arg then lower_contravariant env arg.exp_type;\n        generalize_and_check_univars env \"field value\" arg label.lbl_arg vars))","arity":1},
  {"type":"apply","text":"vars = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"enforce_current_level env arg.exp_type","arity":2},
  {"type":"apply","text":"maybe_expansive arg","arity":1},
  {"type":"apply","text":"lower_contravariant env arg.exp_type","arity":2},
  {"type":"apply","text":"generalize_and_check_univars env \"field value\" arg label.lbl_arg vars","arity":5},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_iter_if separate\n  (fun () ->\n     let (vars, ty_arg, ty_res) =\n       with_local_level_iter_if separate\n         (fun () ->\n            let (_, ty_arg, ty_res) as r = instance_label ~fixed:true label in\n            (r, [ty_arg; ty_res])) ~post:generalize_structure in\n     (try\n        unify env (instance ?partial:None ty_res)\n          (instance ?partial:None ty_expected)\n      with\n      | Unify err ->\n          raise (Error ((lid.loc), env, (Label_mismatch ((lid.txt), err)))));\n     (let ty_arg = instance ?partial:None ty_arg in\n      ((vars, ty_arg), [ty_arg]))) ~post:generalize_structure","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_iter_if separate\n  (fun () ->\n     let (_, ty_arg, ty_res) as r = instance_label ~fixed:true label in\n     (r, [ty_arg; ty_res])) ~post:generalize_structure","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_label ~fixed:true label","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"[ty_arg; ty_res]","arity":2},
  {"type":"construct","text":"[ty_res]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"unify env (instance ?partial:None ty_res)\n  (instance ?partial:None ty_expected)","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_res","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error ((lid.loc), env, (Label_mismatch ((lid.txt), err))))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, (Label_mismatch ((lid.txt), err)))","arity":3},
  {"type":"construct","text":"Label_mismatch ((lid.txt), err)","arity":2},
  {"type":"apply","text":"instance ?partial:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[ty_arg]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"label.lbl_private = Private","arity":2},
  {"type":"construct","text":"Private","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Private_type ty_expected)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Private_type ty_expected))","arity":3},
  {"type":"construct","text":"Private_type ty_expected","arity":1},
  {"type":"apply","text":"raise (Error ((lid.loc), env, (Private_label ((lid.txt), ty_expected))))","arity":1},
  {"type":"construct","text":"Error ((lid.loc), env, (Private_label ((lid.txt), ty_expected)))","arity":3},
  {"type":"construct","text":"Private_label ((lid.txt), ty_expected)","arity":2},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env sarg ty_arg\n  (instance ?partial:None ty_arg)","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None arg.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"list_labels env ty","arity":2},
  {"type":"apply","text":"(not tvar) && (List.for_all ((=) Nolabel) ls)","arity":2},
  {"type":"apply","text":"not tvar","arity":1},
  {"type":"apply","text":"List.for_all ((=) Nolabel) ls","arity":2},
  {"type":"apply","text":"(=) Nolabel","arity":1},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"not (is_inferred sarg)","arity":1},
  {"type":"apply","text":"is_inferred sarg","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"expand_head env ty_expected'","arity":2},
  {"type":"apply","text":"get_desc te","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(Nolabel, _, ty_res0, _)","arity":4},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"Some ((no_labels ty_res0), (get_level te))","arity":1},
  {"type":"apply","text":"no_labels ty_res0","arity":1},
  {"type":"apply","text":"get_level te","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Env.has_local_constraints env","arity":1},
  {"type":"apply","text":"Btype.snapshot ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"try_finally ?always:(Some (fun () -> Btype.backtrack snap))\n  ?exceptionally:None work","arity":3},
  {"type":"construct","text":"Some (fun () -> Btype.backtrack snap)","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Btype.backtrack snap","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"work ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\n(safe_expect, lv)","arity":1},
  {"type":"apply","text":"with_local_level_if_principal (fun () -> type_exp ?recarg:None env sarg)\n  ~post:generalize_structure_exp","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env sarg","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_desc (expand_head env ty_fun)","arity":1},
  {"type":"apply","text":"expand_head env ty_fun","arity":2},
  {"type":"pat_construct","text":"Tarrow\n(l, ty_arg, ty_fun, _)","arity":4},
  {"type":"apply","text":"is_optional l","arity":1},
  {"type":"apply","text":"option_none env (instance ?partial:None ty_arg) sarg.pexp_loc","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"make_args ((l, (Some ty)) :: args) ty_fun","arity":2},
  {"type":"construct","text":"(l, (Some ty)) :: args","arity":2},
  {"type":"construct","text":"Some ty","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(l, _, ty_res', _)","arity":4},
  {"type":"apply","text":"(l = Nolabel) || (!Clflags.classic)","arity":2},
  {"type":"apply","text":"l = Nolabel","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"!Clflags.classic","arity":1},
  {"type":"apply","text":"List.rev args","arity":1},
  {"type":"apply","text":"no_labels ty_res'","arity":1},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"List.rev args","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"make_args [] texp.exp_type","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None texp.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"not (simple_res || safe_expect)","arity":1},
  {"type":"apply","text":"simple_res || safe_expect","arity":2},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env texp ty_expected","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"(!Clflags.principal) &&\n  ((lv <> generic_level) || ((get_level ty_fun') <> generic_level))","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"(lv <> generic_level) || ((get_level ty_fun') <> generic_level)","arity":2},
  {"type":"apply","text":"lv <> generic_level","arity":2},
  {"type":"apply","text":"(get_level ty_fun') <> generic_level","arity":2},
  {"type":"apply","text":"get_level ty_fun'","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_fun'","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"get_desc (expand_head env ty_expected)","arity":1},
  {"type":"apply","text":"expand_head env ty_expected","arity":2},
  {"type":"pat_construct","text":"Tarrow\n(Nolabel, ty_arg, ty_res, _)","arity":4},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env { texp with exp_type = ty_fun }\n  ty_expected","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"args = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Ident.create_local name","arity":1},
  {"type":"construct","text":"Val_reg","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Uid.mk ~current_unit:(Env.get_unit_name ())","arity":1},
  {"type":"apply","text":"Env.get_unit_name ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Env.add_value ?check:None id desc env","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Tpat_var (id, (mknoloc name), (desc.val_uid))","arity":3},
  {"type":"apply","text":"mknoloc name","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Texp_ident ((Path.Pident id), (mknoloc (Longident.Lident name)), desc)","arity":3},
  {"type":"construct","text":"Path.Pident id","arity":1},
  {"type":"apply","text":"mknoloc (Longident.Lident name)","arity":1},
  {"type":"construct","text":"Longident.Lident name","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"var_pair \"eta\" ty_arg","arity":2},
  {"type":"construct","text":"Texp_apply (texp, (args @ [(Nolabel, (Some eta_var))]))","arity":2},
  {"type":"apply","text":"args @ [(Nolabel, (Some eta_var))]","arity":2},
  {"type":"construct","text":"[(Nolabel, (Some eta_var))]","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"Some eta_var","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[case eta_pat e]","arity":2},
  {"type":"apply","text":"case eta_pat e","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"name_cases \"param\" cases","arity":2},
  {"type":"construct","text":"Texp_function\n  ([],\n    (Tfunction_cases\n       {\n         attributes = [];\n         exp_extra = None;\n         loc = cases_loc;\n         param;\n         partial = Total;\n         cases\n       }))","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"Tfunction_cases\n  {\n    attributes = [];\n    exp_extra = None;\n    loc = cases_loc;\n    param;\n    partial = Total;\n    cases\n  }","arity":1},
  {"type":"construct","text":"Total","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Location.prerr_warning texp.exp_loc\n  (Warnings.Eliminated_optional_arguments\n     (List.map (fun (l, _) -> Asttypes.string_of_label l) args))","arity":2},
  {"type":"construct","text":"Warnings.Eliminated_optional_arguments\n  (List.map (fun (l, _) -> Asttypes.string_of_label l) args)","arity":1},
  {"type":"apply","text":"List.map (fun (l, _) -> Asttypes.string_of_label l) args","arity":2},
  {"type":"apply","text":"Asttypes.string_of_label l","arity":1},
  {"type":"apply","text":"Location.prerr_warning texp.exp_loc\n  (Warnings.Non_principal_labels \"eliminated optional argument\")","arity":2},
  {"type":"construct","text":"Warnings.Non_principal_labels \"eliminated optional argument\"","arity":1},
  {"type":"apply","text":"var_pair \"arg\" texp.exp_type","arity":2},
  {"type":"apply","text":"re\n  {\n    texp with\n    exp_type = ty_fun;\n    exp_desc =\n      (Texp_let\n         (Nonrecursive,\n           [{\n              vb_loc = Location.none;\n              vb_attributes = [];\n              vb_rec_kind = Dynamic;\n              vb_expr = texp;\n              vb_pat = let_pat\n            }], (func let_var)))\n  }","arity":1},
  {"type":"construct","text":"Texp_let\n  (Nonrecursive,\n    [{\n       vb_loc = Location.none;\n       vb_attributes = [];\n       vb_rec_kind = Dynamic;\n       vb_expr = texp;\n       vb_pat = let_pat\n     }], (func let_var))","arity":3},
  {"type":"construct","text":"Nonrecursive","arity":0},
  {"type":"construct","text":"[{\n   vb_loc = Location.none;\n   vb_attributes = [];\n   vb_rec_kind = Dynamic;\n   vb_expr = texp;\n   vb_pat = let_pat\n }]","arity":2},
  {"type":"construct","text":"Dynamic","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"func let_var","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"type_expect ?recarg env sarg (mk_expected ?explanation ty_expected')","arity":4},
  {"type":"apply","text":"mk_expected ?explanation ty_expected'","arity":2},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env texp ty_expected","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.fold_left\n  (fun ty_fun (l, ty, lv) ->\n     newty2 ~level:lv (Tarrow (l, ty, ty_fun, commu_ok))) ty_fun omitted","arity":3},
  {"type":"apply","text":"newty2 ~level:lv (Tarrow (l, ty, ty_fun, commu_ok))","arity":2},
  {"type":"construct","text":"Tarrow (l, ty, ty_fun, commu_ok)","arity":4},
  {"type":"apply","text":"list_labels env ty_fun","arity":2},
  {"type":"apply","text":"tvar || (List.mem l ls)","arity":2},
  {"type":"apply","text":"List.mem l ls","arity":2},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"expand_head env ty_fun","arity":2},
  {"type":"apply","text":"get_desc ty_fun","arity":1},
  {"type":"pat_construct","text":"Tvar\n_","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"((get_level ty_fun) >= (get_level t1)) &&\n  (not (is_prim ~name:\"%identity\" funct))","arity":2},
  {"type":"apply","text":"(get_level ty_fun) >= (get_level t1)","arity":2},
  {"type":"apply","text":"get_level ty_fun","arity":1},
  {"type":"apply","text":"get_level t1","arity":1},
  {"type":"apply","text":"not (is_prim ~name:\"%identity\" funct)","arity":1},
  {"type":"apply","text":"is_prim ~name:\"%identity\" funct","arity":2},
  {"type":"apply","text":"Location.prerr_warning sarg.pexp_loc Warnings.Ignored_extra_argument","arity":2},
  {"type":"construct","text":"Warnings.Ignored_extra_argument","arity":0},
  {"type":"apply","text":"unify env ty_fun (newty (Tarrow (lbl, t1, t2, (commu_var ()))))","arity":3},
  {"type":"apply","text":"newty (Tarrow (lbl, t1, t2, (commu_var ())))","arity":1},
  {"type":"construct","text":"Tarrow (lbl, t1, t2, (commu_var ()))","arity":4},
  {"type":"apply","text":"commu_var ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Tarrow\n(l, t1, t2, _)","arity":4},
  {"type":"apply","text":"(l = lbl) ||\n  ((!Clflags.classic) && ((lbl = Nolabel) && (not (is_optional l))))","arity":2},
  {"type":"apply","text":"l = lbl","arity":2},
  {"type":"apply","text":"(!Clflags.classic) && ((lbl = Nolabel) && (not (is_optional l)))","arity":2},
  {"type":"apply","text":"!Clflags.classic","arity":1},
  {"type":"apply","text":"(lbl = Nolabel) && (not (is_optional l))","arity":2},
  {"type":"apply","text":"lbl = Nolabel","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"not (is_optional l)","arity":1},
  {"type":"apply","text":"is_optional l","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(_, _, _, _)","arity":4},
  {"type":"apply","text":"newty td","arity":1},
  {"type":"apply","text":"result_type ((!omitted_parameters) @ (!eliminated_optional_arguments)) ty_fun","arity":2},
  {"type":"apply","text":"(!omitted_parameters) @ (!eliminated_optional_arguments)","arity":2},
  {"type":"apply","text":"!omitted_parameters","arity":1},
  {"type":"apply","text":"!eliminated_optional_arguments","arity":1},
  {"type":"apply","text":"get_desc ty_res","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(_, _, _, _)","arity":4},
  {"type":"apply","text":"(!Clflags.classic) || (not (has_label lbl ty_fun))","arity":2},
  {"type":"apply","text":"!Clflags.classic","arity":1},
  {"type":"apply","text":"not (has_label lbl ty_fun)","arity":1},
  {"type":"apply","text":"has_label lbl ty_fun","arity":2},
  {"type":"apply","text":"raise\n  (Error ((sarg.pexp_loc), env, (Apply_wrong_label (lbl, ty_res, false))))","arity":1},
  {"type":"construct","text":"Error ((sarg.pexp_loc), env, (Apply_wrong_label (lbl, ty_res, false)))","arity":3},
  {"type":"construct","text":"Apply_wrong_label (lbl, ty_res, false)","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"raise (Error ((funct.exp_loc), env, Incoherent_label_order))","arity":1},
  {"type":"construct","text":"Error ((funct.exp_loc), env, Incoherent_label_order)","arity":3},
  {"type":"construct","text":"Incoherent_label_order","arity":0},
  {"type":"apply","text":"(Option.value ~default:(funct.exp_loc))\n  ((List.find_map (function | (_, Some (_, loc)) -> loc | _ -> None))\n     typed_args)","arity":1},
  {"type":"apply","text":"Option.value ~default:(funct.exp_loc)","arity":2},
  {"type":"apply","text":"(List.find_map (function | (_, Some (_, loc)) -> loc | _ -> None)) typed_args","arity":1},
  {"type":"apply","text":"List.find_map (function | (_, Some (_, loc)) -> loc | _ -> None)","arity":1},
  {"type":"pat_construct","text":"Some\n(_, loc)","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"raise\n  (Error\n     ((funct.exp_loc), env,\n       (Apply_non_function\n          {\n            extra_arg_loc = (sarg.pexp_loc);\n            previous_arg_loc;\n            res_ty = (expand_head env ty_res);\n            func_ty = (expand_head env funct.exp_type);\n            funct\n          })))","arity":1},
  {"type":"construct","text":"Error\n  ((funct.exp_loc), env,\n    (Apply_non_function\n       {\n         extra_arg_loc = (sarg.pexp_loc);\n         previous_arg_loc;\n         res_ty = (expand_head env ty_res);\n         func_ty = (expand_head env funct.exp_type);\n         funct\n       }))","arity":3},
  {"type":"construct","text":"Apply_non_function\n  {\n    extra_arg_loc = (sarg.pexp_loc);\n    previous_arg_loc;\n    res_ty = (expand_head env ty_res);\n    func_ty = (expand_head env funct.exp_type);\n    funct\n  }","arity":1},
  {"type":"apply","text":"expand_head env funct.exp_type","arity":2},
  {"type":"apply","text":"expand_head env ty_res","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sarg (mk_expected ?explanation:None ty_arg)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"is_optional lbl","arity":1},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env arg (type_option (newvar ?name:None ()))","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_option (newvar ?name:None ())","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"(lbl, (Some (arg, (Some (sarg.pexp_loc))))) :: typed_args","arity":2},
  {"type":"construct","text":"Some (arg, (Some (sarg.pexp_loc)))","arity":1},
  {"type":"construct","text":"Some (sarg.pexp_loc)","arity":1},
  {"type":"apply","text":"(!Clflags.classic) ||\n  (let (ls, tvar) = list_labels env funct.exp_type in\n   (not tvar) &&\n     (let labels = List.filter (fun l -> not (is_optional l)) ls in\n      ((List.length labels) = (List.length sargs)) &&\n        ((List.for_all (fun (l, _) -> l = Nolabel) sargs) &&\n           ((List.exists (fun l -> l <> Nolabel) labels) &&\n              (Location.prerr_warning funct.exp_loc\n                 (Warnings.Labels_omitted\n                    (List.map Asttypes.string_of_label\n                       (List.filter ((<>) Nolabel) labels)));\n               true)))))","arity":2},
  {"type":"apply","text":"!Clflags.classic","arity":1},
  {"type":"apply","text":"list_labels env funct.exp_type","arity":2},
  {"type":"apply","text":"(not tvar) &&\n  (let labels = List.filter (fun l -> not (is_optional l)) ls in\n   ((List.length labels) = (List.length sargs)) &&\n     ((List.for_all (fun (l, _) -> l = Nolabel) sargs) &&\n        ((List.exists (fun l -> l <> Nolabel) labels) &&\n           (Location.prerr_warning funct.exp_loc\n              (Warnings.Labels_omitted\n                 (List.map Asttypes.string_of_label\n                    (List.filter ((<>) Nolabel) labels)));\n            true))))","arity":2},
  {"type":"apply","text":"not tvar","arity":1},
  {"type":"apply","text":"List.filter (fun l -> not (is_optional l)) ls","arity":2},
  {"type":"apply","text":"not (is_optional l)","arity":1},
  {"type":"apply","text":"is_optional l","arity":1},
  {"type":"apply","text":"((List.length labels) = (List.length sargs)) &&\n  ((List.for_all (fun (l, _) -> l = Nolabel) sargs) &&\n     ((List.exists (fun l -> l <> Nolabel) labels) &&\n        (Location.prerr_warning funct.exp_loc\n           (Warnings.Labels_omitted\n              (List.map Asttypes.string_of_label\n                 (List.filter ((<>) Nolabel) labels)));\n         true)))","arity":2},
  {"type":"apply","text":"(List.length labels) = (List.length sargs)","arity":2},
  {"type":"apply","text":"List.length labels","arity":1},
  {"type":"apply","text":"List.length sargs","arity":1},
  {"type":"apply","text":"(List.for_all (fun (l, _) -> l = Nolabel) sargs) &&\n  ((List.exists (fun l -> l <> Nolabel) labels) &&\n     (Location.prerr_warning funct.exp_loc\n        (Warnings.Labels_omitted\n           (List.map Asttypes.string_of_label\n              (List.filter ((<>) Nolabel) labels)));\n      true))","arity":2},
  {"type":"apply","text":"List.for_all (fun (l, _) -> l = Nolabel) sargs","arity":2},
  {"type":"apply","text":"l = Nolabel","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"(List.exists (fun l -> l <> Nolabel) labels) &&\n  (Location.prerr_warning funct.exp_loc\n     (Warnings.Labels_omitted\n        (List.map Asttypes.string_of_label\n           (List.filter ((<>) Nolabel) labels)));\n   true)","arity":2},
  {"type":"apply","text":"List.exists (fun l -> l <> Nolabel) labels","arity":2},
  {"type":"apply","text":"l <> Nolabel","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"Location.prerr_warning funct.exp_loc\n  (Warnings.Labels_omitted\n     (List.map Asttypes.string_of_label (List.filter ((<>) Nolabel) labels)))","arity":2},
  {"type":"construct","text":"Warnings.Labels_omitted\n  (List.map Asttypes.string_of_label (List.filter ((<>) Nolabel) labels))","arity":1},
  {"type":"apply","text":"List.map Asttypes.string_of_label (List.filter ((<>) Nolabel) labels)","arity":2},
  {"type":"apply","text":"List.filter ((<>) Nolabel) labels","arity":2},
  {"type":"apply","text":"(<>) Nolabel","arity":1},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"ref false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"List.fold_left type_unknown_arg (ty_fun0, args) sargs","arity":3},
  {"type":"apply","text":"List.map\n  (function\n   | (l, None) -> (l, None)\n   | (l, Some (f, _loc)) -> (l, (Some (f ())))) (List.rev typed_args)","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\n(f, _loc)","arity":1},
  {"type":"construct","text":"Some (f ())","arity":1},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.rev typed_args","arity":1},
  {"type":"apply","text":"instance ?partial:None (result_type (!omitted_parameters) ty_fun)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"result_type (!omitted_parameters) ty_fun","arity":2},
  {"type":"apply","text":"!omitted_parameters","arity":1},
  {"type":"apply","text":"sargs = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_unknown_args ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"expand_head env ty_fun","arity":2},
  {"type":"apply","text":"get_desc ty_fun'","arity":1},
  {"type":"apply","text":"get_desc (expand_head env ty_fun0)","arity":1},
  {"type":"apply","text":"expand_head env ty_fun0","arity":2},
  {"type":"pat_construct","text":"Tarrow\n(l, ty, ty_fun, com)","arity":4},
  {"type":"pat_construct","text":"Tarrow\n(_, ty0, ty_fun0, _)","arity":4},
  {"type":"apply","text":"is_commu_ok com","arity":1},
  {"type":"apply","text":"get_level ty_fun'","arity":1},
  {"type":"apply","text":"(not (!warned)) && ((!Clflags.principal) && (lv <> generic_level))","arity":2},
  {"type":"apply","text":"not (!warned)","arity":1},
  {"type":"apply","text":"!warned","arity":1},
  {"type":"apply","text":"(!Clflags.principal) && (lv <> generic_level)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"lv <> generic_level","arity":2},
  {"type":"apply","text":"warned := true","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Location.prerr_warning loc w","arity":2},
  {"type":"apply","text":"label_name l","arity":1},
  {"type":"apply","text":"is_optional l","arity":1},
  {"type":"apply","text":"(not optional) || (is_optional l')","arity":2},
  {"type":"apply","text":"not optional","arity":1},
  {"type":"apply","text":"is_optional l'","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env sarg ty ty0","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"may_warn sarg.pexp_loc\n  (Warnings.Not_principal \"using an optional argument here\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"using an optional argument here\"","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"option_some env\n  (type_argument ?explanation:None ?recarg:None env sarg\n     (extract_option_type env ty) (extract_option_type env ty0))","arity":2},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env sarg\n  (extract_option_type env ty) (extract_option_type env ty0)","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"extract_option_type env ty","arity":2},
  {"type":"apply","text":"extract_option_type env ty0","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"may_warn funct.exp_loc\n  (Warnings.Non_principal_labels \"eliminated optional argument\")","arity":2},
  {"type":"construct","text":"Warnings.Non_principal_labels \"eliminated optional argument\"","arity":1},
  {"type":"apply","text":"eliminated_optional_arguments := ((l, ty, lv) ::\n  (!eliminated_optional_arguments))","arity":2},
  {"type":"construct","text":"(l, ty, lv) :: (!eliminated_optional_arguments)","arity":2},
  {"type":"apply","text":"!eliminated_optional_arguments","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"option_none env (instance ?partial:None ty) Location.none","arity":3},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"(l', sarg)::remaining_sargs","arity":2},
  {"type":"apply","text":"(name = (label_name l')) || ((not optional) && (l' = Nolabel))","arity":2},
  {"type":"apply","text":"name = (label_name l')","arity":2},
  {"type":"apply","text":"label_name l'","arity":1},
  {"type":"apply","text":"(not optional) && (l' = Nolabel)","arity":2},
  {"type":"apply","text":"not optional","arity":1},
  {"type":"apply","text":"l' = Nolabel","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"Some ((use_arg sarg l'), (Some (sarg.pexp_loc)))","arity":1},
  {"type":"apply","text":"use_arg sarg l'","arity":2},
  {"type":"construct","text":"Some (sarg.pexp_loc)","arity":1},
  {"type":"apply","text":"optional &&\n  ((not (List.exists (fun (l, _) -> name = (label_name l)) remaining_sargs))\n     && (List.exists (function | (Nolabel, _) -> true | _ -> false) sargs))","arity":2},
  {"type":"apply","text":"(not (List.exists (fun (l, _) -> name = (label_name l)) remaining_sargs)) &&\n  (List.exists (function | (Nolabel, _) -> true | _ -> false) sargs)","arity":2},
  {"type":"apply","text":"not (List.exists (fun (l, _) -> name = (label_name l)) remaining_sargs)","arity":1},
  {"type":"apply","text":"List.exists (fun (l, _) -> name = (label_name l)) remaining_sargs","arity":2},
  {"type":"apply","text":"name = (label_name l)","arity":2},
  {"type":"apply","text":"label_name l","arity":1},
  {"type":"apply","text":"List.exists (function | (Nolabel, _) -> true | _ -> false) sargs","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"Some ((eliminate_optional_arg ()), (Some (sarg.pexp_loc)))","arity":1},
  {"type":"apply","text":"eliminate_optional_arg ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Some (sarg.pexp_loc)","arity":1},
  {"type":"apply","text":"raise\n  (Error ((sarg.pexp_loc), env, (Apply_wrong_label (l', ty_fun', optional))))","arity":1},
  {"type":"construct","text":"Error ((sarg.pexp_loc), env, (Apply_wrong_label (l', ty_fun', optional)))","arity":3},
  {"type":"construct","text":"Apply_wrong_label (l', ty_fun', optional)","arity":3},
  {"type":"apply","text":"extract_label name sargs","arity":2},
  {"type":"pat_construct","text":"Some\n(l', sarg, commuted, remaining_sargs)","arity":1},
  {"type":"apply","text":"may_warn sarg.pexp_loc (Warnings.Not_principal \"commuting this argument\")","arity":2},
  {"type":"construct","text":"Warnings.Not_principal \"commuting this argument\"","arity":1},
  {"type":"apply","text":"(not optional) && (is_optional l')","arity":2},
  {"type":"apply","text":"not optional","arity":1},
  {"type":"apply","text":"is_optional l'","arity":1},
  {"type":"apply","text":"Location.prerr_warning sarg.pexp_loc\n  (Warnings.Nonoptional_label (Asttypes.string_of_label l))","arity":2},
  {"type":"construct","text":"Warnings.Nonoptional_label (Asttypes.string_of_label l)","arity":1},
  {"type":"apply","text":"Asttypes.string_of_label l","arity":1},
  {"type":"construct","text":"Some ((use_arg sarg l'), (Some (sarg.pexp_loc)))","arity":1},
  {"type":"apply","text":"use_arg sarg l'","arity":2},
  {"type":"construct","text":"Some (sarg.pexp_loc)","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"optional && (List.mem_assoc Nolabel sargs)","arity":2},
  {"type":"apply","text":"List.mem_assoc Nolabel sargs","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"Some ((eliminate_optional_arg ()), None)","arity":1},
  {"type":"apply","text":"eliminate_optional_arg ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"may_warn funct.exp_loc (Warnings.Non_principal_labels \"commuted an argument\")","arity":2},
  {"type":"construct","text":"Warnings.Non_principal_labels \"commuted an argument\"","arity":1},
  {"type":"apply","text":"omitted_parameters := ((l, ty, lv) :: (!omitted_parameters))","arity":2},
  {"type":"construct","text":"(l, ty, lv) :: (!omitted_parameters)","arity":2},
  {"type":"apply","text":"!omitted_parameters","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_args ((l, arg) :: args) ty_fun ty_fun0 remaining_sargs","arity":4},
  {"type":"construct","text":"(l, arg) :: args","arity":2},
  {"type":"apply","text":"type_unknown_args ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"(is_prim ~name:\"%ignore\" funct) &&\n  (try\n     ignore\n       (filter_arrow env (instance ?partial:None funct.exp_type) Nolabel);\n     true\n   with | Filter_arrow_failed _ -> false)","arity":2},
  {"type":"apply","text":"is_prim ~name:\"%ignore\" funct","arity":2},
  {"type":"apply","text":"ignore (filter_arrow env (instance ?partial:None funct.exp_type) Nolabel)","arity":1},
  {"type":"apply","text":"filter_arrow env (instance ?partial:None funct.exp_type) Nolabel","arity":3},
  {"type":"apply","text":"instance ?partial:None funct.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Filter_arrow_failed\n_","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"with_local_level ?post:None\n  (fun () ->\n     match sargs with\n     | (Nolabel, sarg)::[] when is_ignore funct ->\n         let (ty_arg, ty_res) =\n           filter_arrow env (instance ?partial:None funct.exp_type) Nolabel in\n         let exp =\n           type_expect ?recarg:None env sarg\n             (mk_expected ?explanation:None ty_arg) in\n         (check_partial_application ~statement:false exp;\n          ([(Nolabel, (Some exp))], ty_res))\n     | _ ->\n         let ty = funct.exp_type in\n         type_args [] ty (instance ?partial:None ty) sargs)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"pat_construct","text":"(Nolabel, sarg)::[]","arity":2},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"is_ignore funct","arity":1},
  {"type":"apply","text":"filter_arrow env (instance ?partial:None funct.exp_type) Nolabel","arity":3},
  {"type":"apply","text":"instance ?partial:None funct.exp_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env sarg (mk_expected ?explanation:None ty_arg)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"check_partial_application ~statement:false exp","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"[(Nolabel, (Some exp))]","arity":2},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"Some exp","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"type_args [] ty (instance ?partial:None ty) sargs","arity":4},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"instance ?partial:None ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"extract_concrete_variant env ty_expected","arity":2},
  {"type":"pat_construct","text":"Variant_type\n(p0, p, _)","arity":3},
  {"type":"construct","text":"Some (p0, p, (is_principal ty_expected))","arity":1},
  {"type":"apply","text":"is_principal ty_expected","arity":1},
  {"type":"pat_construct","text":"Maybe_a_variant_type","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_a_variant_type","arity":0},
  {"type":"apply","text":"wrong_kind_sort_of_constructor lid.txt","arity":1},
  {"type":"construct","text":"Expression explanation","arity":1},
  {"type":"construct","text":"Wrong_expected_kind (srt, ctx, ty_expected)","arity":3},
  {"type":"apply","text":"raise (Error (loc, env, error))","arity":1},
  {"type":"construct","text":"Error (loc, env, error)","arity":3},
  {"type":"apply","text":"Env.lookup_all_constructors ?use:None ~loc:(lid.loc) Env.Positive lid.txt env","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Env.Positive","arity":0},
  {"type":"apply","text":"wrap_disambiguate \"This variant expression is expected to have\"\n  ty_expected_explained\n  (Constructor.disambiguate ?warn:None ?filter:None Env.Positive lid env\n     expected_type) constrs","arity":4},
  {"type":"apply","text":"Constructor.disambiguate ?warn:None ?filter:None Env.Positive lid env\n  expected_type","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Env.Positive","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\n{ pexp_desc = Pexp_tuple sel }","arity":1},
  {"type":"pat_construct","text":"Pexp_tuple\nsel","arity":1},
  {"type":"apply","text":"(constr.cstr_arity > 1) || (Builtin_attributes.explicit_arity attrs)","arity":2},
  {"type":"apply","text":"constr.cstr_arity > 1","arity":2},
  {"type":"apply","text":"Builtin_attributes.explicit_arity attrs","arity":1},
  {"type":"pat_construct","text":"Some\nse","arity":1},
  {"type":"construct","text":"[se]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"(List.length sargs) <> constr.cstr_arity","arity":2},
  {"type":"apply","text":"List.length sargs","arity":1},
  {"type":"apply","text":"raise\n  (Error\n     (loc, env,\n       (Constructor_arity_mismatch\n          ((lid.txt), (constr.cstr_arity), (List.length sargs)))))","arity":1},
  {"type":"construct","text":"Error\n  (loc, env,\n    (Constructor_arity_mismatch\n       ((lid.txt), (constr.cstr_arity), (List.length sargs))))","arity":3},
  {"type":"construct","text":"Constructor_arity_mismatch\n  ((lid.txt), (constr.cstr_arity), (List.length sargs))","arity":3},
  {"type":"apply","text":"List.length sargs","arity":1},
  {"type":"apply","text":"(!Clflags.principal) || (Env.has_local_constraints env)","arity":2},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"Env.has_local_constraints env","arity":1},
  {"type":"apply","text":"with_local_level_iter_if separate\n  (fun () ->\n     let (ty_args, ty_res, texp) =\n       with_local_level_if separate\n         (fun () ->\n            let (ty_args, ty_res, _) =\n              instance_constructor Keep_existentials_flexible constr in\n            let texp =\n              re\n                {\n                  exp_attributes = attrs;\n                  exp_env = env;\n                  exp_type = ty_res;\n                  exp_extra = [];\n                  exp_loc = loc;\n                  exp_desc = (Texp_construct (lid, constr, []))\n                } in\n            (ty_args, ty_res, texp))\n         ~post:(fun (_, ty_res, texp) ->\n                  generalize_structure ty_res;\n                  with_explanation explanation\n                    (fun () ->\n                       unify_exp ?sdesc_for_hint:None env\n                         {\n                           texp with\n                           exp_type = (instance ?partial:None ty_res)\n                         } (instance ?partial:None ty_expected))) in\n     ((ty_args, ty_res, texp), (ty_res :: ty_args)))\n  ~post:generalize_structure","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_if separate\n  (fun () ->\n     let (ty_args, ty_res, _) =\n       instance_constructor Keep_existentials_flexible constr in\n     let texp =\n       re\n         {\n           exp_attributes = attrs;\n           exp_env = env;\n           exp_type = ty_res;\n           exp_extra = [];\n           exp_loc = loc;\n           exp_desc = (Texp_construct (lid, constr, []))\n         } in\n     (ty_args, ty_res, texp))\n  ~post:(fun (_, ty_res, texp) ->\n           generalize_structure ty_res;\n           with_explanation explanation\n             (fun () ->\n                unify_exp ?sdesc_for_hint:None env\n                  { texp with exp_type = (instance ?partial:None ty_res) }\n                  (instance ?partial:None ty_expected)))","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_constructor Keep_existentials_flexible constr","arity":2},
  {"type":"construct","text":"Keep_existentials_flexible","arity":0},
  {"type":"apply","text":"re\n  {\n    exp_attributes = attrs;\n    exp_env = env;\n    exp_type = ty_res;\n    exp_extra = [];\n    exp_loc = loc;\n    exp_desc = (Texp_construct (lid, constr, []))\n  }","arity":1},
  {"type":"construct","text":"Texp_construct (lid, constr, [])","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"generalize_structure ty_res","arity":1},
  {"type":"apply","text":"with_explanation explanation\n  (fun () ->\n     unify_exp ?sdesc_for_hint:None env\n       { texp with exp_type = (instance ?partial:None ty_res) }\n       (instance ?partial:None ty_expected))","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env\n  { texp with exp_type = (instance ?partial:None ty_res) }\n  (instance ?partial:None ty_expected)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_res","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"ty_res :: ty_args","arity":2},
  {"type":"apply","text":"instance_list (ty_res :: ty_args)","arity":1},
  {"type":"construct","text":"ty_res :: ty_args","arity":2},
  {"type":"pat_construct","text":"t::tl","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"not separate","arity":1},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env texp (instance ?partial:None ty_expected)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"Rejected","arity":0},
  {"type":"pat_construct","text":"Some\n_","arity":1},
  {"type":"pat_construct","text":"{\n  pexp_desc =\n    (Pexp_ident _ | Pexp_record\n     (_, (Some { pexp_desc = Pexp_ident _ } | None)))\n  }::[]","arity":2},
  {"type":"pat_construct","text":"Pexp_ident\n_","arity":1},
  {"type":"pat_construct","text":"Pexp_record\n(_, (Some { pexp_desc = Pexp_ident _ } | None))","arity":2},
  {"type":"pat_construct","text":"Some\n{ pexp_desc = Pexp_ident _ }","arity":1},
  {"type":"pat_construct","text":"Pexp_ident\n_","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"Required","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, Inlined_record_expected))","arity":1},
  {"type":"construct","text":"Error (loc, env, Inlined_record_expected)","arity":3},
  {"type":"construct","text":"Inlined_record_expected","arity":0},
  {"type":"apply","text":"List.map2\n  (fun e (t, t0) ->\n     type_argument ?explanation:None ?recarg:(Some recarg) env e t t0) sargs\n  (List.combine ty_args ty_args0)","arity":3},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:(Some recarg) env e t t0","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some recarg","arity":1},
  {"type":"apply","text":"List.combine ty_args ty_args0","arity":2},
  {"type":"apply","text":"constr.cstr_private = Private","arity":2},
  {"type":"construct","text":"Private","arity":0},
  {"type":"pat_construct","text":"Cstr_extension\n(_, _)","arity":2},
  {"type":"apply","text":"raise (Error (loc, env, (Private_constructor (constr, ty_res))))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Private_constructor (constr, ty_res)))","arity":3},
  {"type":"construct","text":"Private_constructor (constr, ty_res)","arity":2},
  {"type":"pat_construct","text":"Cstr_constant\n_","arity":1},
  {"type":"pat_construct","text":"Cstr_block\n_","arity":1},
  {"type":"pat_construct","text":"Cstr_unboxed","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, (Private_type ty_res)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Private_type ty_res))","arity":3},
  {"type":"construct","text":"Private_type ty_res","arity":1},
  {"type":"construct","text":"Texp_construct (lid, constr, args)","arity":3},
  {"type":"pat_construct","text":"Texp_while\n(_, _)","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"with_local_level ?post:None (fun () -> type_exp ?recarg:None env sexp)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env sexp","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"final_subexpression exp","arity":1},
  {"type":"apply","text":"expand_head env exp.exp_type","arity":2},
  {"type":"apply","text":"(is_Tvar ty) &&\n  (((get_level ty) > (get_current_level ())) &&\n     (not (allow_polymorphic subexp)))","arity":2},
  {"type":"apply","text":"is_Tvar ty","arity":1},
  {"type":"apply","text":"((get_level ty) > (get_current_level ())) && (not (allow_polymorphic subexp))","arity":2},
  {"type":"apply","text":"(get_level ty) > (get_current_level ())","arity":2},
  {"type":"apply","text":"get_level ty","arity":1},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"not (allow_polymorphic subexp)","arity":1},
  {"type":"apply","text":"allow_polymorphic subexp","arity":1},
  {"type":"apply","text":"Location.prerr_warning subexp.exp_loc Warnings.Nonreturning_statement","arity":2},
  {"type":"construct","text":"Warnings.Nonreturning_statement","arity":0},
  {"type":"apply","text":"!Clflags.strict_sequence","arity":1},
  {"type":"apply","text":"instance ?partial:None Predef.type_unit","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"with_explanation explanation\n  (fun () -> unify_exp ?sdesc_for_hint:None env exp expected_ty)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unify_exp ?sdesc_for_hint:None env exp expected_ty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"check_partial_application ~statement:true exp","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"enforce_current_level env ty","arity":2},
  {"type":"apply","text":"List.map (fun ((x : untyped_case), _) -> x.pattern) caselist","arity":2},
  {"type":"apply","text":"List.exists contains_polymorphic_variant patterns","arity":2},
  {"type":"apply","text":"contains_polyvars && (contains_variant_either ty_arg)","arity":2},
  {"type":"apply","text":"contains_variant_either ty_arg","arity":1},
  {"type":"apply","text":"List.exists may_contain_gadts patterns","arity":2},
  {"type":"apply","text":"List.exists may_contain_modules patterns","arity":2},
  {"type":"apply","text":"may_contain_gadts || may_contain_modules","arity":2},
  {"type":"apply","text":"(may_contain_gadts || erase_either) && (not (!Clflags.principal))","arity":2},
  {"type":"apply","text":"may_contain_gadts || erase_either","arity":2},
  {"type":"apply","text":"not (!Clflags.principal)","arity":1},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"correct_levels ty_arg","arity":1},
  {"type":"pat_construct","text":"Ppat_any","arity":0},
  {"type":"pat_construct","text":"Ppat_var\n_","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"Ppat_alias\n(spat, _)","arity":2},
  {"type":"apply","text":"is_var spat","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"({ needs_refute = true }, _)::[]","arity":2},
  {"type":"pat_construct","text":"true","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"({ pattern }, _)::[]","arity":2},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"is_var pattern","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_iter_if create_inner_level\n  (fun () ->\n     let lev = get_current_level () in\n     let allow_modules =\n       if may_contain_modules\n       then Modules_allowed { scope = lev }\n       else Modules_rejected in\n     let take_partial_instance = if erase_either then Some false else None in\n     let map_conts f conts caselist =\n       match conts with\n       | None -> List.map (fun c -> f c None) caselist\n       | Some conts -> List.map2 f caselist conts in\n     let (half_typed_cases, ty_res, do_copy_types, ty_arg') =\n       with_local_level\n         ?post:(Some\n                  (fun (half_typed_cases, _, _, ty_arg') ->\n                     generalize ty_arg';\n                     List.iter\n                       (fun { pat_vars;_} ->\n                          iter_pattern_variables_type generalize pat_vars)\n                       half_typed_cases))\n         (fun () ->\n            let pattern_force = ref [] in\n            let half_typed_cases =\n              map_conts\n                (fun\n                   (({ Parmatch.pattern = pattern;_} as untyped_case),\n                    case_data)\n                   cont ->\n                   let htc =\n                     with_local_level_if_principal\n                       (fun () ->\n                          let ty_arg =\n                            with_local_level\n                              ?post:(Some generalize_structure)\n                              (fun () ->\n                                 instance ?partial:take_partial_instance\n                                   ty_arg) in\n                          let (pat, ext_env, force, pvs, mvs) =\n                            type_pattern category ~lev env pattern ty_arg\n                              ?cont allow_modules in\n                          pattern_force := (force @ (!pattern_force));\n                          {\n                            contains_gadt =\n                              (contains_gadt (as_comp_pattern category pat));\n                            module_vars = mvs;\n                            pat_vars = pvs;\n                            branch_env = ext_env;\n                            case_data;\n                            untyped_case;\n                            pat_type_for_unif = ty_arg;\n                            typed_pat = pat\n                          })\n                       ~post:(fun htc ->\n                                iter_pattern_variables_type\n                                  generalize_structure htc.pat_vars) in\n                   check_scope_escape (htc.typed_pat).pat_loc env outer_level\n                     htc.pat_type_for_unif;\n                   (let pat = htc.typed_pat in\n                    {\n                      htc with\n                      typed_pat =\n                        {\n                          pat with\n                          pat_type = (instance ?partial:None pat.pat_type)\n                        }\n                    })) conts caselist in\n            let patl =\n              List.map (fun { typed_pat;_} -> typed_pat) half_typed_cases in\n            let does_contain_gadt =\n              List.exists (fun { contains_gadt;_} -> contains_gadt)\n                half_typed_cases in\n            let (ty_res, do_copy_types) =\n              if does_contain_gadt && (not (!Clflags.principal))\n              then ((correct_levels ty_res), (Env.make_copy_of_types env))\n              else (ty_res, ((fun env -> env))) in\n            let ty_arg' = newvar ?name:None () in\n            let unify_pats ty =\n              List.iter\n                (fun { typed_pat = pat; pat_type_for_unif = pat_ty;_} ->\n                   unify_pat_types pat.pat_loc env pat_ty ty)\n                half_typed_cases in\n            unify_pats ty_arg';\n            if List.exists has_variants patl\n            then\n              (Parmatch.pressure_variants_in_computation_pattern env\n                 (List.map (as_comp_pattern category) patl);\n               List.iter finalize_variants patl);\n            List.iter (fun f -> f ()) (!pattern_force);\n            if take_partial_instance <> None\n            then unify_pats (instance ?partial:None ty_arg);\n            List.iter\n              (fun { pat_vars;_} ->\n                 iter_pattern_variables_type (enforce_current_level env)\n                   pat_vars) half_typed_cases;\n            (half_typed_cases, ty_res, do_copy_types, ty_arg')) in\n     let ty_res' = instance ?partial:None ty_res in\n     let result =\n       with_local_level_if_principal\n         (fun () ->\n            map_conts\n              (fun\n                 { typed_pat = pat; case_data; branch_env = ext_env;\n                   pat_vars = pvs; module_vars = mvs; contains_gadt;_}\n                 cont ->\n                 let ext_env =\n                   if contains_gadt then do_copy_types ext_env else ext_env in\n                 let (cont_vars, pvs) =\n                   List.partition (fun pv -> pv.pv_kind = Continuation_var)\n                     pvs in\n                 let add_pattern_vars =\n                   add_pattern_variables\n                     ?check:(Some (fun s -> Warnings.Unused_var_strict s))\n                     ?check_as:(Some (fun s -> Warnings.Unused_var s)) in\n                 let when_env = add_pattern_vars ext_env pvs in\n                 let when_env = add_module_variables when_env mvs in\n                 let ext_env = add_pattern_vars when_env cont_vars in\n                 let ty_expected =\n                   if contains_gadt && (not (!Clflags.principal))\n                   then correct_levels ty_res\n                   else ty_res in\n                 type_body case_data pat ~when_env ~ext_env ~cont\n                   ~ty_expected ~ty_infer:ty_res' ~contains_gadt) conts\n              half_typed_cases) ~post:ignore in\n     let do_init = may_contain_gadts || needs_exhaust_check in\n     let ty_arg_check =\n       if do_init\n       then Subst.type_expr (Subst.for_saving Subst.identity) ty_arg'\n       else ty_arg' in\n     let (val_cases_with_result, exn_cases_with_result) =\n       match category with\n       | Value ->\n           let val_cases =\n             List.map2\n               (fun htc res ->\n                  ({ (htc.untyped_case) with pattern = (htc.typed_pat) },\n                    res)) half_typed_cases result in\n           ((val_cases : (pattern Parmatch.parmatch_case * ret) list), [])\n       | Computation ->\n           split_half_typed_cases env (List.combine half_typed_cases result) in\n     let val_cases = List.map fst val_cases_with_result in\n     let exn_cases = List.map fst exn_cases_with_result in\n     if (val_cases = []) && (exn_cases <> [])\n     then raise (Error (loc, env, No_value_clauses));\n     (let partial =\n        if check_if_total\n        then check_partial ?lev:(Some lev) env ty_arg_check loc val_cases\n        else Partial in\n      let unused_check delayed =\n        List.iter\n          (fun { typed_pat; branch_env;_} ->\n             check_absent_variant branch_env\n               (as_comp_pattern category typed_pat)) half_typed_cases;\n        with_level_if delayed ~level:lev\n          (fun () ->\n             check_unused ?lev:(Some lev) env ty_arg_check val_cases;\n             check_unused ?lev:(Some lev) env Predef.type_exn exn_cases) in\n      if contains_polyvars\n      then add_delayed_check (fun () -> unused_check true)\n      else unused_check false;\n      (match additional_checks_for_split_cases with\n       | None -> ()\n       | Some check ->\n           (check val_cases_with_result; check exn_cases_with_result));\n      ((result, partial), [ty_res'])))\n  ~post:(fun ty_res' ->\n           unify_exp_types loc env ty_res' (newvar ?name:None ()))","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"get_current_level ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"construct","text":"Modules_allowed { scope = lev }","arity":1},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"List.map (fun c -> f c None) caselist","arity":2},
  {"type":"apply","text":"f c None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nconts","arity":1},
  {"type":"apply","text":"List.map2 f caselist conts","arity":3},
  {"type":"apply","text":"with_local_level\n  ?post:(Some\n           (fun (half_typed_cases, _, _, ty_arg') ->\n              generalize ty_arg';\n              List.iter\n                (fun { pat_vars;_} ->\n                   iter_pattern_variables_type generalize pat_vars)\n                half_typed_cases))\n  (fun () ->\n     let pattern_force = ref [] in\n     let half_typed_cases =\n       map_conts\n         (fun (({ Parmatch.pattern = pattern;_} as untyped_case), case_data)\n            cont ->\n            let htc =\n              with_local_level_if_principal\n                (fun () ->\n                   let ty_arg =\n                     with_local_level ?post:(Some generalize_structure)\n                       (fun () ->\n                          instance ?partial:take_partial_instance ty_arg) in\n                   let (pat, ext_env, force, pvs, mvs) =\n                     type_pattern category ~lev env pattern ty_arg ?cont\n                       allow_modules in\n                   pattern_force := (force @ (!pattern_force));\n                   {\n                     contains_gadt =\n                       (contains_gadt (as_comp_pattern category pat));\n                     module_vars = mvs;\n                     pat_vars = pvs;\n                     branch_env = ext_env;\n                     case_data;\n                     untyped_case;\n                     pat_type_for_unif = ty_arg;\n                     typed_pat = pat\n                   })\n                ~post:(fun htc ->\n                         iter_pattern_variables_type generalize_structure\n                           htc.pat_vars) in\n            check_scope_escape (htc.typed_pat).pat_loc env outer_level\n              htc.pat_type_for_unif;\n            (let pat = htc.typed_pat in\n             {\n               htc with\n               typed_pat =\n                 { pat with pat_type = (instance ?partial:None pat.pat_type)\n                 }\n             })) conts caselist in\n     let patl = List.map (fun { typed_pat;_} -> typed_pat) half_typed_cases in\n     let does_contain_gadt =\n       List.exists (fun { contains_gadt;_} -> contains_gadt) half_typed_cases in\n     let (ty_res, do_copy_types) =\n       if does_contain_gadt && (not (!Clflags.principal))\n       then ((correct_levels ty_res), (Env.make_copy_of_types env))\n       else (ty_res, ((fun env -> env))) in\n     let ty_arg' = newvar ?name:None () in\n     let unify_pats ty =\n       List.iter\n         (fun { typed_pat = pat; pat_type_for_unif = pat_ty;_} ->\n            unify_pat_types pat.pat_loc env pat_ty ty) half_typed_cases in\n     unify_pats ty_arg';\n     if List.exists has_variants patl\n     then\n       (Parmatch.pressure_variants_in_computation_pattern env\n          (List.map (as_comp_pattern category) patl);\n        List.iter finalize_variants patl);\n     List.iter (fun f -> f ()) (!pattern_force);\n     if take_partial_instance <> None\n     then unify_pats (instance ?partial:None ty_arg);\n     List.iter\n       (fun { pat_vars;_} ->\n          iter_pattern_variables_type (enforce_current_level env) pat_vars)\n       half_typed_cases;\n     (half_typed_cases, ty_res, do_copy_types, ty_arg'))","arity":2},
  {"type":"construct","text":"Some\n  (fun (half_typed_cases, _, _, ty_arg') ->\n     generalize ty_arg';\n     List.iter\n       (fun { pat_vars;_} -> iter_pattern_variables_type generalize pat_vars)\n       half_typed_cases)","arity":1},
  {"type":"apply","text":"generalize ty_arg'","arity":1},
  {"type":"apply","text":"List.iter\n  (fun { pat_vars;_} -> iter_pattern_variables_type generalize pat_vars)\n  half_typed_cases","arity":2},
  {"type":"apply","text":"iter_pattern_variables_type generalize pat_vars","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"map_conts\n  (fun (({ Parmatch.pattern = pattern;_} as untyped_case), case_data) cont ->\n     let htc =\n       with_local_level_if_principal\n         (fun () ->\n            let ty_arg =\n              with_local_level ?post:(Some generalize_structure)\n                (fun () -> instance ?partial:take_partial_instance ty_arg) in\n            let (pat, ext_env, force, pvs, mvs) =\n              type_pattern category ~lev env pattern ty_arg ?cont\n                allow_modules in\n            pattern_force := (force @ (!pattern_force));\n            {\n              contains_gadt = (contains_gadt (as_comp_pattern category pat));\n              module_vars = mvs;\n              pat_vars = pvs;\n              branch_env = ext_env;\n              case_data;\n              untyped_case;\n              pat_type_for_unif = ty_arg;\n              typed_pat = pat\n            })\n         ~post:(fun htc ->\n                  iter_pattern_variables_type generalize_structure\n                    htc.pat_vars) in\n     check_scope_escape (htc.typed_pat).pat_loc env outer_level\n       htc.pat_type_for_unif;\n     (let pat = htc.typed_pat in\n      {\n        htc with\n        typed_pat =\n          { pat with pat_type = (instance ?partial:None pat.pat_type) }\n      })) conts caselist","arity":3},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () ->\n     let ty_arg =\n       with_local_level ?post:(Some generalize_structure)\n         (fun () -> instance ?partial:take_partial_instance ty_arg) in\n     let (pat, ext_env, force, pvs, mvs) =\n       type_pattern category ~lev env pattern ty_arg ?cont allow_modules in\n     pattern_force := (force @ (!pattern_force));\n     {\n       contains_gadt = (contains_gadt (as_comp_pattern category pat));\n       module_vars = mvs;\n       pat_vars = pvs;\n       branch_env = ext_env;\n       case_data;\n       untyped_case;\n       pat_type_for_unif = ty_arg;\n       typed_pat = pat\n     })\n  ~post:(fun htc ->\n           iter_pattern_variables_type generalize_structure htc.pat_vars)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level ?post:(Some generalize_structure)\n  (fun () -> instance ?partial:take_partial_instance ty_arg)","arity":2},
  {"type":"construct","text":"Some generalize_structure","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance ?partial:take_partial_instance ty_arg","arity":2},
  {"type":"apply","text":"type_pattern category ~lev env pattern ty_arg ?cont allow_modules","arity":7},
  {"type":"apply","text":"pattern_force := (force @ (!pattern_force))","arity":2},
  {"type":"apply","text":"force @ (!pattern_force)","arity":2},
  {"type":"apply","text":"!pattern_force","arity":1},
  {"type":"apply","text":"contains_gadt (as_comp_pattern category pat)","arity":1},
  {"type":"apply","text":"as_comp_pattern category pat","arity":2},
  {"type":"apply","text":"iter_pattern_variables_type generalize_structure htc.pat_vars","arity":2},
  {"type":"apply","text":"check_scope_escape (htc.typed_pat).pat_loc env outer_level\n  htc.pat_type_for_unif","arity":4},
  {"type":"apply","text":"instance ?partial:None pat.pat_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.map (fun { typed_pat;_} -> typed_pat) half_typed_cases","arity":2},
  {"type":"apply","text":"List.exists (fun { contains_gadt;_} -> contains_gadt) half_typed_cases","arity":2},
  {"type":"apply","text":"does_contain_gadt && (not (!Clflags.principal))","arity":2},
  {"type":"apply","text":"not (!Clflags.principal)","arity":1},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"correct_levels ty_res","arity":1},
  {"type":"apply","text":"Env.make_copy_of_types env","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.iter\n  (fun { typed_pat = pat; pat_type_for_unif = pat_ty;_} ->\n     unify_pat_types pat.pat_loc env pat_ty ty) half_typed_cases","arity":2},
  {"type":"apply","text":"unify_pat_types pat.pat_loc env pat_ty ty","arity":4},
  {"type":"apply","text":"unify_pats ty_arg'","arity":1},
  {"type":"apply","text":"List.exists has_variants patl","arity":2},
  {"type":"apply","text":"Parmatch.pressure_variants_in_computation_pattern env\n  (List.map (as_comp_pattern category) patl)","arity":2},
  {"type":"apply","text":"List.map (as_comp_pattern category) patl","arity":2},
  {"type":"apply","text":"as_comp_pattern category","arity":1},
  {"type":"apply","text":"List.iter finalize_variants patl","arity":2},
  {"type":"apply","text":"List.iter (fun f -> f ()) (!pattern_force)","arity":2},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"!pattern_force","arity":1},
  {"type":"apply","text":"take_partial_instance <> None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify_pats (instance ?partial:None ty_arg)","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.iter\n  (fun { pat_vars;_} ->\n     iter_pattern_variables_type (enforce_current_level env) pat_vars)\n  half_typed_cases","arity":2},
  {"type":"apply","text":"iter_pattern_variables_type (enforce_current_level env) pat_vars","arity":2},
  {"type":"apply","text":"enforce_current_level env","arity":1},
  {"type":"apply","text":"instance ?partial:None ty_res","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () ->\n     map_conts\n       (fun\n          { typed_pat = pat; case_data; branch_env = ext_env; pat_vars = pvs;\n            module_vars = mvs; contains_gadt;_}\n          cont ->\n          let ext_env =\n            if contains_gadt then do_copy_types ext_env else ext_env in\n          let (cont_vars, pvs) =\n            List.partition (fun pv -> pv.pv_kind = Continuation_var) pvs in\n          let add_pattern_vars =\n            add_pattern_variables\n              ?check:(Some (fun s -> Warnings.Unused_var_strict s))\n              ?check_as:(Some (fun s -> Warnings.Unused_var s)) in\n          let when_env = add_pattern_vars ext_env pvs in\n          let when_env = add_module_variables when_env mvs in\n          let ext_env = add_pattern_vars when_env cont_vars in\n          let ty_expected =\n            if contains_gadt && (not (!Clflags.principal))\n            then correct_levels ty_res\n            else ty_res in\n          type_body case_data pat ~when_env ~ext_env ~cont ~ty_expected\n            ~ty_infer:ty_res' ~contains_gadt) conts half_typed_cases)\n  ~post:ignore","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"map_conts\n  (fun\n     { typed_pat = pat; case_data; branch_env = ext_env; pat_vars = pvs;\n       module_vars = mvs; contains_gadt;_}\n     cont ->\n     let ext_env = if contains_gadt then do_copy_types ext_env else ext_env in\n     let (cont_vars, pvs) =\n       List.partition (fun pv -> pv.pv_kind = Continuation_var) pvs in\n     let add_pattern_vars =\n       add_pattern_variables\n         ?check:(Some (fun s -> Warnings.Unused_var_strict s))\n         ?check_as:(Some (fun s -> Warnings.Unused_var s)) in\n     let when_env = add_pattern_vars ext_env pvs in\n     let when_env = add_module_variables when_env mvs in\n     let ext_env = add_pattern_vars when_env cont_vars in\n     let ty_expected =\n       if contains_gadt && (not (!Clflags.principal))\n       then correct_levels ty_res\n       else ty_res in\n     type_body case_data pat ~when_env ~ext_env ~cont ~ty_expected\n       ~ty_infer:ty_res' ~contains_gadt) conts half_typed_cases","arity":3},
  {"type":"apply","text":"do_copy_types ext_env","arity":1},
  {"type":"apply","text":"List.partition (fun pv -> pv.pv_kind = Continuation_var) pvs","arity":2},
  {"type":"apply","text":"pv.pv_kind = Continuation_var","arity":2},
  {"type":"construct","text":"Continuation_var","arity":0},
  {"type":"apply","text":"add_pattern_variables ?check:(Some (fun s -> Warnings.Unused_var_strict s))\n  ?check_as:(Some (fun s -> Warnings.Unused_var s))","arity":2},
  {"type":"construct","text":"Some (fun s -> Warnings.Unused_var_strict s)","arity":1},
  {"type":"construct","text":"Warnings.Unused_var_strict s","arity":1},
  {"type":"construct","text":"Some (fun s -> Warnings.Unused_var s)","arity":1},
  {"type":"construct","text":"Warnings.Unused_var s","arity":1},
  {"type":"apply","text":"add_pattern_vars ext_env pvs","arity":2},
  {"type":"apply","text":"add_module_variables when_env mvs","arity":2},
  {"type":"apply","text":"add_pattern_vars when_env cont_vars","arity":2},
  {"type":"apply","text":"contains_gadt && (not (!Clflags.principal))","arity":2},
  {"type":"apply","text":"not (!Clflags.principal)","arity":1},
  {"type":"apply","text":"!Clflags.principal","arity":1},
  {"type":"apply","text":"correct_levels ty_res","arity":1},
  {"type":"apply","text":"type_body case_data pat ~when_env ~ext_env ~cont ~ty_expected\n  ~ty_infer:ty_res' ~contains_gadt","arity":8},
  {"type":"apply","text":"may_contain_gadts || needs_exhaust_check","arity":2},
  {"type":"apply","text":"Subst.type_expr (Subst.for_saving Subst.identity) ty_arg'","arity":2},
  {"type":"apply","text":"Subst.for_saving Subst.identity","arity":1},
  {"type":"pat_construct","text":"Value","arity":0},
  {"type":"apply","text":"List.map2\n  (fun htc res ->\n     ({ (htc.untyped_case) with pattern = (htc.typed_pat) }, res))\n  half_typed_cases result","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Computation","arity":0},
  {"type":"apply","text":"split_half_typed_cases env (List.combine half_typed_cases result)","arity":2},
  {"type":"apply","text":"List.combine half_typed_cases result","arity":2},
  {"type":"apply","text":"List.map fst val_cases_with_result","arity":2},
  {"type":"apply","text":"List.map fst exn_cases_with_result","arity":2},
  {"type":"apply","text":"(val_cases = []) && (exn_cases <> [])","arity":2},
  {"type":"apply","text":"val_cases = []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"exn_cases <> []","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise (Error (loc, env, No_value_clauses))","arity":1},
  {"type":"construct","text":"Error (loc, env, No_value_clauses)","arity":3},
  {"type":"construct","text":"No_value_clauses","arity":0},
  {"type":"apply","text":"check_partial ?lev:(Some lev) env ty_arg_check loc val_cases","arity":5},
  {"type":"construct","text":"Some lev","arity":1},
  {"type":"construct","text":"Partial","arity":0},
  {"type":"apply","text":"List.iter\n  (fun { typed_pat; branch_env;_} ->\n     check_absent_variant branch_env (as_comp_pattern category typed_pat))\n  half_typed_cases","arity":2},
  {"type":"apply","text":"check_absent_variant branch_env (as_comp_pattern category typed_pat)","arity":2},
  {"type":"apply","text":"as_comp_pattern category typed_pat","arity":2},
  {"type":"apply","text":"with_level_if delayed ~level:lev\n  (fun () ->\n     check_unused ?lev:(Some lev) env ty_arg_check val_cases;\n     check_unused ?lev:(Some lev) env Predef.type_exn exn_cases)","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"check_unused ?lev:(Some lev) env ty_arg_check val_cases","arity":4},
  {"type":"construct","text":"Some lev","arity":1},
  {"type":"apply","text":"check_unused ?lev:(Some lev) env Predef.type_exn exn_cases","arity":4},
  {"type":"construct","text":"Some lev","arity":1},
  {"type":"apply","text":"add_delayed_check (fun () -> unused_check true)","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"unused_check true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"unused_check false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\ncheck","arity":1},
  {"type":"apply","text":"check val_cases_with_result","arity":1},
  {"type":"apply","text":"check exn_cases_with_result","arity":1},
  {"type":"construct","text":"[ty_res']","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"unify_exp_types loc env ty_res' (newvar ?name:None ())","arity":4},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"List.map (fun case -> ((Parmatch.untyped_case case), case)) caselist","arity":2},
  {"type":"apply","text":"Parmatch.untyped_case case","arity":1},
  {"type":"apply","text":"map_half_typed_cases\n  ?additional_checks_for_split_cases:(Some\n                                        (fun cases ->\n                                           let cases =\n                                             List.map\n                                               (fun (case_with_pat, case) ->\n                                                  {\n                                                    case with\n                                                    c_lhs =\n                                                      (case_with_pat.Parmatch.pattern)\n                                                  }) cases in\n                                           Parmatch.check_ambiguous_bindings\n                                             cases)) ?conts category env\n  ty_arg ty_res loc caselist\n  ~type_body:(fun { pc_guard; pc_rhs } pat ~when_env ~ext_env ~cont\n                ~ty_expected ~ty_infer ~contains_gadt:_ ->\n                let cont = Option.map (fun (id, _) -> id) cont in\n                let guard =\n                  match pc_guard with\n                  | None -> None\n                  | Some scond ->\n                      Some\n                        (type_expect ?recarg:None when_env scond\n                           (mk_expected ?explanation:(Some When_guard)\n                              Predef.type_bool)) in\n                let exp =\n                  type_expect ?recarg:None ext_env pc_rhs\n                    (mk_expected ?explanation ty_expected) in\n                {\n                  c_rhs = { exp with exp_type = ty_infer };\n                  c_guard = guard;\n                  c_cont = cont;\n                  c_lhs = pat\n                }) ~check_if_total","arity":10},
  {"type":"construct","text":"Some\n  (fun cases ->\n     let cases =\n       List.map\n         (fun (case_with_pat, case) ->\n            { case with c_lhs = (case_with_pat.Parmatch.pattern) }) cases in\n     Parmatch.check_ambiguous_bindings cases)","arity":1},
  {"type":"apply","text":"List.map\n  (fun (case_with_pat, case) ->\n     { case with c_lhs = (case_with_pat.Parmatch.pattern) }) cases","arity":2},
  {"type":"apply","text":"Parmatch.check_ambiguous_bindings cases","arity":1},
  {"type":"apply","text":"Option.map (fun (id, _) -> id) cont","arity":2},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\nscond","arity":1},
  {"type":"construct","text":"Some\n  (type_expect ?recarg:None when_env scond\n     (mk_expected ?explanation:(Some When_guard) Predef.type_bool))","arity":1},
  {"type":"apply","text":"type_expect ?recarg:None when_env scond\n  (mk_expected ?explanation:(Some When_guard) Predef.type_bool)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:(Some When_guard) Predef.type_bool","arity":2},
  {"type":"construct","text":"Some When_guard","arity":1},
  {"type":"construct","text":"When_guard","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None ext_env pc_rhs\n  (mk_expected ?explanation ty_expected)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation ty_expected","arity":2},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:None attrs\n  (fun () ->\n     let (ty_arg, ty_res) =\n       split_function_ty env ty_expected ~arg_label:Nolabel ~first\n         ~in_function in\n     let (cases, partial) =\n       type_cases Value env ty_arg (mk_expected ?explanation:None ty_res)\n         ?conts:None ~check_if_total:true loc cases in\n     let ty_fun =\n       instance ?partial:None\n         (newgenty (Tarrow (Nolabel, ty_arg, ty_res, commu_ok))) in\n     unify_exp_types loc env ty_fun (instance ?partial:None ty_expected);\n     (cases, partial, ty_fun))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"split_function_ty env ty_expected ~arg_label:Nolabel ~first ~in_function","arity":5},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"type_cases Value env ty_arg (mk_expected ?explanation:None ty_res)\n  ?conts:None ~check_if_total:true loc cases","arity":8},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_res","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"instance ?partial:None\n  (newgenty (Tarrow (Nolabel, ty_arg, ty_res, commu_ok)))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newgenty (Tarrow (Nolabel, ty_arg, ty_res, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, ty_arg, ty_res, commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"unify_exp_types loc env ty_fun (instance ?partial:None ty_expected)","arity":4},
  {"type":"apply","text":"instance ?partial:None ty_expected","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level ?post:None\n  (fun () ->\n     let (new_env, ty_arg, ty_cont) =\n       let decl =\n         Ctype.new_local_type ?loc:(Some loc) ?manifest_and_scope:None\n           Definition in\n       let scope = create_scope () in\n       let name = Ctype.get_new_abstract_name env \"%eff\" in\n       let id = Ident.create_scoped ~scope name in\n       let new_env = Env.add_type ~check:false ?shape:None id decl env in\n       let ty_eff = newgenty (Tconstr ((Path.Pident id), [], (ref Mnil))) in\n       (new_env, (Predef.type_eff ty_eff),\n         (Predef.type_continuation ty_eff ty_res)) in\n     let conts = List.map (type_continuation_pat env ty_cont) conts in\n     let (cases, _) =\n       type_cases category new_env ty_arg ty_res_explained\n         ?conts:(Some conts) ~check_if_total:false loc caselist in\n     cases)","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Ctype.new_local_type ?loc:(Some loc) ?manifest_and_scope:None Definition","arity":3},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Definition","arity":0},
  {"type":"apply","text":"create_scope ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Ctype.get_new_abstract_name env \"%eff\"","arity":2},
  {"type":"apply","text":"Ident.create_scoped ~scope name","arity":2},
  {"type":"apply","text":"Env.add_type ~check:false ?shape:None id decl env","arity":5},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newgenty (Tconstr ((Path.Pident id), [], (ref Mnil)))","arity":1},
  {"type":"construct","text":"Tconstr ((Path.Pident id), [], (ref Mnil))","arity":3},
  {"type":"construct","text":"Path.Pident id","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"ref Mnil","arity":1},
  {"type":"construct","text":"Mnil","arity":0},
  {"type":"apply","text":"Predef.type_eff ty_eff","arity":1},
  {"type":"apply","text":"Predef.type_continuation ty_eff ty_res","arity":2},
  {"type":"apply","text":"List.map (type_continuation_pat env ty_cont) conts","arity":2},
  {"type":"apply","text":"type_continuation_pat env ty_cont","arity":2},
  {"type":"apply","text":"type_cases category new_env ty_arg ty_res_explained ?conts:(Some conts)\n  ~check_if_total:false loc caselist","arity":8},
  {"type":"construct","text":"Some conts","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.map vb_pat_constraint spat_sexp_list","arity":2},
  {"type":"apply","text":"List.map fst spatl","arity":2},
  {"type":"apply","text":"rec_flag = Recursive","arity":2},
  {"type":"construct","text":"Recursive","arity":0},
  {"type":"apply","text":"with_local_level\n  ?post:(Some\n           (fun (pat_list, exp_list, _, _, pvs) ->\n              List.iter2\n                (fun pat (exp, _) ->\n                   if maybe_expansive exp\n                   then lower_contravariant env pat.pat_type) pat_list\n                exp_list;\n              iter_pattern_variables_type generalize pvs;\n              List.iter2\n                (fun pat (exp, vars) ->\n                   match vars with\n                   | None -> generalize exp.exp_type\n                   | Some vars ->\n                       (if maybe_expansive exp\n                        then lower_contravariant env exp.exp_type;\n                        generalize_and_check_univars env \"definition\" exp\n                          pat.pat_type vars)) pat_list exp_list))\n  (fun () ->\n     if existential_context = At_toplevel then Typetexp.TyVarEnv.reset ();\n     (let (pat_list, new_env, force, pvs, mvs) =\n        with_local_level_if_principal\n          (fun () ->\n             let nvs = List.map (fun _ -> newvar ?name:None ()) spatl in\n             let (pat_list, _new_env, _force, _pvs, _mvs) as res =\n               type_pattern_list Value existential_context env spatl nvs\n                 allow_modules in\n             if is_recursive\n             then\n               List.iter2\n                 (fun pat binding ->\n                    let pat =\n                      match get_desc pat.pat_type with\n                      | Tpoly (ty, tl) ->\n                          {\n                            pat with\n                            pat_type =\n                              (snd\n                                 (instance_poly ?keep_names:(Some true)\n                                    ~fixed:false tl ty))\n                          }\n                      | _ -> pat in\n                    let bound_expr = vb_exp_constraint binding in\n                    unify_pat ?sdesc_for_hint:None env pat\n                      (type_approx env bound_expr)) pat_list spat_sexp_list;\n             List.iter\n               (fun pat ->\n                  if has_variants pat\n                  then\n                    (Parmatch.pressure_variants env [pat];\n                     finalize_variants pat)) pat_list;\n             res)\n          ~post:(fun (pat_list, _, _, pvs, _) ->\n                   iter_pattern_variables_type generalize_structure pvs;\n                   List.iter (fun pat -> generalize_structure pat.pat_type)\n                     pat_list) in\n      let new_env =\n        add_pattern_variables ?check:None ?check_as:None new_env pvs in\n      let pat_list =\n        List.map\n          (fun pat ->\n             { pat with pat_type = (instance ?partial:None pat.pat_type) })\n          pat_list in\n      List.iter (fun f -> f ()) force;\n      (let exp_list =\n         let exp_env =\n           if is_recursive then add_module_variables new_env mvs else env in\n         type_let_def_wrap_warnings ?check ?check_strict ~is_recursive\n           ~exp_env ~new_env ~spat_sexp_list ~attrs_list ~pat_list ~pvs\n           (fun exp_env ({ pvb_attributes;_} as vb) pat ->\n              let sexp = vb_exp_constraint vb in\n              match get_desc pat.pat_type with\n              | Tpoly (ty, tl) ->\n                  let (vars, ty') =\n                    with_local_level_if_principal\n                      (fun () ->\n                         instance_poly ?keep_names:(Some true) ~fixed:true tl\n                           ty)\n                      ~post:(fun (_, ty') -> generalize_structure ty') in\n                  let exp =\n                    Builtin_attributes.warning_scope ?ppwarning:None\n                      pvb_attributes\n                      (fun () ->\n                         type_expect ?recarg:None exp_env sexp\n                           (mk_expected ?explanation:None ty')) in\n                  (exp, (Some vars))\n              | _ ->\n                  let exp =\n                    Builtin_attributes.warning_scope ?ppwarning:None\n                      pvb_attributes\n                      (fun () ->\n                         type_expect ?recarg:None exp_env sexp\n                           (mk_expected ?explanation:None pat.pat_type)) in\n                  (exp, None)) in\n       List.iter2\n         (fun pat (attrs, exp) ->\n            Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n              (fun () ->\n                 let case = Parmatch.typed_case (case pat exp) in\n                 ignore\n                   (check_partial ?lev:None env pat.pat_type pat.pat_loc\n                      [case] : Typedtree.partial))) pat_list\n         (List.map2 (fun (attrs, _) (e, _) -> (attrs, e)) spatl exp_list);\n       (pat_list, exp_list, new_env, mvs,\n         (List.map\n            (fun pv ->\n               { pv with pv_type = (instance ?partial:None pv.pv_type) }) pvs)))))","arity":2},
  {"type":"construct","text":"Some\n  (fun (pat_list, exp_list, _, _, pvs) ->\n     List.iter2\n       (fun pat (exp, _) ->\n          if maybe_expansive exp then lower_contravariant env pat.pat_type)\n       pat_list exp_list;\n     iter_pattern_variables_type generalize pvs;\n     List.iter2\n       (fun pat (exp, vars) ->\n          match vars with\n          | None -> generalize exp.exp_type\n          | Some vars ->\n              (if maybe_expansive exp\n               then lower_contravariant env exp.exp_type;\n               generalize_and_check_univars env \"definition\" exp pat.pat_type\n                 vars)) pat_list exp_list)","arity":1},
  {"type":"apply","text":"List.iter2\n  (fun pat (exp, _) ->\n     if maybe_expansive exp then lower_contravariant env pat.pat_type)\n  pat_list exp_list","arity":3},
  {"type":"apply","text":"maybe_expansive exp","arity":1},
  {"type":"apply","text":"lower_contravariant env pat.pat_type","arity":2},
  {"type":"apply","text":"iter_pattern_variables_type generalize pvs","arity":2},
  {"type":"apply","text":"List.iter2\n  (fun pat (exp, vars) ->\n     match vars with\n     | None -> generalize exp.exp_type\n     | Some vars ->\n         (if maybe_expansive exp then lower_contravariant env exp.exp_type;\n          generalize_and_check_univars env \"definition\" exp pat.pat_type vars))\n  pat_list exp_list","arity":3},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"generalize exp.exp_type","arity":1},
  {"type":"pat_construct","text":"Some\nvars","arity":1},
  {"type":"apply","text":"maybe_expansive exp","arity":1},
  {"type":"apply","text":"lower_contravariant env exp.exp_type","arity":2},
  {"type":"apply","text":"generalize_and_check_univars env \"definition\" exp pat.pat_type vars","arity":5},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"existential_context = At_toplevel","arity":2},
  {"type":"construct","text":"At_toplevel","arity":0},
  {"type":"apply","text":"Typetexp.TyVarEnv.reset ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () ->\n     let nvs = List.map (fun _ -> newvar ?name:None ()) spatl in\n     let (pat_list, _new_env, _force, _pvs, _mvs) as res =\n       type_pattern_list Value existential_context env spatl nvs\n         allow_modules in\n     if is_recursive\n     then\n       List.iter2\n         (fun pat binding ->\n            let pat =\n              match get_desc pat.pat_type with\n              | Tpoly (ty, tl) ->\n                  {\n                    pat with\n                    pat_type =\n                      (snd\n                         (instance_poly ?keep_names:(Some true) ~fixed:false\n                            tl ty))\n                  }\n              | _ -> pat in\n            let bound_expr = vb_exp_constraint binding in\n            unify_pat ?sdesc_for_hint:None env pat\n              (type_approx env bound_expr)) pat_list spat_sexp_list;\n     List.iter\n       (fun pat ->\n          if has_variants pat\n          then (Parmatch.pressure_variants env [pat]; finalize_variants pat))\n       pat_list;\n     res)\n  ~post:(fun (pat_list, _, _, pvs, _) ->\n           iter_pattern_variables_type generalize_structure pvs;\n           List.iter (fun pat -> generalize_structure pat.pat_type) pat_list)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"List.map (fun _ -> newvar ?name:None ()) spatl","arity":2},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_pattern_list Value existential_context env spatl nvs allow_modules","arity":6},
  {"type":"construct","text":"Value","arity":0},
  {"type":"apply","text":"List.iter2\n  (fun pat binding ->\n     let pat =\n       match get_desc pat.pat_type with\n       | Tpoly (ty, tl) ->\n           {\n             pat with\n             pat_type =\n               (snd\n                  (instance_poly ?keep_names:(Some true) ~fixed:false tl ty))\n           }\n       | _ -> pat in\n     let bound_expr = vb_exp_constraint binding in\n     unify_pat ?sdesc_for_hint:None env pat (type_approx env bound_expr))\n  pat_list spat_sexp_list","arity":3},
  {"type":"apply","text":"get_desc pat.pat_type","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(ty, tl)","arity":2},
  {"type":"apply","text":"snd (instance_poly ?keep_names:(Some true) ~fixed:false tl ty)","arity":1},
  {"type":"apply","text":"instance_poly ?keep_names:(Some true) ~fixed:false tl ty","arity":4},
  {"type":"construct","text":"Some true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"vb_exp_constraint binding","arity":1},
  {"type":"apply","text":"unify_pat ?sdesc_for_hint:None env pat (type_approx env bound_expr)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_approx env bound_expr","arity":2},
  {"type":"apply","text":"List.iter\n  (fun pat ->\n     if has_variants pat\n     then (Parmatch.pressure_variants env [pat]; finalize_variants pat))\n  pat_list","arity":2},
  {"type":"apply","text":"has_variants pat","arity":1},
  {"type":"apply","text":"Parmatch.pressure_variants env [pat]","arity":2},
  {"type":"construct","text":"[pat]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"finalize_variants pat","arity":1},
  {"type":"apply","text":"iter_pattern_variables_type generalize_structure pvs","arity":2},
  {"type":"apply","text":"List.iter (fun pat -> generalize_structure pat.pat_type) pat_list","arity":2},
  {"type":"apply","text":"generalize_structure pat.pat_type","arity":1},
  {"type":"apply","text":"add_pattern_variables ?check:None ?check_as:None new_env pvs","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.map\n  (fun pat -> { pat with pat_type = (instance ?partial:None pat.pat_type) })\n  pat_list","arity":2},
  {"type":"apply","text":"instance ?partial:None pat.pat_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.iter (fun f -> f ()) force","arity":2},
  {"type":"apply","text":"f ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"add_module_variables new_env mvs","arity":2},
  {"type":"apply","text":"type_let_def_wrap_warnings ?check ?check_strict ~is_recursive ~exp_env\n  ~new_env ~spat_sexp_list ~attrs_list ~pat_list ~pvs\n  (fun exp_env ({ pvb_attributes;_} as vb) pat ->\n     let sexp = vb_exp_constraint vb in\n     match get_desc pat.pat_type with\n     | Tpoly (ty, tl) ->\n         let (vars, ty') =\n           with_local_level_if_principal\n             (fun () ->\n                instance_poly ?keep_names:(Some true) ~fixed:true tl ty)\n             ~post:(fun (_, ty') -> generalize_structure ty') in\n         let exp =\n           Builtin_attributes.warning_scope ?ppwarning:None pvb_attributes\n             (fun () ->\n                type_expect ?recarg:None exp_env sexp\n                  (mk_expected ?explanation:None ty')) in\n         (exp, (Some vars))\n     | _ ->\n         let exp =\n           Builtin_attributes.warning_scope ?ppwarning:None pvb_attributes\n             (fun () ->\n                type_expect ?recarg:None exp_env sexp\n                  (mk_expected ?explanation:None pat.pat_type)) in\n         (exp, None))","arity":10},
  {"type":"apply","text":"vb_exp_constraint vb","arity":1},
  {"type":"apply","text":"get_desc pat.pat_type","arity":1},
  {"type":"pat_construct","text":"Tpoly\n(ty, tl)","arity":2},
  {"type":"apply","text":"with_local_level_if_principal\n  (fun () -> instance_poly ?keep_names:(Some true) ~fixed:true tl ty)\n  ~post:(fun (_, ty') -> generalize_structure ty')","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"instance_poly ?keep_names:(Some true) ~fixed:true tl ty","arity":4},
  {"type":"construct","text":"Some true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"generalize_structure ty'","arity":1},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:None pvb_attributes\n  (fun () ->\n     type_expect ?recarg:None exp_env sexp\n       (mk_expected ?explanation:None ty'))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None exp_env sexp (mk_expected ?explanation:None ty')","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty'","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Some vars","arity":1},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:None pvb_attributes\n  (fun () ->\n     type_expect ?recarg:None exp_env sexp\n       (mk_expected ?explanation:None pat.pat_type))","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None exp_env sexp\n  (mk_expected ?explanation:None pat.pat_type)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None pat.pat_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.iter2\n  (fun pat (attrs, exp) ->\n     Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n       (fun () ->\n          let case = Parmatch.typed_case (case pat exp) in\n          ignore\n            (check_partial ?lev:None env pat.pat_type pat.pat_loc [case] : \n            Typedtree.partial))) pat_list\n  (List.map2 (fun (attrs, _) (e, _) -> (attrs, e)) spatl exp_list)","arity":3},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n  (fun () ->\n     let case = Parmatch.typed_case (case pat exp) in\n     ignore\n       (check_partial ?lev:None env pat.pat_type pat.pat_loc [case] : \n       Typedtree.partial))","arity":3},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Parmatch.typed_case (case pat exp)","arity":1},
  {"type":"apply","text":"case pat exp","arity":2},
  {"type":"apply","text":"ignore\n  (check_partial ?lev:None env pat.pat_type pat.pat_loc [case] : Typedtree.partial)","arity":1},
  {"type":"apply","text":"(check_partial ?lev:None env pat.pat_type pat.pat_loc [case] : Typedtree.partial)","arity":5},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[case]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"List.map2 (fun (attrs, _) (e, _) -> (attrs, e)) spatl exp_list","arity":3},
  {"type":"apply","text":"List.map\n  (fun pv -> { pv with pv_type = (instance ?partial:None pv.pv_type) }) pvs","arity":2},
  {"type":"apply","text":"instance ?partial:None pv.pv_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.combine pat_list exp_list","arity":2},
  {"type":"apply","text":"List.map2\n  (fun (p, (e, _)) pvb ->\n     {\n       vb_loc = (pvb.pvb_loc);\n       vb_attributes = (pvb.pvb_attributes);\n       vb_rec_kind = Dynamic;\n       vb_expr = e;\n       vb_pat = p\n     }) l spat_sexp_list","arity":3},
  {"type":"construct","text":"Dynamic","arity":0},
  {"type":"apply","text":"List.iter\n  (fun { vb_pat = pat } ->\n     match pat.pat_desc with\n     | Tpat_var (_, _, _) -> ()\n     | Tpat_alias ({ pat_desc = Tpat_any }, _, _, _) -> ()\n     | _ -> raise (Error ((pat.pat_loc), env, Illegal_letrec_pat))) l","arity":2},
  {"type":"pat_construct","text":"Tpat_var\n(_, _, _)","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Tpat_alias\n({ pat_desc = Tpat_any }, _, _, _)","arity":4},
  {"type":"pat_construct","text":"Tpat_any","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"raise (Error ((pat.pat_loc), env, Illegal_letrec_pat))","arity":1},
  {"type":"construct","text":"Error ((pat.pat_loc), env, Illegal_letrec_pat)","arity":3},
  {"type":"construct","text":"Illegal_letrec_pat","arity":0},
  {"type":"apply","text":"List.iter\n  (fun vb ->\n     if pattern_needs_partial_application_check vb.vb_pat\n     then check_partial_application ~statement:false vb.vb_expr) l","arity":2},
  {"type":"apply","text":"pattern_needs_partial_application_check vb.vb_pat","arity":1},
  {"type":"apply","text":"check_partial_application ~statement:false vb.vb_expr","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"add_module_variables new_env mvs","arity":2},
  {"type":"construct","text":"Warnings.Unused_var s","arity":1},
  {"type":"construct","text":"Warnings.Unused_var_strict s","arity":1},
  {"type":"pat_construct","text":"{\n  pvb_expr =\n    {\n      pexp_desc = Pexp_match\n        ({ pexp_desc = Pexp_ident { txt = Longident.Lident \"*opt*\" } }, _)\n      }\n  }::[]","arity":2},
  {"type":"pat_construct","text":"Pexp_match\n({ pexp_desc = Pexp_ident { txt = Longident.Lident \"*opt*\" } }, _)","arity":2},
  {"type":"pat_construct","text":"Pexp_ident\n{ txt = Longident.Lident \"*opt*\" }","arity":1},
  {"type":"pat_construct","text":"Longident.Lident\n\"*opt*\"","arity":1},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.exists\n  (fun attrs ->\n     Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n       (fun () ->\n          (Warnings.is_active (check \"\")) ||\n            ((Warnings.is_active (check_strict \"\")) ||\n               (is_recursive && (Warnings.is_active Warnings.Unused_rec_flag)))))\n  attrs_list","arity":2},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n  (fun () ->\n     (Warnings.is_active (check \"\")) ||\n       ((Warnings.is_active (check_strict \"\")) ||\n          (is_recursive && (Warnings.is_active Warnings.Unused_rec_flag))))","arity":3},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"(Warnings.is_active (check \"\")) ||\n  ((Warnings.is_active (check_strict \"\")) ||\n     (is_recursive && (Warnings.is_active Warnings.Unused_rec_flag)))","arity":2},
  {"type":"apply","text":"Warnings.is_active (check \"\")","arity":1},
  {"type":"apply","text":"check \"\"","arity":1},
  {"type":"apply","text":"(Warnings.is_active (check_strict \"\")) ||\n  (is_recursive && (Warnings.is_active Warnings.Unused_rec_flag))","arity":2},
  {"type":"apply","text":"Warnings.is_active (check_strict \"\")","arity":1},
  {"type":"apply","text":"check_strict \"\"","arity":1},
  {"type":"apply","text":"is_recursive && (Warnings.is_active Warnings.Unused_rec_flag)","arity":2},
  {"type":"apply","text":"Warnings.is_active Warnings.Unused_rec_flag","arity":1},
  {"type":"construct","text":"Warnings.Unused_rec_flag","arity":0},
  {"type":"pat_construct","text":"Pexp_function\n(_, _, _)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"(not is_recursive) && (List.for_all sexp_is_fun spat_sexp_list)","arity":2},
  {"type":"apply","text":"not is_recursive","arity":1},
  {"type":"apply","text":"List.for_all sexp_is_fun spat_sexp_list","arity":2},
  {"type":"pat_construct","text":"{ pvb_loc;_}::_","arity":2},
  {"type":"apply","text":"maybe_add_pattern_variables_ghost pvb_loc exp_env pvs","arity":3},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref None","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"ref false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"List.map2\n  (fun attrs pat ->\n     Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n       (fun () ->\n          if not warn_about_unused_bindings\n          then (pat, None)\n          else\n            (let some_used = ref false in\n             let slot = ref [] in\n             List.iter\n               (fun id ->\n                  let vd = Env.find_value (Path.Pident id) new_env in\n                  let name = Ident.name id in\n                  let used = ref false in\n                  if\n                    not\n                      ((name = \"\") ||\n                         (((name.[0]) = '_') || ((name.[0]) = '#')))\n                  then\n                    add_delayed_check\n                      (fun () ->\n                         if not (!used)\n                         then\n                           Location.prerr_warning vd.Types.val_loc\n                             ((if !some_used then check_strict else check)\n                                name));\n                  Env.set_value_used_callback vd\n                    (fun () ->\n                       match !current_slot with\n                       | Some slot ->\n                           (slot := ((vd.val_uid) :: (!slot));\n                            rec_needed := true)\n                       | None ->\n                           (List.iter Env.mark_value_used (get_ref slot);\n                            used := true;\n                            some_used := true)))\n               (Typedtree.pat_bound_idents pat);\n             (pat, (Some slot))))) attrs_list pat_list","arity":3},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:(Some false) attrs\n  (fun () ->\n     if not warn_about_unused_bindings\n     then (pat, None)\n     else\n       (let some_used = ref false in\n        let slot = ref [] in\n        List.iter\n          (fun id ->\n             let vd = Env.find_value (Path.Pident id) new_env in\n             let name = Ident.name id in\n             let used = ref false in\n             if\n               not\n                 ((name = \"\") || (((name.[0]) = '_') || ((name.[0]) = '#')))\n             then\n               add_delayed_check\n                 (fun () ->\n                    if not (!used)\n                    then\n                      Location.prerr_warning vd.Types.val_loc\n                        ((if !some_used then check_strict else check) name));\n             Env.set_value_used_callback vd\n               (fun () ->\n                  match !current_slot with\n                  | Some slot ->\n                      (slot := ((vd.val_uid) :: (!slot)); rec_needed := true)\n                  | None ->\n                      (List.iter Env.mark_value_used (get_ref slot);\n                       used := true;\n                       some_used := true))) (Typedtree.pat_bound_idents pat);\n        (pat, (Some slot))))","arity":3},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"not warn_about_unused_bindings","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"ref false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"ref []","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"List.iter\n  (fun id ->\n     let vd = Env.find_value (Path.Pident id) new_env in\n     let name = Ident.name id in\n     let used = ref false in\n     if not ((name = \"\") || (((name.[0]) = '_') || ((name.[0]) = '#')))\n     then\n       add_delayed_check\n         (fun () ->\n            if not (!used)\n            then\n              Location.prerr_warning vd.Types.val_loc\n                ((if !some_used then check_strict else check) name));\n     Env.set_value_used_callback vd\n       (fun () ->\n          match !current_slot with\n          | Some slot ->\n              (slot := ((vd.val_uid) :: (!slot)); rec_needed := true)\n          | None ->\n              (List.iter Env.mark_value_used (get_ref slot);\n               used := true;\n               some_used := true))) (Typedtree.pat_bound_idents pat)","arity":2},
  {"type":"apply","text":"Env.find_value (Path.Pident id) new_env","arity":2},
  {"type":"construct","text":"Path.Pident id","arity":1},
  {"type":"apply","text":"Ident.name id","arity":1},
  {"type":"apply","text":"ref false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"not ((name = \"\") || (((name.[0]) = '_') || ((name.[0]) = '#')))","arity":1},
  {"type":"apply","text":"(name = \"\") || (((name.[0]) = '_') || ((name.[0]) = '#'))","arity":2},
  {"type":"apply","text":"name = \"\"","arity":2},
  {"type":"apply","text":"((name.[0]) = '_') || ((name.[0]) = '#')","arity":2},
  {"type":"apply","text":"(name.[0]) = '_'","arity":2},
  {"type":"apply","text":"name.[0]","arity":2},
  {"type":"apply","text":"(name.[0]) = '#'","arity":2},
  {"type":"apply","text":"name.[0]","arity":2},
  {"type":"apply","text":"add_delayed_check\n  (fun () ->\n     if not (!used)\n     then\n       Location.prerr_warning vd.Types.val_loc\n         ((if !some_used then check_strict else check) name))","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"not (!used)","arity":1},
  {"type":"apply","text":"!used","arity":1},
  {"type":"apply","text":"Location.prerr_warning vd.Types.val_loc\n  ((if !some_used then check_strict else check) name)","arity":2},
  {"type":"apply","text":"(if !some_used then check_strict else check) name","arity":1},
  {"type":"apply","text":"!some_used","arity":1},
  {"type":"apply","text":"Env.set_value_used_callback vd\n  (fun () ->\n     match !current_slot with\n     | Some slot -> (slot := ((vd.val_uid) :: (!slot)); rec_needed := true)\n     | None ->\n         (List.iter Env.mark_value_used (get_ref slot);\n          used := true;\n          some_used := true))","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"!current_slot","arity":1},
  {"type":"pat_construct","text":"Some\nslot","arity":1},
  {"type":"apply","text":"slot := ((vd.val_uid) :: (!slot))","arity":2},
  {"type":"construct","text":"(vd.val_uid) :: (!slot)","arity":2},
  {"type":"apply","text":"!slot","arity":1},
  {"type":"apply","text":"rec_needed := true","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"apply","text":"List.iter Env.mark_value_used (get_ref slot)","arity":2},
  {"type":"apply","text":"get_ref slot","arity":1},
  {"type":"apply","text":"used := true","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"some_used := true","arity":2},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"Typedtree.pat_bound_idents pat","arity":1},
  {"type":"construct","text":"Some slot","arity":1},
  {"type":"apply","text":"List.map2\n  (fun case (pat, slot) ->\n     if is_recursive then current_slot := slot; type_def exp_env case pat)\n  spat_sexp_list pat_slot_list","arity":3},
  {"type":"apply","text":"current_slot := slot","arity":2},
  {"type":"apply","text":"type_def exp_env case pat","arity":3},
  {"type":"apply","text":"current_slot := None","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"is_recursive && (not (!rec_needed))","arity":2},
  {"type":"apply","text":"not (!rec_needed)","arity":1},
  {"type":"apply","text":"!rec_needed","arity":1},
  {"type":"apply","text":"List.hd spat_sexp_list","arity":1},
  {"type":"apply","text":"Builtin_attributes.warning_scope ?ppwarning:(Some false) pvb_attributes\n  (fun () -> Location.prerr_warning pvb_pat.ppat_loc Warnings.Unused_rec_flag)","arity":3},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Location.prerr_warning pvb_pat.ppat_loc Warnings.Unused_rec_flag","arity":2},
  {"type":"construct","text":"Warnings.Unused_rec_flag","arity":0},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"type_expect ?recarg:None env let_sarg\n  (mk_expected ?explanation:None expected_ty)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"{ pbop_op = sop; pbop_exp = sexp; pbop_loc = loc;_}::rest","arity":2},
  {"type":"apply","text":"with_local_level_iter_if_principal\n  (fun () ->\n     let (op_path, op_desc) = type_binding_op_ident env sop in\n     let op_type = instance ?partial:None op_desc.val_type in\n     let ty_arg = newvar ?name:None () in\n     let ty_rest = newvar ?name:None () in\n     let ty_result = newvar ?name:None () in\n     let ty_rest_fun = newty (Tarrow (Nolabel, ty_arg, ty_result, commu_ok)) in\n     let ty_op = newty (Tarrow (Nolabel, ty_rest, ty_rest_fun, commu_ok)) in\n     (try unify env op_type ty_op\n      with\n      | Unify err ->\n          raise (Error ((sop.loc), env, (Andop_type_clash ((sop.txt), err)))));\n     ((op_path, op_desc, op_type, ty_arg, ty_rest, ty_result),\n       [ty_rest; ty_arg; ty_result])) ~post:generalize_structure","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"type_binding_op_ident env sop","arity":2},
  {"type":"apply","text":"instance ?partial:None op_desc.val_type","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"newty (Tarrow (Nolabel, ty_arg, ty_result, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, ty_arg, ty_result, commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"newty (Tarrow (Nolabel, ty_rest, ty_rest_fun, commu_ok))","arity":1},
  {"type":"construct","text":"Tarrow (Nolabel, ty_rest, ty_rest_fun, commu_ok)","arity":4},
  {"type":"construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"unify env op_type ty_op","arity":3},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error ((sop.loc), env, (Andop_type_clash ((sop.txt), err))))","arity":1},
  {"type":"construct","text":"Error ((sop.loc), env, (Andop_type_clash ((sop.txt), err)))","arity":3},
  {"type":"construct","text":"Andop_type_clash ((sop.txt), err)","arity":2},
  {"type":"construct","text":"[ty_rest; ty_arg; ty_result]","arity":2},
  {"type":"construct","text":"[ty_arg; ty_result]","arity":2},
  {"type":"construct","text":"[ty_result]","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"loop env let_sarg rest ty_rest","arity":4},
  {"type":"apply","text":"type_expect ?recarg:None env sexp (mk_expected ?explanation:None ty_arg)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"mk_expected ?explanation:None ty_arg","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"unify env (instance ?partial:None ty_result)\n  (instance ?partial:None expected_ty)","arity":3},
  {"type":"apply","text":"instance ?partial:None ty_result","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"instance ?partial:None expected_ty","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Unify\nerr","arity":1},
  {"type":"apply","text":"raise (Error (loc, env, (Bindings_type_clash err)))","arity":1},
  {"type":"construct","text":"Error (loc, env, (Bindings_type_clash err))","arity":3},
  {"type":"construct","text":"Bindings_type_clash err","arity":1},
  {"type":"construct","text":"andop :: rest","arity":2},
  {"type":"apply","text":"loop env sarg (List.rev sands) expected_ty","arity":4},
  {"type":"apply","text":"List.rev sands","arity":1},
  {"type":"apply","text":"List.rev rev_ands","arity":1},
  {"type":"apply","text":"type_exp ?recarg:None env e","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_kind = Val_self (sign, meths, _, _) })","arity":3},
  {"type":"pat_construct","text":"Val_self\n(sign, meths, _, _)","arity":4},
  {"type":"pat_construct","text":"Self_concrete\nmeths","arity":1},
  {"type":"apply","text":"Meths.find met meths","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"Meths.fold (fun lab _ acc -> lab :: acc) meths []","arity":3},
  {"type":"construct","text":"lab :: acc","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise\n  (Error ((e.pexp_loc), env, (Undefined_self_method (met, valid_methods))))","arity":1},
  {"type":"construct","text":"Error ((e.pexp_loc), env, (Undefined_self_method (met, valid_methods)))","arity":3},
  {"type":"construct","text":"Undefined_self_method (met, valid_methods)","arity":2},
  {"type":"apply","text":"Btype.method_type met sign","arity":2},
  {"type":"pat_construct","text":"Self_virtual\nmeths_ref","arity":1},
  {"type":"apply","text":"Meths.find met (!meths_ref)","arity":2},
  {"type":"apply","text":"!meths_ref","arity":1},
  {"type":"apply","text":"Btype.method_type met sign","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"Ident.create_local met","arity":1},
  {"type":"apply","text":"newvar ?name:None ()","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"meths_ref := (Meths.add met id (!meths_ref))","arity":2},
  {"type":"apply","text":"Meths.add met id (!meths_ref)","arity":3},
  {"type":"apply","text":"!meths_ref","arity":1},
  {"type":"apply","text":"add_method env met Private Virtual ty sign","arity":6},
  {"type":"construct","text":"Private","arity":0},
  {"type":"construct","text":"Virtual","arity":0},
  {"type":"apply","text":"Location.prerr_warning loc (Warnings.Undeclared_virtual_method met)","arity":2},
  {"type":"construct","text":"Warnings.Undeclared_virtual_method met","arity":1},
  {"type":"construct","text":"Tmeth_val id","arity":1},
  {"type":"pat_construct","text":"Texp_ident\n(_, _, { val_kind = Val_anc (sign, meths, cl_num) })","arity":3},
  {"type":"pat_construct","text":"Val_anc\n(sign, meths, cl_num)","arity":3},
  {"type":"apply","text":"Meths.find met meths","arity":2},
  {"type":"pat_construct","text":"Not_found","arity":0},
  {"type":"apply","text":"Meths.fold (fun lab _ acc -> lab :: acc) meths []","arity":3},
  {"type":"construct","text":"lab :: acc","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"raise\n  (Error ((e.pexp_loc), env, (Undefined_self_method (met, valid_methods))))","arity":1},
  {"type":"construct","text":"Error ((e.pexp_loc), env, (Undefined_self_method (met, valid_methods)))","arity":3},
  {"type":"construct","text":"Undefined_self_method (met, valid_methods)","arity":2},
  {"type":"apply","text":"Btype.method_type met sign","arity":2},
  {"type":"apply","text":"Env.find_value_by_name (Longident.Lident (\"self-\" ^ cl_num)) env","arity":2},
  {"type":"construct","text":"Longident.Lident (\"self-\" ^ cl_num)","arity":1},
  {"type":"apply","text":"\"self-\" ^ cl_num","arity":2},
  {"type":"construct","text":"Tmeth_ancestor (id, self_path)","arity":2},
  {"type":"apply","text":"filter_method env met obj.exp_type","arity":3},
  {"type":"pat_construct","text":"Filter_method_failed\nerr","arity":1},
  {"type":"pat_construct","text":"Unification_error\nerr","arity":1},
  {"type":"construct","text":"Expr_type_clash (err, explanation, None)","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Not_an_object\nty","arity":1},
  {"type":"construct","text":"Not_an_object (ty, explanation)","arity":2},
  {"type":"pat_construct","text":"Not_a_method","arity":0},
  {"type":"apply","text":"get_desc (expand_head env obj.exp_type)","arity":1},
  {"type":"apply","text":"expand_head env obj.exp_type","arity":2},
  {"type":"pat_construct","text":"Tobject\n(fields, _)","arity":2},
  {"type":"apply","text":"Ctype.flatten_fields fields","arity":1},
  {"type":"apply","text":"(field_kind_repr meth_kind) = Fpublic","arity":2},
  {"type":"apply","text":"field_kind_repr meth_kind","arity":1},
  {"type":"construct","text":"Fpublic","arity":0},
  {"type":"construct","text":"meth :: li","arity":2},
  {"type":"construct","text":"Some (List.fold_left collect_fields [] fields)","arity":1},
  {"type":"apply","text":"List.fold_left collect_fields [] fields","arity":3},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Undefined_method ((obj.exp_type), met, valid_methods)","arity":3},
  {"type":"apply","text":"raise (Error ((e.pexp_loc), env, error))","arity":1},
  {"type":"construct","text":"Error ((e.pexp_loc), env, error)","arity":3},
  {"type":"construct","text":"Tmeth_name met","arity":1},
  {"type":"apply","text":"type_let ?check:(Some (fun s -> Warnings.Unused_value_declaration s))\n  ?check_strict:(Some (fun s -> Warnings.Unused_value_declaration s))\n  At_toplevel env rec_flag spat_sexp_list Modules_rejected","arity":7},
  {"type":"construct","text":"Some (fun s -> Warnings.Unused_value_declaration s)","arity":1},
  {"type":"construct","text":"Warnings.Unused_value_declaration s","arity":1},
  {"type":"construct","text":"Some (fun s -> Warnings.Unused_value_declaration s)","arity":1},
  {"type":"construct","text":"Warnings.Unused_value_declaration s","arity":1},
  {"type":"construct","text":"At_toplevel","arity":0},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"apply","text":"type_let ?check:None ?check_strict:None existential_ctx env rec_flag\n  spat_sexp_list Modules_rejected","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"Modules_rejected","arity":0},
  {"type":"apply","text":"with_local_level ?post:(Some (may_lower_contravariant_then_generalize env))\n  (fun () -> Typetexp.TyVarEnv.reset (); type_exp ?recarg:None env sexp)","arity":2},
  {"type":"construct","text":"Some (may_lower_contravariant_then_generalize env)","arity":1},
  {"type":"apply","text":"may_lower_contravariant_then_generalize env","arity":1},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Typetexp.TyVarEnv.reset ()","arity":1},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env sexp","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pexp_ident\nlid","arity":1},
  {"type":"apply","text":"Env.lookup_value ?use:(Some false) ~loc lid.txt env","arity":4},
  {"type":"construct","text":"Some false","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Misc.did_you_mean ppf (fun () -> Misc.spellcheck valid_names unbound_name)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Misc.spellcheck valid_names unbound_name","arity":2},
  {"type":"apply","text":"spellcheck ppf (Ident.name unbound) (List.map Ident.name valid_idents)","arity":3},
  {"type":"apply","text":"Ident.name unbound","arity":1},
  {"type":"apply","text":"List.map Ident.name valid_idents","arity":2},
  {"type":"apply","text":"explain trace (fun ~prev:_ -> function | Diff diff -> Some diff | _ -> None)","arity":2},
  {"type":"pat_construct","text":"Diff\ndiff","arity":1},
  {"type":"construct","text":"Some diff","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Pconst_integer\n(s, _)","arity":2},
  {"type":"construct","text":"Some s","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Path.same expected_type Predef.path_int32","arity":2},
  {"type":"construct","text":"Some 'l'","arity":1},
  {"type":"apply","text":"Path.same expected_type Predef.path_int64","arity":2},
  {"type":"construct","text":"Some 'L'","arity":1},
  {"type":"apply","text":"Path.same expected_type Predef.path_nativeint","arity":2},
  {"type":"construct","text":"Some 'n'","arity":1},
  {"type":"apply","text":"Path.same expected_type Predef.path_float","arity":2},
  {"type":"construct","text":"Some '.'","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Format.fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String\n         (CamlinternalFormatBasics.No_padding,\n           (CamlinternalFormatBasics.Char\n              CamlinternalFormatBasics.End_of_format))), \"%s%c\")) c s","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String\n      (CamlinternalFormatBasics.No_padding,\n        (CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format))),\n    \"%s%c\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Some\nc","arity":1},
  {"type":"pat_construct","text":"Some\ns","arity":1},
  {"type":"construct","text":"[Location.msg ?loc:None\n   (CamlinternalFormatBasics.Format\n      ((CamlinternalFormatBasics.Formatting_gen\n          ((CamlinternalFormatBasics.Open_box\n              (CamlinternalFormatBasics.Format\n                 (CamlinternalFormatBasics.End_of_format, \"\"))),\n            (CamlinternalFormatBasics.Formatting_gen\n               ((CamlinternalFormatBasics.Open_tag\n                   (CamlinternalFormatBasics.Format\n                      ((CamlinternalFormatBasics.String_literal\n                          (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                        \"<hint>\"))),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"Hint\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_tag,\n                           (CamlinternalFormatBasics.String_literal\n                              (\": Did you mean \",\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.Char_literal\n                                      ('?',\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             CamlinternalFormatBasics.End_of_format))))))))))))))),\n        \"@[@{<hint>Hint@}: Did you mean %a?@]\"))\n   (Style.as_inline_code pp_const) (c, s)]","arity":2},
  {"type":"apply","text":"Location.msg ?loc:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_tag\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<hint>\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"Hint\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        (CamlinternalFormatBasics.Close_tag,\n                          (CamlinternalFormatBasics.String_literal\n                             (\": Did you mean \",\n                               (CamlinternalFormatBasics.Alpha\n                                  (CamlinternalFormatBasics.Char_literal\n                                     ('?',\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_box,\n                                            CamlinternalFormatBasics.End_of_format))))))))))))))),\n       \"@[@{<hint>Hint@}: Did you mean %a?@]\"))\n  (Style.as_inline_code pp_const) (c, s)","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_tag\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<hint>\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"Hint\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     (CamlinternalFormatBasics.Close_tag,\n                       (CamlinternalFormatBasics.String_literal\n                          (\": Did you mean \",\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.Char_literal\n                                  ('?',\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       (CamlinternalFormatBasics.Close_box,\n                                         CamlinternalFormatBasics.End_of_format))))))))))))))),\n    \"@[@{<hint>Hint@}: Did you mean %a?@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_tag\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                \"<hint>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"Hint\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_tag,\n                   (CamlinternalFormatBasics.String_literal\n                      (\": Did you mean \",\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Char_literal\n                              ('?',\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_tag\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Hint\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_tag,\n              (CamlinternalFormatBasics.String_literal\n                 (\": Did you mean \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Char_literal\n                         ('?',\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_tag\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hint>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Hint\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_tag,\n         (CamlinternalFormatBasics.String_literal\n            (\": Did you mean \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Char_literal\n                    ('?',\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_tag,\n    (CamlinternalFormatBasics.String_literal\n       (\": Did you mean \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Char_literal\n               ('?',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_tag","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\": Did you mean \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Char_literal\n          ('?',\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Char_literal\n     ('?',\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('?',\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code pp_const","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\ntr","arity":1},
  {"type":"apply","text":"get_desc (let open Errortrace in (tr.expected).ty)","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(typ, [], _)","arity":3},
  {"type":"pat_construct","text":"[]","arity":0},
  {"type":"apply","text":"report_literal_type_constraint typ const","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some\ntr","arity":1},
  {"type":"apply","text":"get_desc (tr.Errortrace.got).Errortrace.expanded","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(_, _, _, _)","arity":4},
  {"type":"construct","text":"[Location.msg ?loc:None\n   (CamlinternalFormatBasics.Format\n      ((CamlinternalFormatBasics.Formatting_gen\n          ((CamlinternalFormatBasics.Open_box\n              (CamlinternalFormatBasics.Format\n                 (CamlinternalFormatBasics.End_of_format, \"\"))),\n            (CamlinternalFormatBasics.Formatting_gen\n               ((CamlinternalFormatBasics.Open_tag\n                   (CamlinternalFormatBasics.Format\n                      ((CamlinternalFormatBasics.String_literal\n                          (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                        \"<hint>\"))),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"Hint\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_tag,\n                           (CamlinternalFormatBasics.String_literal\n                              (\": This function application is partial,\",\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\"maybe some arguments are missing.\",\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               CamlinternalFormatBasics.End_of_format)))))))))))))))),\n        \"@[@{<hint>Hint@}: This function application is partial,@ maybe some arguments are missing.@]\"))]","arity":2},
  {"type":"apply","text":"Location.msg ?loc:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_tag\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<hint>\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"Hint\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        (CamlinternalFormatBasics.Close_tag,\n                          (CamlinternalFormatBasics.String_literal\n                             (\": This function application is partial,\",\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"maybe some arguments are missing.\",\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            (CamlinternalFormatBasics.Close_box,\n                                              CamlinternalFormatBasics.End_of_format)))))))))))))))),\n       \"@[@{<hint>Hint@}: This function application is partial,@ maybe some arguments are missing.@]\"))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_tag\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<hint>\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"Hint\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     (CamlinternalFormatBasics.Close_tag,\n                       (CamlinternalFormatBasics.String_literal\n                          (\": This function application is partial,\",\n                            (CamlinternalFormatBasics.Formatting_lit\n                               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\"maybe some arguments are missing.\",\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         (CamlinternalFormatBasics.Close_box,\n                                           CamlinternalFormatBasics.End_of_format)))))))))))))))),\n    \"@[@{<hint>Hint@}: This function application is partial,@ maybe some arguments are missing.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_tag\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                \"<hint>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"Hint\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_tag,\n                   (CamlinternalFormatBasics.String_literal\n                      (\": This function application is partial,\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"maybe some arguments are missing.\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_box,\n                                       CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_tag\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Hint\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_tag,\n              (CamlinternalFormatBasics.String_literal\n                 (\": This function application is partial,\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"maybe some arguments are missing.\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_tag\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hint>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Hint\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_tag,\n         (CamlinternalFormatBasics.String_literal\n            (\": This function application is partial,\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"maybe some arguments are missing.\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           (CamlinternalFormatBasics.Close_box,\n                             CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_tag,\n    (CamlinternalFormatBasics.String_literal\n       (\": This function application is partial,\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"maybe some arguments are missing.\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_box,\n                        CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_tag","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\": This function application is partial,\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"maybe some arguments are missing.\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"maybe some arguments are missing.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"maybe some arguments are missing.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some (Pexp_constant\nconst)","arity":1},
  {"type":"pat_construct","text":"Pexp_constant\nconst","arity":1},
  {"type":"apply","text":"report_literal_type_constraint const diff","arity":2},
  {"type":"pat_construct","text":"Some (Pexp_apply\n(_, _))","arity":1},
  {"type":"pat_construct","text":"Pexp_apply\n(_, _)","arity":2},
  {"type":"apply","text":"report_partial_application diff","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"pat_construct","text":"Some (Ppat_constant\nconst)","arity":1},
  {"type":"pat_construct","text":"Ppat_constant\nconst","arity":1},
  {"type":"apply","text":"report_literal_type_constraint const diff","arity":2},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_lit\n         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n           (CamlinternalFormatBasics.String_literal\n              (\"because it is in \",\n                (CamlinternalFormatBasics.String\n                   (CamlinternalFormatBasics.No_padding,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@ because it is in %s\")) expl_str","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_lit\n      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n        (CamlinternalFormatBasics.String_literal\n           (\"because it is in \",\n             (CamlinternalFormatBasics.String\n                (CamlinternalFormatBasics.No_padding,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@ because it is in %s\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"because it is in \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"because it is in \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"If_conditional","arity":0},
  {"type":"apply","text":"because \"the condition of an if-statement\"","arity":1},
  {"type":"pat_construct","text":"If_no_else_branch","arity":0},
  {"type":"apply","text":"because \"the result of a conditional with no else branch\"","arity":1},
  {"type":"pat_construct","text":"While_loop_conditional","arity":0},
  {"type":"apply","text":"because \"the condition of a while-loop\"","arity":1},
  {"type":"pat_construct","text":"While_loop_body","arity":0},
  {"type":"apply","text":"because \"the body of a while-loop\"","arity":1},
  {"type":"pat_construct","text":"For_loop_start_index","arity":0},
  {"type":"apply","text":"because \"a for-loop start index\"","arity":1},
  {"type":"pat_construct","text":"For_loop_stop_index","arity":0},
  {"type":"apply","text":"because \"a for-loop stop index\"","arity":1},
  {"type":"pat_construct","text":"For_loop_body","arity":0},
  {"type":"apply","text":"because \"the body of a for-loop\"","arity":1},
  {"type":"pat_construct","text":"Assert_condition","arity":0},
  {"type":"apply","text":"because \"the condition of an assertion\"","arity":1},
  {"type":"pat_construct","text":"Sequence_left_hand_side","arity":0},
  {"type":"apply","text":"because \"the left-hand side of a sequence\"","arity":1},
  {"type":"pat_construct","text":"When_guard","arity":0},
  {"type":"apply","text":"because \"a when-guard\"","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\nexpl","arity":1},
  {"type":"apply","text":"report_type_expected_explanation expl ppf","arity":2},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub ?footnote:None\n  (fun ppf () ->\n     Printtyp.report_unification_error ppf env err ?type_expected_explanation\n       txt1 txt2) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.report_unification_error ppf env err ?type_expected_explanation txt1\n  txt2","arity":6},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"Typedtree.exp_is_nominal funct","arity":1},
  {"type":"apply","text":"Untypeast.untype_expression ?mapper:None funct","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Format.fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The function \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))), \"The function %a\"))\n  (Style.as_inline_code Pprintast.expression) pexp","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The function \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))), \"The function %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The function \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Pprintast.expression","arity":1},
  {"type":"apply","text":"Format.fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This function\", CamlinternalFormatBasics.End_of_format)),\n       \"This function\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This function\", CamlinternalFormatBasics.End_of_format)),\n    \"This function\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This function\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"pos.pos_cnum + off","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"cnum_offset (~- 1) arg_end","arity":2},
  {"type":"apply","text":"~- 1","arity":1},
  {"type":"apply","text":"cnum_offset (~+ 1) arg_end","arity":2},
  {"type":"apply","text":"~+ 1","arity":1},
  {"type":"construct","text":"false","arity":0},
  {"type":"construct","text":"[msg ?loc:(Some tail_loc)\n   (CamlinternalFormatBasics.Format\n      ((CamlinternalFormatBasics.Formatting_gen\n          ((CamlinternalFormatBasics.Open_tag\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                   \"<hint>\"))),\n            (CamlinternalFormatBasics.String_literal\n               (\"Hint\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_tag,\n                      (CamlinternalFormatBasics.String_literal\n                         (\": Did you forget a ';'?\",\n                           CamlinternalFormatBasics.End_of_format)))))))),\n        \"@{<hint>Hint@}: Did you forget a ';'?\"))]","arity":2},
  {"type":"apply","text":"msg ?loc:(Some tail_loc)\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_tag\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                  \"<hint>\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Hint\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_tag,\n                     (CamlinternalFormatBasics.String_literal\n                        (\": Did you forget a ';'?\",\n                          CamlinternalFormatBasics.End_of_format)))))))),\n       \"@{<hint>Hint@}: Did you forget a ';'?\"))","arity":2},
  {"type":"construct","text":"Some tail_loc","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_tag\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n               \"<hint>\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Hint\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_tag,\n                  (CamlinternalFormatBasics.String_literal\n                     (\": Did you forget a ';'?\",\n                       CamlinternalFormatBasics.End_of_format)))))))),\n    \"@{<hint>Hint@}: Did you forget a ';'?\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_tag\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Hint\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_tag,\n              (CamlinternalFormatBasics.String_literal\n                 (\": Did you forget a ';'?\",\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_tag\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hint>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Hint\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_tag,\n         (CamlinternalFormatBasics.String_literal\n            (\": Did you forget a ';'?\",\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_tag,\n    (CamlinternalFormatBasics.String_literal\n       (\": Did you forget a ';'?\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_tag","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\": Did you forget a ';'?\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"hint_semicolon @\n  [msg ?loc:(Some extra_arg_loc)\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.String_literal\n            (\"This extra argument is not expected.\",\n              CamlinternalFormatBasics.End_of_format)),\n          \"This extra argument is not expected.\"))]","arity":2},
  {"type":"construct","text":"[msg ?loc:(Some extra_arg_loc)\n   (CamlinternalFormatBasics.Format\n      ((CamlinternalFormatBasics.String_literal\n          (\"This extra argument is not expected.\",\n            CamlinternalFormatBasics.End_of_format)),\n        \"This extra argument is not expected.\"))]","arity":2},
  {"type":"apply","text":"msg ?loc:(Some extra_arg_loc)\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This extra argument is not expected.\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"This extra argument is not expected.\"))","arity":2},
  {"type":"construct","text":"Some extra_arg_loc","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This extra argument is not expected.\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"This extra argument is not expected.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This extra argument is not expected.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"errorf ?loc:(Some app_loc) ?sub:(Some sub) ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<2>\"))),\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.String_literal\n                      (\" has type\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String_literal\n                                             (\"It is applied to too many arguments\",\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n       \"@[<v>@[<2>%a has type@ %a@]@ It is applied to too many arguments@]\"))\n  report_this_function funct Printtyp.type_expr func_ty","arity":8},
  {"type":"construct","text":"Some app_loc","arity":1},
  {"type":"construct","text":"Some sub","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<2>\"))),\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.String_literal\n                   (\" has type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"It is applied to too many arguments\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n    \"@[<v>@[<2>%a has type@ %a@]@ It is applied to too many arguments@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" has type\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@ \", 1, 0)),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"It is applied to too many arguments\",\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<v>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" has type\",\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"It is applied to too many arguments\",\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" has type\",\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"It is applied to too many arguments\",\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" has type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"It is applied to too many arguments\",\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"It is applied to too many arguments\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"It is applied to too many arguments\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"It is applied to too many arguments\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"It is applied to too many arguments\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"It is applied to too many arguments\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Constructor_arity_mismatch\n(lid, expected, provided)","arity":3},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"The constructor \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"expects \",\n                             (CamlinternalFormatBasics.Int\n                                (CamlinternalFormatBasics.Int_i,\n                                  CamlinternalFormatBasics.No_padding,\n                                  CamlinternalFormatBasics.No_precision,\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\" argument(s),\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\"but is applied here to \",\n                                                 (CamlinternalFormatBasics.Int\n                                                    (CamlinternalFormatBasics.Int_i,\n                                                      CamlinternalFormatBasics.No_padding,\n                                                      CamlinternalFormatBasics.No_precision,\n                                                      (CamlinternalFormatBasics.String_literal\n                                                         (\" argument(s)\",\n                                                           (CamlinternalFormatBasics.Formatting_lit\n                                                              (CamlinternalFormatBasics.Close_box,\n                                                                CamlinternalFormatBasics.End_of_format))))))))))))))))))))))),\n       \"@[The constructor %a@ expects %i argument(s),@ but is applied here to %i argument(s)@]\"))\n  (Style.as_inline_code longident) lid expected provided","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"The constructor \",\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.String_literal\n                        (\"expects \",\n                          (CamlinternalFormatBasics.Int\n                             (CamlinternalFormatBasics.Int_i,\n                               CamlinternalFormatBasics.No_padding,\n                               CamlinternalFormatBasics.No_precision,\n                               (CamlinternalFormatBasics.String_literal\n                                  (\" argument(s),\",\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       ((CamlinternalFormatBasics.Break\n                                           (\"@ \", 1, 0)),\n                                         (CamlinternalFormatBasics.String_literal\n                                            (\"but is applied here to \",\n                                              (CamlinternalFormatBasics.Int\n                                                 (CamlinternalFormatBasics.Int_i,\n                                                   CamlinternalFormatBasics.No_padding,\n                                                   CamlinternalFormatBasics.No_precision,\n                                                   (CamlinternalFormatBasics.String_literal\n                                                      (\" argument(s)\",\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           (CamlinternalFormatBasics.Close_box,\n                                                             CamlinternalFormatBasics.End_of_format))))))))))))))))))))))),\n    \"@[The constructor %a@ expects %i argument(s),@ but is applied here to %i argument(s)@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"The constructor \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"expects \",\n                      (CamlinternalFormatBasics.Int\n                         (CamlinternalFormatBasics.Int_i,\n                           CamlinternalFormatBasics.No_padding,\n                           CamlinternalFormatBasics.No_precision,\n                           (CamlinternalFormatBasics.String_literal\n                              (\" argument(s),\",\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\"but is applied here to \",\n                                          (CamlinternalFormatBasics.Int\n                                             (CamlinternalFormatBasics.Int_i,\n                                               CamlinternalFormatBasics.No_padding,\n                                               CamlinternalFormatBasics.No_precision,\n                                               (CamlinternalFormatBasics.String_literal\n                                                  (\" argument(s)\",\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         CamlinternalFormatBasics.End_of_format))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The constructor \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"expects \",\n                 (CamlinternalFormatBasics.Int\n                    (CamlinternalFormatBasics.Int_i,\n                      CamlinternalFormatBasics.No_padding,\n                      CamlinternalFormatBasics.No_precision,\n                      (CamlinternalFormatBasics.String_literal\n                         (\" argument(s),\",\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"but is applied here to \",\n                                     (CamlinternalFormatBasics.Int\n                                        (CamlinternalFormatBasics.Int_i,\n                                          CamlinternalFormatBasics.No_padding,\n                                          CamlinternalFormatBasics.No_precision,\n                                          (CamlinternalFormatBasics.String_literal\n                                             (\" argument(s)\",\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"expects \",\n            (CamlinternalFormatBasics.Int\n               (CamlinternalFormatBasics.Int_i,\n                 CamlinternalFormatBasics.No_padding,\n                 CamlinternalFormatBasics.No_precision,\n                 (CamlinternalFormatBasics.String_literal\n                    (\" argument(s),\",\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String_literal\n                              (\"but is applied here to \",\n                                (CamlinternalFormatBasics.Int\n                                   (CamlinternalFormatBasics.Int_i,\n                                     CamlinternalFormatBasics.No_padding,\n                                     CamlinternalFormatBasics.No_precision,\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\" argument(s)\",\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               CamlinternalFormatBasics.End_of_format))))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"expects \",\n         (CamlinternalFormatBasics.Int\n            (CamlinternalFormatBasics.Int_i,\n              CamlinternalFormatBasics.No_padding,\n              CamlinternalFormatBasics.No_precision,\n              (CamlinternalFormatBasics.String_literal\n                 (\" argument(s),\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"but is applied here to \",\n                             (CamlinternalFormatBasics.Int\n                                (CamlinternalFormatBasics.Int_i,\n                                  CamlinternalFormatBasics.No_padding,\n                                  CamlinternalFormatBasics.No_precision,\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\" argument(s)\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_box,\n                                            CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"expects \",\n    (CamlinternalFormatBasics.Int\n       (CamlinternalFormatBasics.Int_i, CamlinternalFormatBasics.No_padding,\n         CamlinternalFormatBasics.No_precision,\n         (CamlinternalFormatBasics.String_literal\n            (\" argument(s),\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"but is applied here to \",\n                        (CamlinternalFormatBasics.Int\n                           (CamlinternalFormatBasics.Int_i,\n                             CamlinternalFormatBasics.No_padding,\n                             CamlinternalFormatBasics.No_precision,\n                             (CamlinternalFormatBasics.String_literal\n                                (\" argument(s)\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_box,\n                                       CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Int\n  (CamlinternalFormatBasics.Int_i, CamlinternalFormatBasics.No_padding,\n    CamlinternalFormatBasics.No_precision,\n    (CamlinternalFormatBasics.String_literal\n       (\" argument(s),\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"but is applied here to \",\n                   (CamlinternalFormatBasics.Int\n                      (CamlinternalFormatBasics.Int_i,\n                        CamlinternalFormatBasics.No_padding,\n                        CamlinternalFormatBasics.No_precision,\n                        (CamlinternalFormatBasics.String_literal\n                           (\" argument(s)\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  CamlinternalFormatBasics.End_of_format)))))))))))))","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Int_i","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_precision","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" argument(s),\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"but is applied here to \",\n              (CamlinternalFormatBasics.Int\n                 (CamlinternalFormatBasics.Int_i,\n                   CamlinternalFormatBasics.No_padding,\n                   CamlinternalFormatBasics.No_precision,\n                   (CamlinternalFormatBasics.String_literal\n                      (\" argument(s)\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           (CamlinternalFormatBasics.Close_box,\n                             CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"but is applied here to \",\n         (CamlinternalFormatBasics.Int\n            (CamlinternalFormatBasics.Int_i,\n              CamlinternalFormatBasics.No_padding,\n              CamlinternalFormatBasics.No_precision,\n              (CamlinternalFormatBasics.String_literal\n                 (\" argument(s)\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_box,\n                        CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but is applied here to \",\n    (CamlinternalFormatBasics.Int\n       (CamlinternalFormatBasics.Int_i, CamlinternalFormatBasics.No_padding,\n         CamlinternalFormatBasics.No_precision,\n         (CamlinternalFormatBasics.String_literal\n            (\" argument(s)\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Int\n  (CamlinternalFormatBasics.Int_i, CamlinternalFormatBasics.No_padding,\n    CamlinternalFormatBasics.No_precision,\n    (CamlinternalFormatBasics.String_literal\n       (\" argument(s)\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Int_i","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_precision","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" argument(s)\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"pat_construct","text":"Label_mismatch\n(lid, err)","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The record field \",\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"belongs to the type\",\n                               CamlinternalFormatBasics.End_of_format))))))),\n              \"The record field %a@ belongs to the type\"))\n         (Style.as_inline_code longident) lid)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but is mixed here with fields of type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but is mixed here with fields of type\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The record field \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"belongs to the type\",\n                        CamlinternalFormatBasics.End_of_format))))))),\n       \"The record field %a@ belongs to the type\"))\n  (Style.as_inline_code longident) lid","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The record field \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"belongs to the type\",\n                     CamlinternalFormatBasics.End_of_format))))))),\n    \"The record field %a@ belongs to the type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The record field \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"belongs to the type\",\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"belongs to the type\", CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"belongs to the type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"belongs to the type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but is mixed here with fields of type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but is mixed here with fields of type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but is mixed here with fields of type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but is mixed here with fields of type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but is mixed here with fields of type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Pattern_type_clash\n(err, pat)","arity":2},
  {"type":"apply","text":"type_clash_of_trace err.trace","arity":1},
  {"type":"apply","text":"report_pattern_type_clash_hints pat diff","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:(Some sub) env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"This pattern matches values of type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"This pattern matches values of type\")))\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but a pattern was expected which matches values of type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but a pattern was expected which matches values of type\")))","arity":7},
  {"type":"construct","text":"Some sub","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This pattern matches values of type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"This pattern matches values of type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This pattern matches values of type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"This pattern matches values of type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This pattern matches values of type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but a pattern was expected which matches values of type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but a pattern was expected which matches values of type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but a pattern was expected which matches values of type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but a pattern was expected which matches values of type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but a pattern was expected which matches values of type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Or_pattern_type_clash\n(id, err)","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The variable \",\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.String_literal\n                        (\" on the left-hand side of this or-pattern has type\",\n                          CamlinternalFormatBasics.End_of_format))))),\n              \"The variable %a on the left-hand side of this or-pattern has type\"))\n         Style.inline_code (Ident.name id))\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but on the right-hand side it has type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but on the right-hand side it has type\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The variable \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" on the left-hand side of this or-pattern has type\",\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"The variable %a on the left-hand side of this or-pattern has type\"))\n  Style.inline_code (Ident.name id)","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The variable \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" on the left-hand side of this or-pattern has type\",\n                CamlinternalFormatBasics.End_of_format))))),\n    \"The variable %a on the left-hand side of this or-pattern has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The variable \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" on the left-hand side of this or-pattern has type\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" on the left-hand side of this or-pattern has type\",\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" on the left-hand side of this or-pattern has type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Ident.name id","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but on the right-hand side it has type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but on the right-hand side it has type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but on the right-hand side it has type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but on the right-hand side it has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but on the right-hand side it has type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Multiply_bound_variable\nname","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Variable \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" is bound several times in this matching\",\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"Variable %a is bound several times in this matching\"))\n  Style.inline_code name","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Variable \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" is bound several times in this matching\",\n                CamlinternalFormatBasics.End_of_format))))),\n    \"Variable %a is bound several times in this matching\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Variable \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is bound several times in this matching\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is bound several times in this matching\",\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is bound several times in this matching\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Orpat_vars\n(id, valid_idents)","arity":2},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"Variable \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.String_literal\n                      (\" must occur on both sides of this \",\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.String_literal\n                              (\" pattern\",\n                                CamlinternalFormatBasics.End_of_format)))))))),\n            \"Variable %a must occur on both sides of this %a pattern\"))\n       Style.inline_code (Ident.name id) Style.inline_code \"|\";\n     spellcheck_idents ppf id valid_idents) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Variable \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" must occur on both sides of this \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.String_literal\n                         (\" pattern\", CamlinternalFormatBasics.End_of_format)))))))),\n       \"Variable %a must occur on both sides of this %a pattern\"))\n  Style.inline_code (Ident.name id) Style.inline_code \"|\"","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Variable \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" must occur on both sides of this \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.String_literal\n                      (\" pattern\", CamlinternalFormatBasics.End_of_format)))))))),\n    \"Variable %a must occur on both sides of this %a pattern\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Variable \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" must occur on both sides of this \",\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.String_literal\n                  (\" pattern\", CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" must occur on both sides of this \",\n       (CamlinternalFormatBasics.Alpha\n          (CamlinternalFormatBasics.String_literal\n             (\" pattern\", CamlinternalFormatBasics.End_of_format)))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" must occur on both sides of this \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" pattern\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" pattern\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" pattern\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Ident.name id","arity":1},
  {"type":"apply","text":"spellcheck_idents ppf id valid_idents","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Expr_type_clash\n(err, explanation, exp)","arity":3},
  {"type":"apply","text":"type_clash_of_trace err.trace","arity":1},
  {"type":"apply","text":"report_expr_type_clash_hints exp diff","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:(Some sub) env err\n  ?type_expected_explanation:(Some\n                                (report_type_expected_explanation_opt\n                                   explanation))\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"This expression has type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"This expression has type\")))\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but an expression was expected of type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but an expression was expected of type\")))","arity":7},
  {"type":"construct","text":"Some sub","arity":1},
  {"type":"construct","text":"Some (report_type_expected_explanation_opt explanation)","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression has type\", CamlinternalFormatBasics.End_of_format)),\n       \"This expression has type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression has type\", CamlinternalFormatBasics.End_of_format)),\n    \"This expression has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression has type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but an expression was expected of type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but an expression was expected of type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but an expression was expected of type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but an expression was expected of type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but an expression was expected of type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Function_arity_type_clash\n{ syntactic_arity; type_constraint; trace = { trace } }","arity":1},
  {"type":"apply","text":"List.find_map (function | Errortrace.Diff diff -> Some diff | _ -> None)\n  (List.rev trace)","arity":2},
  {"type":"pat_construct","text":"Errortrace.Diff\ndiff","arity":1},
  {"type":"construct","text":"Some diff","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"List.rev trace","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Some\ndiff","arity":1},
  {"type":"construct","text":"Some ((diff.expected).ty)","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     (CamlinternalFormatBasics.End_of_format, \"\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"The syntactic arity of the function doesn't match the type constraint:\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Formatting_gen\n                             ((CamlinternalFormatBasics.Open_box\n                                 (CamlinternalFormatBasics.Format\n                                    ((CamlinternalFormatBasics.String_literal\n                                        (\"<2>\",\n                                          CamlinternalFormatBasics.End_of_format)),\n                                      \"<2>\"))),\n                               (CamlinternalFormatBasics.String_literal\n                                  (\"This function has \",\n                                    (CamlinternalFormatBasics.Int\n                                       (CamlinternalFormatBasics.Int_d,\n                                         CamlinternalFormatBasics.No_padding,\n                                         CamlinternalFormatBasics.No_precision,\n                                         (CamlinternalFormatBasics.String_literal\n                                            (\" syntactic arguments, but its type is constrained to\",\n                                              (CamlinternalFormatBasics.Formatting_lit\n                                                 ((CamlinternalFormatBasics.Break\n                                                     (\"@ \", 1, 0)),\n                                                   (CamlinternalFormatBasics.Alpha\n                                                      (CamlinternalFormatBasics.Char_literal\n                                                         ('.',\n                                                           (CamlinternalFormatBasics.Formatting_lit\n                                                              (CamlinternalFormatBasics.Close_box,\n                                                                (CamlinternalFormatBasics.Formatting_lit\n                                                                   ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),\n       \"@[@[The syntactic arity of the function doesn't match the type constraint:@ @[<2>This function has %d syntactic arguments, but its type is constrained to@ %a.@]@ @]@ @[@[<2>@{<hint>Hint@}: consider splitting the function definition into@ %a@ where %a is the pattern with the GADT constructor that@ introduces the local type equation%t.@]\"))\n  syntactic_arity (Style.as_inline_code Printtyp.type_expr) type_constraint\n  Style.inline_code \"fun ... gadt_pat -> fun ...\" Style.inline_code\n  \"gadt_pat\"\n  (fun ppf ->\n     Option.iter\n       (fprintf ppf\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\" on \",\n                   (CamlinternalFormatBasics.Alpha\n                      CamlinternalFormatBasics.End_of_format))), \" on %a\"))\n          (Style.as_inline_code Printtyp.type_expr)) type_with_local_equation)","arity":12},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  (CamlinternalFormatBasics.End_of_format, \"\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"The syntactic arity of the function doesn't match the type constraint:\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Formatting_gen\n                          ((CamlinternalFormatBasics.Open_box\n                              (CamlinternalFormatBasics.Format\n                                 ((CamlinternalFormatBasics.String_literal\n                                     (\"<2>\",\n                                       CamlinternalFormatBasics.End_of_format)),\n                                   \"<2>\"))),\n                            (CamlinternalFormatBasics.String_literal\n                               (\"This function has \",\n                                 (CamlinternalFormatBasics.Int\n                                    (CamlinternalFormatBasics.Int_d,\n                                      CamlinternalFormatBasics.No_padding,\n                                      CamlinternalFormatBasics.No_precision,\n                                      (CamlinternalFormatBasics.String_literal\n                                         (\" syntactic arguments, but its type is constrained to\",\n                                           (CamlinternalFormatBasics.Formatting_lit\n                                              ((CamlinternalFormatBasics.Break\n                                                  (\"@ \", 1, 0)),\n                                                (CamlinternalFormatBasics.Alpha\n                                                   (CamlinternalFormatBasics.Char_literal\n                                                      ('.',\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           (CamlinternalFormatBasics.Close_box,\n                                                             (CamlinternalFormatBasics.Formatting_lit\n                                                                ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),\n    \"@[@[The syntactic arity of the function doesn't match the type constraint:@ @[<2>This function has %d syntactic arguments, but its type is constrained to@ %a.@]@ @]@ @[@[<2>@{<hint>Hint@}: consider splitting the function definition into@ %a@ where %a is the pattern with the GADT constructor that@ introduces the local type equation%t.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              (CamlinternalFormatBasics.End_of_format, \"\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"The syntactic arity of the function doesn't match the type constraint:\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_box\n                          (CamlinternalFormatBasics.Format\n                             ((CamlinternalFormatBasics.String_literal\n                                 (\"<2>\",\n                                   CamlinternalFormatBasics.End_of_format)),\n                               \"<2>\"))),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"This function has \",\n                             (CamlinternalFormatBasics.Int\n                                (CamlinternalFormatBasics.Int_d,\n                                  CamlinternalFormatBasics.No_padding,\n                                  CamlinternalFormatBasics.No_precision,\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\" syntactic arguments, but its type is constrained to\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Char_literal\n                                                  ('.',\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@ \", 1, 0)),\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 (CamlinternalFormatBasics.Close_box,\n                                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"The syntactic arity of the function doesn't match the type constraint:\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_box\n                     (CamlinternalFormatBasics.Format\n                        ((CamlinternalFormatBasics.String_literal\n                            (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                          \"<2>\"))),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"This function has \",\n                        (CamlinternalFormatBasics.Int\n                           (CamlinternalFormatBasics.Int_d,\n                             CamlinternalFormatBasics.No_padding,\n                             CamlinternalFormatBasics.No_precision,\n                             (CamlinternalFormatBasics.String_literal\n                                (\" syntactic arguments, but its type is constrained to\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.Alpha\n                                          (CamlinternalFormatBasics.Char_literal\n                                             ('.',\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            (CamlinternalFormatBasics.Close_box,\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                   (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The syntactic arity of the function doesn't match the type constraint:\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   ((CamlinternalFormatBasics.String_literal\n                       (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                     \"<2>\"))),\n              (CamlinternalFormatBasics.String_literal\n                 (\"This function has \",\n                   (CamlinternalFormatBasics.Int\n                      (CamlinternalFormatBasics.Int_d,\n                        CamlinternalFormatBasics.No_padding,\n                        CamlinternalFormatBasics.No_precision,\n                        (CamlinternalFormatBasics.String_literal\n                           (\" syntactic arguments, but its type is constrained to\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Char_literal\n                                        ('.',\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@ \", 1, 0)),\n                                                              (CamlinternalFormatBasics.Formatting_gen\n                                                                 ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                                   (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"This function has \",\n              (CamlinternalFormatBasics.Int\n                 (CamlinternalFormatBasics.Int_d,\n                   CamlinternalFormatBasics.No_padding,\n                   CamlinternalFormatBasics.No_precision,\n                   (CamlinternalFormatBasics.String_literal\n                      (\" syntactic arguments, but its type is constrained to\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Char_literal\n                                   ('.',\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.Formatting_gen\n                                                            ((CamlinternalFormatBasics.Open_box\n                                                                (CamlinternalFormatBasics.Format\n                                                                   (CamlinternalFormatBasics.End_of_format,\n                                                                    \"\"))),\n                                                              (CamlinternalFormatBasics.Formatting_gen\n                                                                 ((CamlinternalFormatBasics.Open_box\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                                   (CamlinternalFormatBasics.Formatting_gen\n                                                                    ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This function has \",\n         (CamlinternalFormatBasics.Int\n            (CamlinternalFormatBasics.Int_d,\n              CamlinternalFormatBasics.No_padding,\n              CamlinternalFormatBasics.No_precision,\n              (CamlinternalFormatBasics.String_literal\n                 (\" syntactic arguments, but its type is constrained to\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Char_literal\n                              ('.',\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                       ((CamlinternalFormatBasics.Open_box\n                                                           (CamlinternalFormatBasics.Format\n                                                              (CamlinternalFormatBasics.End_of_format,\n                                                                \"\"))),\n                                                         (CamlinternalFormatBasics.Formatting_gen\n                                                            ((CamlinternalFormatBasics.Open_box\n                                                                (CamlinternalFormatBasics.Format\n                                                                   ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<2>\"))),\n                                                              (CamlinternalFormatBasics.Formatting_gen\n                                                                 ((CamlinternalFormatBasics.Open_tag\n                                                                    (CamlinternalFormatBasics.Format\n                                                                    ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                                   (CamlinternalFormatBasics.String_literal\n                                                                    (\"Hint\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This function has \",\n    (CamlinternalFormatBasics.Int\n       (CamlinternalFormatBasics.Int_d, CamlinternalFormatBasics.No_padding,\n         CamlinternalFormatBasics.No_precision,\n         (CamlinternalFormatBasics.String_literal\n            (\" syntactic arguments, but its type is constrained to\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Char_literal\n                         ('.',\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.Formatting_gen\n                                                  ((CamlinternalFormatBasics.Open_box\n                                                      (CamlinternalFormatBasics.Format\n                                                         (CamlinternalFormatBasics.End_of_format,\n                                                           \"\"))),\n                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                       ((CamlinternalFormatBasics.Open_box\n                                                           (CamlinternalFormatBasics.Format\n                                                              ((CamlinternalFormatBasics.String_literal\n                                                                  (\"<2>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                \"<2>\"))),\n                                                         (CamlinternalFormatBasics.Formatting_gen\n                                                            ((CamlinternalFormatBasics.Open_tag\n                                                                (CamlinternalFormatBasics.Format\n                                                                   ((CamlinternalFormatBasics.String_literal\n                                                                    (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                    \"<hint>\"))),\n                                                              (CamlinternalFormatBasics.String_literal\n                                                                 (\"Hint\",\n                                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_tag,\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Int\n  (CamlinternalFormatBasics.Int_d, CamlinternalFormatBasics.No_padding,\n    CamlinternalFormatBasics.No_precision,\n    (CamlinternalFormatBasics.String_literal\n       (\" syntactic arguments, but its type is constrained to\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Char_literal\n                    ('.',\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.Formatting_gen\n                                             ((CamlinternalFormatBasics.Open_box\n                                                 (CamlinternalFormatBasics.Format\n                                                    (CamlinternalFormatBasics.End_of_format,\n                                                      \"\"))),\n                                               (CamlinternalFormatBasics.Formatting_gen\n                                                  ((CamlinternalFormatBasics.Open_box\n                                                      (CamlinternalFormatBasics.Format\n                                                         ((CamlinternalFormatBasics.String_literal\n                                                             (\"<2>\",\n                                                               CamlinternalFormatBasics.End_of_format)),\n                                                           \"<2>\"))),\n                                                    (CamlinternalFormatBasics.Formatting_gen\n                                                       ((CamlinternalFormatBasics.Open_tag\n                                                           (CamlinternalFormatBasics.Format\n                                                              ((CamlinternalFormatBasics.String_literal\n                                                                  (\"<hint>\",\n                                                                    CamlinternalFormatBasics.End_of_format)),\n                                                                \"<hint>\"))),\n                                                         (CamlinternalFormatBasics.String_literal\n                                                            (\"Hint\",\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 (CamlinternalFormatBasics.Close_tag,\n                                                                   (CamlinternalFormatBasics.String_literal\n                                                                    (\": consider splitting the function definition into\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))))","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Int_d","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.No_precision","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" syntactic arguments, but its type is constrained to\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Char_literal\n               ('.',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.Formatting_gen\n                                        ((CamlinternalFormatBasics.Open_box\n                                            (CamlinternalFormatBasics.Format\n                                               (CamlinternalFormatBasics.End_of_format,\n                                                 \"\"))),\n                                          (CamlinternalFormatBasics.Formatting_gen\n                                             ((CamlinternalFormatBasics.Open_box\n                                                 (CamlinternalFormatBasics.Format\n                                                    ((CamlinternalFormatBasics.String_literal\n                                                        (\"<2>\",\n                                                          CamlinternalFormatBasics.End_of_format)),\n                                                      \"<2>\"))),\n                                               (CamlinternalFormatBasics.Formatting_gen\n                                                  ((CamlinternalFormatBasics.Open_tag\n                                                      (CamlinternalFormatBasics.Format\n                                                         ((CamlinternalFormatBasics.String_literal\n                                                             (\"<hint>\",\n                                                               CamlinternalFormatBasics.End_of_format)),\n                                                           \"<hint>\"))),\n                                                    (CamlinternalFormatBasics.String_literal\n                                                       (\"Hint\",\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            (CamlinternalFormatBasics.Close_tag,\n                                                              (CamlinternalFormatBasics.String_literal\n                                                                 (\": consider splitting the function definition into\",\n                                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Char_literal\n          ('.',\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.Formatting_gen\n                                   ((CamlinternalFormatBasics.Open_box\n                                       (CamlinternalFormatBasics.Format\n                                          (CamlinternalFormatBasics.End_of_format,\n                                            \"\"))),\n                                     (CamlinternalFormatBasics.Formatting_gen\n                                        ((CamlinternalFormatBasics.Open_box\n                                            (CamlinternalFormatBasics.Format\n                                               ((CamlinternalFormatBasics.String_literal\n                                                   (\"<2>\",\n                                                     CamlinternalFormatBasics.End_of_format)),\n                                                 \"<2>\"))),\n                                          (CamlinternalFormatBasics.Formatting_gen\n                                             ((CamlinternalFormatBasics.Open_tag\n                                                 (CamlinternalFormatBasics.Format\n                                                    ((CamlinternalFormatBasics.String_literal\n                                                        (\"<hint>\",\n                                                          CamlinternalFormatBasics.End_of_format)),\n                                                      \"<hint>\"))),\n                                               (CamlinternalFormatBasics.String_literal\n                                                  (\"Hint\",\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_tag,\n                                                         (CamlinternalFormatBasics.String_literal\n                                                            (\": consider splitting the function definition into\",\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                   (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Char_literal\n     ('.',\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.Formatting_gen\n                              ((CamlinternalFormatBasics.Open_box\n                                  (CamlinternalFormatBasics.Format\n                                     (CamlinternalFormatBasics.End_of_format,\n                                       \"\"))),\n                                (CamlinternalFormatBasics.Formatting_gen\n                                   ((CamlinternalFormatBasics.Open_box\n                                       (CamlinternalFormatBasics.Format\n                                          ((CamlinternalFormatBasics.String_literal\n                                              (\"<2>\",\n                                                CamlinternalFormatBasics.End_of_format)),\n                                            \"<2>\"))),\n                                     (CamlinternalFormatBasics.Formatting_gen\n                                        ((CamlinternalFormatBasics.Open_tag\n                                            (CamlinternalFormatBasics.Format\n                                               ((CamlinternalFormatBasics.String_literal\n                                                   (\"<hint>\",\n                                                     CamlinternalFormatBasics.End_of_format)),\n                                                 \"<hint>\"))),\n                                          (CamlinternalFormatBasics.String_literal\n                                             (\"Hint\",\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_tag,\n                                                    (CamlinternalFormatBasics.String_literal\n                                                       (\": consider splitting the function definition into\",\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@ \", 1, 0)),\n                                                              (CamlinternalFormatBasics.Alpha\n                                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Formatting_gen\n                           ((CamlinternalFormatBasics.Open_box\n                               (CamlinternalFormatBasics.Format\n                                  (CamlinternalFormatBasics.End_of_format,\n                                    \"\"))),\n                             (CamlinternalFormatBasics.Formatting_gen\n                                ((CamlinternalFormatBasics.Open_box\n                                    (CamlinternalFormatBasics.Format\n                                       ((CamlinternalFormatBasics.String_literal\n                                           (\"<2>\",\n                                             CamlinternalFormatBasics.End_of_format)),\n                                         \"<2>\"))),\n                                  (CamlinternalFormatBasics.Formatting_gen\n                                     ((CamlinternalFormatBasics.Open_tag\n                                         (CamlinternalFormatBasics.Format\n                                            ((CamlinternalFormatBasics.String_literal\n                                                (\"<hint>\",\n                                                  CamlinternalFormatBasics.End_of_format)),\n                                              \"<hint>\"))),\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"Hint\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_tag,\n                                                 (CamlinternalFormatBasics.String_literal\n                                                    (\": consider splitting the function definition into\",\n                                                      (CamlinternalFormatBasics.Formatting_lit\n                                                         ((CamlinternalFormatBasics.Break\n                                                             (\"@ \", 1, 0)),\n                                                           (CamlinternalFormatBasics.Alpha\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                   (CamlinternalFormatBasics.String_literal\n                                                                    (\"where \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_box\n                          (CamlinternalFormatBasics.Format\n                             (CamlinternalFormatBasics.End_of_format, \"\"))),\n                        (CamlinternalFormatBasics.Formatting_gen\n                           ((CamlinternalFormatBasics.Open_box\n                               (CamlinternalFormatBasics.Format\n                                  ((CamlinternalFormatBasics.String_literal\n                                      (\"<2>\",\n                                        CamlinternalFormatBasics.End_of_format)),\n                                    \"<2>\"))),\n                             (CamlinternalFormatBasics.Formatting_gen\n                                ((CamlinternalFormatBasics.Open_tag\n                                    (CamlinternalFormatBasics.Format\n                                       ((CamlinternalFormatBasics.String_literal\n                                           (\"<hint>\",\n                                             CamlinternalFormatBasics.End_of_format)),\n                                         \"<hint>\"))),\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\"Hint\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_tag,\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\": consider splitting the function definition into\",\n                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                    ((CamlinternalFormatBasics.Break\n                                                        (\"@ \", 1, 0)),\n                                                      (CamlinternalFormatBasics.Alpha\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@ \", 1, 0)),\n                                                              (CamlinternalFormatBasics.String_literal\n                                                                 (\"where \",\n                                                                   (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_box\n                     (CamlinternalFormatBasics.Format\n                        (CamlinternalFormatBasics.End_of_format, \"\"))),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_box\n                          (CamlinternalFormatBasics.Format\n                             ((CamlinternalFormatBasics.String_literal\n                                 (\"<2>\",\n                                   CamlinternalFormatBasics.End_of_format)),\n                               \"<2>\"))),\n                        (CamlinternalFormatBasics.Formatting_gen\n                           ((CamlinternalFormatBasics.Open_tag\n                               (CamlinternalFormatBasics.Format\n                                  ((CamlinternalFormatBasics.String_literal\n                                      (\"<hint>\",\n                                        CamlinternalFormatBasics.End_of_format)),\n                                    \"<hint>\"))),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"Hint\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_tag,\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\": consider splitting the function definition into\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               ((CamlinternalFormatBasics.Break\n                                                   (\"@ \", 1, 0)),\n                                                 (CamlinternalFormatBasics.Alpha\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.String_literal\n                                                            (\"where \",\n                                                              (CamlinternalFormatBasics.Alpha\n                                                                 (CamlinternalFormatBasics.String_literal\n                                                                    (\" is the pattern with the GADT constructor that\",\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   (CamlinternalFormatBasics.End_of_format, \"\"))),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_box\n                     (CamlinternalFormatBasics.Format\n                        ((CamlinternalFormatBasics.String_literal\n                            (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                          \"<2>\"))),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_tag\n                          (CamlinternalFormatBasics.Format\n                             ((CamlinternalFormatBasics.String_literal\n                                 (\"<hint>\",\n                                   CamlinternalFormatBasics.End_of_format)),\n                               \"<hint>\"))),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"Hint\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_tag,\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\": consider splitting the function definition into\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.String_literal\n                                                       (\"where \",\n                                                         (CamlinternalFormatBasics.Alpha\n                                                            (CamlinternalFormatBasics.String_literal\n                                                               (\" is the pattern with the GADT constructor that\",\n                                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              (CamlinternalFormatBasics.End_of_format, \"\"))),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   ((CamlinternalFormatBasics.String_literal\n                       (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                     \"<2>\"))),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_tag\n                     (CamlinternalFormatBasics.Format\n                        ((CamlinternalFormatBasics.String_literal\n                            (\"<hint>\",\n                              CamlinternalFormatBasics.End_of_format)),\n                          \"<hint>\"))),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"Hint\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           (CamlinternalFormatBasics.Close_tag,\n                             (CamlinternalFormatBasics.String_literal\n                                (\": consider splitting the function definition into\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.Alpha\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.String_literal\n                                                  (\"where \",\n                                                    (CamlinternalFormatBasics.Alpha\n                                                       (CamlinternalFormatBasics.String_literal\n                                                          (\" is the pattern with the GADT constructor that\",\n                                                            (CamlinternalFormatBasics.Formatting_lit\n                                                               ((CamlinternalFormatBasics.Break\n                                                                   (\"@ \", 1,\n                                                                    0)),\n                                                                 (CamlinternalFormatBasics.String_literal\n                                                                    (\"introduces the local type equation\",\n                                                                    (CamlinternalFormatBasics.Theta\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_tag\n                (CamlinternalFormatBasics.Format\n                   ((CamlinternalFormatBasics.String_literal\n                       (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                     \"<hint>\"))),\n              (CamlinternalFormatBasics.String_literal\n                 (\"Hint\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_tag,\n                        (CamlinternalFormatBasics.String_literal\n                           (\": consider splitting the function definition into\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String_literal\n                                             (\"where \",\n                                               (CamlinternalFormatBasics.Alpha\n                                                  (CamlinternalFormatBasics.String_literal\n                                                     (\" is the pattern with the GADT constructor that\",\n                                                       (CamlinternalFormatBasics.Formatting_lit\n                                                          ((CamlinternalFormatBasics.Break\n                                                              (\"@ \", 1, 0)),\n                                                            (CamlinternalFormatBasics.String_literal\n                                                               (\"introduces the local type equation\",\n                                                                 (CamlinternalFormatBasics.Theta\n                                                                    (\n                                                                    CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_tag\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                \"<hint>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"Hint\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_tag,\n                   (CamlinternalFormatBasics.String_literal\n                      (\": consider splitting the function definition into\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\"where \",\n                                          (CamlinternalFormatBasics.Alpha\n                                             (CamlinternalFormatBasics.String_literal\n                                                (\" is the pattern with the GADT constructor that\",\n                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                     ((CamlinternalFormatBasics.Break\n                                                         (\"@ \", 1, 0)),\n                                                       (CamlinternalFormatBasics.String_literal\n                                                          (\"introduces the local type equation\",\n                                                            (CamlinternalFormatBasics.Theta\n                                                               (CamlinternalFormatBasics.Char_literal\n                                                                  ('.',\n                                                                    (\n                                                                    CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_tag\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Hint\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_tag,\n              (CamlinternalFormatBasics.String_literal\n                 (\": consider splitting the function definition into\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"where \",\n                                     (CamlinternalFormatBasics.Alpha\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\" is the pattern with the GADT constructor that\",\n                                             (CamlinternalFormatBasics.Formatting_lit\n                                                ((CamlinternalFormatBasics.Break\n                                                    (\"@ \", 1, 0)),\n                                                  (CamlinternalFormatBasics.String_literal\n                                                     (\"introduces the local type equation\",\n                                                       (CamlinternalFormatBasics.Theta\n                                                          (CamlinternalFormatBasics.Char_literal\n                                                             ('.',\n                                                               (CamlinternalFormatBasics.Formatting_lit\n                                                                  (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_tag\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hint>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Hint\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_tag,\n         (CamlinternalFormatBasics.String_literal\n            (\": consider splitting the function definition into\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String_literal\n                              (\"where \",\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\" is the pattern with the GADT constructor that\",\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           ((CamlinternalFormatBasics.Break\n                                               (\"@ \", 1, 0)),\n                                             (CamlinternalFormatBasics.String_literal\n                                                (\"introduces the local type equation\",\n                                                  (CamlinternalFormatBasics.Theta\n                                                     (CamlinternalFormatBasics.Char_literal\n                                                        ('.',\n                                                          (CamlinternalFormatBasics.Formatting_lit\n                                                             (CamlinternalFormatBasics.Close_box,\n                                                               CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_tag,\n    (CamlinternalFormatBasics.String_literal\n       (\": consider splitting the function definition into\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"where \",\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.String_literal\n                                 (\" is the pattern with the GADT constructor that\",\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      ((CamlinternalFormatBasics.Break\n                                          (\"@ \", 1, 0)),\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\"introduces the local type equation\",\n                                             (CamlinternalFormatBasics.Theta\n                                                (CamlinternalFormatBasics.Char_literal\n                                                   ('.',\n                                                     (CamlinternalFormatBasics.Formatting_lit\n                                                        (CamlinternalFormatBasics.Close_box,\n                                                          CamlinternalFormatBasics.End_of_format))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_tag","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\": consider splitting the function definition into\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"where \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.String_literal\n                            (\" is the pattern with the GADT constructor that\",\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@ \", 1, 0)),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"introduces the local type equation\",\n                                        (CamlinternalFormatBasics.Theta\n                                           (CamlinternalFormatBasics.Char_literal\n                                              ('.',\n                                                (CamlinternalFormatBasics.Formatting_lit\n                                                   (CamlinternalFormatBasics.Close_box,\n                                                     CamlinternalFormatBasics.End_of_format))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"where \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.String_literal\n                       (\" is the pattern with the GADT constructor that\",\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"introduces the local type equation\",\n                                   (CamlinternalFormatBasics.Theta\n                                      (CamlinternalFormatBasics.Char_literal\n                                         ('.',\n                                           (CamlinternalFormatBasics.Formatting_lit\n                                              (CamlinternalFormatBasics.Close_box,\n                                                CamlinternalFormatBasics.End_of_format))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"where \",\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.String_literal\n                  (\" is the pattern with the GADT constructor that\",\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"introduces the local type equation\",\n                              (CamlinternalFormatBasics.Theta\n                                 (CamlinternalFormatBasics.Char_literal\n                                    ('.',\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         (CamlinternalFormatBasics.Close_box,\n                                           CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"where \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" is the pattern with the GADT constructor that\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"introduces the local type equation\",\n                           (CamlinternalFormatBasics.Theta\n                              (CamlinternalFormatBasics.Char_literal\n                                 ('.',\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"where \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is the pattern with the GADT constructor that\",\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"introduces the local type equation\",\n                      (CamlinternalFormatBasics.Theta\n                         (CamlinternalFormatBasics.Char_literal\n                            ('.',\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is the pattern with the GADT constructor that\",\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"introduces the local type equation\",\n                 (CamlinternalFormatBasics.Theta\n                    (CamlinternalFormatBasics.Char_literal\n                       ('.',\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is the pattern with the GADT constructor that\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"introduces the local type equation\",\n              (CamlinternalFormatBasics.Theta\n                 (CamlinternalFormatBasics.Char_literal\n                    ('.',\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"introduces the local type equation\",\n         (CamlinternalFormatBasics.Theta\n            (CamlinternalFormatBasics.Char_literal\n               ('.',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"introduces the local type equation\",\n    (CamlinternalFormatBasics.Theta\n       (CamlinternalFormatBasics.Char_literal\n          ('.',\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta\n  (CamlinternalFormatBasics.Char_literal\n     ('.',\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"Option.iter\n  (fprintf ppf\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.String_literal\n            (\" on \",\n              (CamlinternalFormatBasics.Alpha\n                 CamlinternalFormatBasics.End_of_format))), \" on %a\"))\n     (Style.as_inline_code Printtyp.type_expr)) type_with_local_equation","arity":2},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\" on \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))), \" on %a\"))\n  (Style.as_inline_code Printtyp.type_expr)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\" on \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))), \" on %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" on \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Apply_non_function\n{ funct; func_ty; res_ty; previous_arg_loc; extra_arg_loc }","arity":1},
  {"type":"apply","text":"get_desc func_ty","arity":1},
  {"type":"pat_construct","text":"Tarrow\n(_, _, _, _)","arity":4},
  {"type":"apply","text":"get_desc res_ty","arity":1},
  {"type":"pat_construct","text":"Tconstr\n(p, _, _)","arity":3},
  {"type":"apply","text":"Path.same p Predef.path_unit","arity":2},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"report_too_many_arg_error ~funct ~func_ty ~previous_arg_loc ~extra_arg_loc\n  ~returns_unit loc","arity":6},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<2>\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"This expression has type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String\n                                          (CamlinternalFormatBasics.No_padding,\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format))))))))))))))))),\n       \"@[<v>@[<2>This expression has type@ %a@]@ %s@]\"))\n  (Style.as_inline_code Printtyp.type_expr) func_ty\n  \"This is not a function; it cannot be applied.\"","arity":7},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<2>\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"This expression has type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Formatting_lit\n                             (CamlinternalFormatBasics.Close_box,\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String\n                                       (CamlinternalFormatBasics.No_padding,\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            (CamlinternalFormatBasics.Close_box,\n                                              CamlinternalFormatBasics.End_of_format))))))))))))))))),\n    \"@[<v>@[<2>This expression has type@ %a@]@ %s@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"This expression has type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<v>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This expression has type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression has type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Apply_wrong_label\n(l, ty, extra_info)","arity":3},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"without label\", CamlinternalFormatBasics.End_of_format)),\n       \"without label\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"without label\", CamlinternalFormatBasics.End_of_format)),\n    \"without label\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"without label\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"with label \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))), \"with label %a\"))\n  Style.inline_code (prefixed_label_name l)","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"with label \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))), \"with label %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"with label \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"prefixed_label_name l","arity":1},
  {"type":"apply","text":"not extra_info","arity":1},
  {"type":"construct","text":"[]","arity":0},
  {"type":"construct","text":"[Location.msg ?loc:None\n   (CamlinternalFormatBasics.Format\n      ((CamlinternalFormatBasics.String_literal\n          (\"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\",\n            CamlinternalFormatBasics.End_of_format)),\n        \"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\"))]","arity":2},
  {"type":"apply","text":"Location.msg ?loc:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\"))","arity":2},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Since OCaml 4.11, optional arguments do not commute when -nolabels is given\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"[]","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:(Some extra_info) ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<2>\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"The function applied to this argument has type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Flush_newline,\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"This argument cannot be applied \",\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n       \"@[<v>@[<2>The function applied to this argument has type@ %a@]@.This argument cannot be applied %a@]\"))\n  Printtyp.type_expr ty print_label l","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"Some extra_info","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<2>\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"The function applied to this argument has type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Formatting_lit\n                             (CamlinternalFormatBasics.Close_box,\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  (CamlinternalFormatBasics.Flush_newline,\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"This argument cannot be applied \",\n                                         (CamlinternalFormatBasics.Alpha\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n    \"@[<v>@[<2>The function applied to this argument has type@ %a@]@.This argument cannot be applied %a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"The function applied to this argument has type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Flush_newline,\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"This argument cannot be applied \",\n                                     (CamlinternalFormatBasics.Alpha\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<v>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"The function applied to this argument has type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Flush_newline,\n                           (CamlinternalFormatBasics.String_literal\n                              (\"This argument cannot be applied \",\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The function applied to this argument has type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Flush_newline,\n                      (CamlinternalFormatBasics.String_literal\n                         (\"This argument cannot be applied \",\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Flush_newline,\n                 (CamlinternalFormatBasics.String_literal\n                    (\"This argument cannot be applied \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Flush_newline,\n            (CamlinternalFormatBasics.String_literal\n               (\"This argument cannot be applied \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Flush_newline,\n         (CamlinternalFormatBasics.String_literal\n            (\"This argument cannot be applied \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Flush_newline,\n    (CamlinternalFormatBasics.String_literal\n       (\"This argument cannot be applied \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Flush_newline","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This argument cannot be applied \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Label_multiply_defined\ns","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The record field label \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.String_literal\n                   (\" is defined several times\",\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"The record field label %s is defined several times\")) s","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The record field label \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.String_literal\n                (\" is defined several times\",\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"The record field label %s is defined several times\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The record field label \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" is defined several times\",\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" is defined several times\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is defined several times\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Label_missing\nlabels","arity":1},
  {"type":"apply","text":"Style.inline_code ppf (Ident.name lbl)","arity":2},
  {"type":"apply","text":"Ident.name lbl","arity":1},
  {"type":"apply","text":"List.iter\n  (fprintf ppf\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 CamlinternalFormatBasics.End_of_format))), \"@ %a\"))\n     print_label)","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_lit\n         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))), \"@ %a\")) print_label","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_lit\n      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))), \"@ %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<hov>\", CamlinternalFormatBasics.End_of_format)),\n                  \"<hov>\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Some record fields are undefined:\",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_box,\n                        CamlinternalFormatBasics.End_of_format))))))),\n       \"@[<hov>Some record fields are undefined:%a@]\")) print_labels labels","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Some record fields are undefined:\",\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format))))))),\n    \"@[<hov>Some record fields are undefined:%a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Some record fields are undefined:\",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hov>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Some record fields are undefined:\",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Label_not_mutable\nlid","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The record field \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))),\n       \"The record field %a is not mutable\"))\n  (Style.as_inline_code longident) lid","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The record field \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))),\n    \"The record field %a is not mutable\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The record field \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is not mutable\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is not mutable\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"pat_construct","text":"Wrong_name\n(eorp, ty_expected, { type_path; kind; name; valid_names })","arity":3},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     Printtyp.wrap_printing_env ~error:true env\n       (fun () ->\n          let { ty; explanation } = ty_expected in\n          if Path.is_constructor_typath type_path\n          then\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.Formatting_gen\n                     ((CamlinternalFormatBasics.Open_box\n                         (CamlinternalFormatBasics.Format\n                            (CamlinternalFormatBasics.End_of_format, \"\"))),\n                       (CamlinternalFormatBasics.String_literal\n                          (\"The field \",\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.String_literal\n                                  (\" is not part of the record argument for the \",\n                                    (CamlinternalFormatBasics.Alpha\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\" constructor\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format)))))))))))),\n                   \"@[The field %a is not part of the record argument for the %a constructor@]\"))\n              Style.inline_code name.txt\n              (Style.as_inline_code Printtyp.type_path) type_path\n          else\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.Formatting_gen\n                     ((CamlinternalFormatBasics.Open_box\n                         (CamlinternalFormatBasics.Format\n                            (CamlinternalFormatBasics.End_of_format, \"\"))),\n                       (CamlinternalFormatBasics.Formatting_gen\n                          ((CamlinternalFormatBasics.Open_box\n                              (CamlinternalFormatBasics.Format\n                                 ((CamlinternalFormatBasics.String_literal\n                                     (\"<2>\",\n                                       CamlinternalFormatBasics.End_of_format)),\n                                   \"<2>\"))),\n                            (CamlinternalFormatBasics.String\n                               (CamlinternalFormatBasics.No_padding,\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\" type\",\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         ((CamlinternalFormatBasics.Break\n                                             (\"@ \", 1, 0)),\n                                           (CamlinternalFormatBasics.Alpha\n                                              (CamlinternalFormatBasics.Theta\n                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                    (CamlinternalFormatBasics.Close_box,\n                                                      (CamlinternalFormatBasics.Formatting_lit\n                                                         ((CamlinternalFormatBasics.Break\n                                                             (\"@ \", 1, 0)),\n                                                           (CamlinternalFormatBasics.String_literal\n                                                              (\"There is no \",\n                                                                (CamlinternalFormatBasics.String\n                                                                   (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    (' ',\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" within type \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))),\n                   \"@[@[<2>%s type@ %a%t@]@ There is no %s %a within type %a@]\"))\n              eorp (Style.as_inline_code Printtyp.type_expr) ty\n              (report_type_expected_explanation_opt explanation)\n              (Datatype_kind.label_name kind) Style.inline_code name.txt\n              (Style.as_inline_code Printtyp.type_path) type_path;\n          spellcheck ppf name.txt valid_names)) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.wrap_printing_env ~error:true env\n  (fun () ->\n     let { ty; explanation } = ty_expected in\n     if Path.is_constructor_typath type_path\n     then\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.Formatting_gen\n                ((CamlinternalFormatBasics.Open_box\n                    (CamlinternalFormatBasics.Format\n                       (CamlinternalFormatBasics.End_of_format, \"\"))),\n                  (CamlinternalFormatBasics.String_literal\n                     (\"The field \",\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.String_literal\n                             (\" is not part of the record argument for the \",\n                               (CamlinternalFormatBasics.Alpha\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\" constructor\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_box,\n                                            CamlinternalFormatBasics.End_of_format)))))))))))),\n              \"@[The field %a is not part of the record argument for the %a constructor@]\"))\n         Style.inline_code name.txt (Style.as_inline_code Printtyp.type_path)\n         type_path\n     else\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.Formatting_gen\n                ((CamlinternalFormatBasics.Open_box\n                    (CamlinternalFormatBasics.Format\n                       (CamlinternalFormatBasics.End_of_format, \"\"))),\n                  (CamlinternalFormatBasics.Formatting_gen\n                     ((CamlinternalFormatBasics.Open_box\n                         (CamlinternalFormatBasics.Format\n                            ((CamlinternalFormatBasics.String_literal\n                                (\"<2>\",\n                                  CamlinternalFormatBasics.End_of_format)),\n                              \"<2>\"))),\n                       (CamlinternalFormatBasics.String\n                          (CamlinternalFormatBasics.No_padding,\n                            (CamlinternalFormatBasics.String_literal\n                               (\" type\",\n                                 (CamlinternalFormatBasics.Formatting_lit\n                                    ((CamlinternalFormatBasics.Break\n                                        (\"@ \", 1, 0)),\n                                      (CamlinternalFormatBasics.Alpha\n                                         (CamlinternalFormatBasics.Theta\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                    ((CamlinternalFormatBasics.Break\n                                                        (\"@ \", 1, 0)),\n                                                      (CamlinternalFormatBasics.String_literal\n                                                         (\"There is no \",\n                                                           (CamlinternalFormatBasics.String\n                                                              (CamlinternalFormatBasics.No_padding,\n                                                                (CamlinternalFormatBasics.Char_literal\n                                                                   (' ',\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.String_literal\n                                                                    (\" within type \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))),\n              \"@[@[<2>%s type@ %a%t@]@ There is no %s %a within type %a@]\"))\n         eorp (Style.as_inline_code Printtyp.type_expr) ty\n         (report_type_expected_explanation_opt explanation)\n         (Datatype_kind.label_name kind) Style.inline_code name.txt\n         (Style.as_inline_code Printtyp.type_path) type_path;\n     spellcheck ppf name.txt valid_names)","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Path.is_constructor_typath type_path","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"The field \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.String_literal\n                      (\" is not part of the record argument for the \",\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.String_literal\n                              (\" constructor\",\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format)))))))))))),\n       \"@[The field %a is not part of the record argument for the %a constructor@]\"))\n  Style.inline_code name.txt (Style.as_inline_code Printtyp.type_path)\n  type_path","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"The field \",\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.String_literal\n                   (\" is not part of the record argument for the \",\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.String_literal\n                           (\" constructor\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  CamlinternalFormatBasics.End_of_format)))))))))))),\n    \"@[The field %a is not part of the record argument for the %a constructor@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"The field \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" is not part of the record argument for the \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.String_literal\n                       (\" constructor\",\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The field \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is not part of the record argument for the \",\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.String_literal\n                  (\" constructor\",\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is not part of the record argument for the \",\n       (CamlinternalFormatBasics.Alpha\n          (CamlinternalFormatBasics.String_literal\n             (\" constructor\",\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is not part of the record argument for the \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" constructor\",\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" constructor\",\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" constructor\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_path","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<2>\"))),\n                (CamlinternalFormatBasics.String\n                   (CamlinternalFormatBasics.No_padding,\n                     (CamlinternalFormatBasics.String_literal\n                        (\" type\",\n                          (CamlinternalFormatBasics.Formatting_lit\n                             ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                               (CamlinternalFormatBasics.Alpha\n                                  (CamlinternalFormatBasics.Theta\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.String_literal\n                                                  (\"There is no \",\n                                                    (CamlinternalFormatBasics.String\n                                                       (CamlinternalFormatBasics.No_padding,\n                                                         (CamlinternalFormatBasics.Char_literal\n                                                            (' ',\n                                                              (CamlinternalFormatBasics.Alpha\n                                                                 (CamlinternalFormatBasics.String_literal\n                                                                    (\" within type \",\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))),\n       \"@[@[<2>%s type@ %a%t@]@ There is no %s %a within type %a@]\")) eorp\n  (Style.as_inline_code Printtyp.type_expr) ty\n  (report_type_expected_explanation_opt explanation)\n  (Datatype_kind.label_name kind) Style.inline_code name.txt\n  (Style.as_inline_code Printtyp.type_path) type_path","arity":11},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<2>\"))),\n             (CamlinternalFormatBasics.String\n                (CamlinternalFormatBasics.No_padding,\n                  (CamlinternalFormatBasics.String_literal\n                     (\" type\",\n                       (CamlinternalFormatBasics.Formatting_lit\n                          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.Theta\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_box,\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\"There is no \",\n                                                 (CamlinternalFormatBasics.String\n                                                    (CamlinternalFormatBasics.No_padding,\n                                                      (CamlinternalFormatBasics.Char_literal\n                                                         (' ',\n                                                           (CamlinternalFormatBasics.Alpha\n                                                              (CamlinternalFormatBasics.String_literal\n                                                                 (\" within type \",\n                                                                   (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))),\n    \"@[@[<2>%s type@ %a%t@]@ There is no %s %a within type %a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.String_literal\n                 (\" type\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Theta\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      ((CamlinternalFormatBasics.Break\n                                          (\"@ \", 1, 0)),\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\"There is no \",\n                                             (CamlinternalFormatBasics.String\n                                                (CamlinternalFormatBasics.No_padding,\n                                                  (CamlinternalFormatBasics.Char_literal\n                                                     (' ',\n                                                       (CamlinternalFormatBasics.Alpha\n                                                          (CamlinternalFormatBasics.String_literal\n                                                             (\" within type \",\n                                                               (CamlinternalFormatBasics.Alpha\n                                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Theta\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@ \", 1, 0)),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"There is no \",\n                                        (CamlinternalFormatBasics.String\n                                           (CamlinternalFormatBasics.No_padding,\n                                             (CamlinternalFormatBasics.Char_literal\n                                                (' ',\n                                                  (CamlinternalFormatBasics.Alpha\n                                                     (CamlinternalFormatBasics.String_literal\n                                                        (\" within type \",\n                                                          (CamlinternalFormatBasics.Alpha\n                                                             (CamlinternalFormatBasics.Formatting_lit\n                                                                (CamlinternalFormatBasics.Close_box,\n                                                                  CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Theta\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"There is no \",\n                                   (CamlinternalFormatBasics.String\n                                      (CamlinternalFormatBasics.No_padding,\n                                        (CamlinternalFormatBasics.Char_literal\n                                           (' ',\n                                             (CamlinternalFormatBasics.Alpha\n                                                (CamlinternalFormatBasics.String_literal\n                                                   (\" within type \",\n                                                     (CamlinternalFormatBasics.Alpha\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           (CamlinternalFormatBasics.Close_box,\n                                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Theta\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"There is no \",\n                              (CamlinternalFormatBasics.String\n                                 (CamlinternalFormatBasics.No_padding,\n                                   (CamlinternalFormatBasics.Char_literal\n                                      (' ',\n                                        (CamlinternalFormatBasics.Alpha\n                                           (CamlinternalFormatBasics.String_literal\n                                              (\" within type \",\n                                                (CamlinternalFormatBasics.Alpha\n                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                      (CamlinternalFormatBasics.Close_box,\n                                                        CamlinternalFormatBasics.End_of_format)))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Theta\n          (CamlinternalFormatBasics.Formatting_lit\n             (CamlinternalFormatBasics.Close_box,\n               (CamlinternalFormatBasics.Formatting_lit\n                  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                    (CamlinternalFormatBasics.String_literal\n                       (\"There is no \",\n                         (CamlinternalFormatBasics.String\n                            (CamlinternalFormatBasics.No_padding,\n                              (CamlinternalFormatBasics.Char_literal\n                                 (' ',\n                                   (CamlinternalFormatBasics.Alpha\n                                      (CamlinternalFormatBasics.String_literal\n                                         (\" within type \",\n                                           (CamlinternalFormatBasics.Alpha\n                                              (CamlinternalFormatBasics.Formatting_lit\n                                                 (CamlinternalFormatBasics.Close_box,\n                                                   CamlinternalFormatBasics.End_of_format)))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Theta\n     (CamlinternalFormatBasics.Formatting_lit\n        (CamlinternalFormatBasics.Close_box,\n          (CamlinternalFormatBasics.Formatting_lit\n             ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n               (CamlinternalFormatBasics.String_literal\n                  (\"There is no \",\n                    (CamlinternalFormatBasics.String\n                       (CamlinternalFormatBasics.No_padding,\n                         (CamlinternalFormatBasics.Char_literal\n                            (' ',\n                              (CamlinternalFormatBasics.Alpha\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\" within type \",\n                                      (CamlinternalFormatBasics.Alpha\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            (CamlinternalFormatBasics.Close_box,\n                                              CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"There is no \",\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Char_literal\n                         (' ',\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.String_literal\n                                 (\" within type \",\n                                   (CamlinternalFormatBasics.Alpha\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         (CamlinternalFormatBasics.Close_box,\n                                           CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"There is no \",\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Char_literal\n                      (' ',\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.String_literal\n                              (\" within type \",\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"There is no \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Char_literal\n                 (' ',\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.String_literal\n                         (\" within type \",\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"There is no \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            (' ',\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.String_literal\n                    (\" within type \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       (' ',\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" within type \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (' ',\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" within type \",\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" within type \",\n       (CamlinternalFormatBasics.Alpha\n          (CamlinternalFormatBasics.Formatting_lit\n             (CamlinternalFormatBasics.Close_box,\n               CamlinternalFormatBasics.End_of_format)))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" within type \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"apply","text":"Datatype_kind.label_name kind","arity":1},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_path","arity":1},
  {"type":"apply","text":"spellcheck ppf name.txt valid_names","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Name_type_mismatch\n(kind, lid, tp, tpl)","arity":4},
  {"type":"apply","text":"Datatype_kind.type_name kind","arity":1},
  {"type":"apply","text":"Datatype_kind.label_name kind","arity":1},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     Printtyp.report_ambiguous_type_error ppf env tp tpl\n       (function\n        | ppf ->\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"The \",\n                       (CamlinternalFormatBasics.String\n                          (CamlinternalFormatBasics.No_padding,\n                            (CamlinternalFormatBasics.Char_literal\n                               (' ',\n                                 (CamlinternalFormatBasics.Alpha\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       ((CamlinternalFormatBasics.Break\n                                           (\"@ \", 1, 0)),\n                                         (CamlinternalFormatBasics.String_literal\n                                            (\"belongs to the \",\n                                              (CamlinternalFormatBasics.String\n                                                 (CamlinternalFormatBasics.No_padding,\n                                                   (CamlinternalFormatBasics.String_literal\n                                                      (\" type\",\n                                                        CamlinternalFormatBasics.End_of_format))))))))))))))),\n                   \"The %s %a@ belongs to the %s type\")) name\n              (Style.as_inline_code longident) lid type_name)\n       (function\n        | ppf ->\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"The \",\n                       (CamlinternalFormatBasics.String\n                          (CamlinternalFormatBasics.No_padding,\n                            (CamlinternalFormatBasics.Char_literal\n                               (' ',\n                                 (CamlinternalFormatBasics.Alpha\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       ((CamlinternalFormatBasics.Break\n                                           (\"@ \", 1, 0)),\n                                         (CamlinternalFormatBasics.String_literal\n                                            (\"belongs to one of the following \",\n                                              (CamlinternalFormatBasics.String\n                                                 (CamlinternalFormatBasics.No_padding,\n                                                   (CamlinternalFormatBasics.String_literal\n                                                      (\" types:\",\n                                                        CamlinternalFormatBasics.End_of_format))))))))))))))),\n                   \"The %s %a@ belongs to one of the following %s types:\"))\n              name (Style.as_inline_code longident) lid type_name)\n       (function\n        | ppf ->\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"but a \",\n                       (CamlinternalFormatBasics.String\n                          (CamlinternalFormatBasics.No_padding,\n                            (CamlinternalFormatBasics.String_literal\n                               (\" was expected belonging to the \",\n                                 (CamlinternalFormatBasics.String\n                                    (CamlinternalFormatBasics.No_padding,\n                                      (CamlinternalFormatBasics.String_literal\n                                         (\" type\",\n                                           CamlinternalFormatBasics.End_of_format)))))))))),\n                   \"but a %s was expected belonging to the %s type\")) name\n              type_name)) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.report_ambiguous_type_error ppf env tp tpl\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The \",\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.Char_literal\n                          (' ',\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"belongs to the \",\n                                         (CamlinternalFormatBasics.String\n                                            (CamlinternalFormatBasics.No_padding,\n                                              (CamlinternalFormatBasics.String_literal\n                                                 (\" type\",\n                                                   CamlinternalFormatBasics.End_of_format))))))))))))))),\n              \"The %s %a@ belongs to the %s type\")) name\n         (Style.as_inline_code longident) lid type_name)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The \",\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.Char_literal\n                          (' ',\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"belongs to one of the following \",\n                                         (CamlinternalFormatBasics.String\n                                            (CamlinternalFormatBasics.No_padding,\n                                              (CamlinternalFormatBasics.String_literal\n                                                 (\" types:\",\n                                                   CamlinternalFormatBasics.End_of_format))))))))))))))),\n              \"The %s %a@ belongs to one of the following %s types:\")) name\n         (Style.as_inline_code longident) lid type_name)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but a \",\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.String_literal\n                          (\" was expected belonging to the \",\n                            (CamlinternalFormatBasics.String\n                               (CamlinternalFormatBasics.No_padding,\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\" type\",\n                                      CamlinternalFormatBasics.End_of_format)))))))))),\n              \"but a %s was expected belonging to the %s type\")) name\n         type_name)","arity":7},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.Char_literal\n                   (' ',\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"belongs to the \",\n                                  (CamlinternalFormatBasics.String\n                                     (CamlinternalFormatBasics.No_padding,\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\" type\",\n                                            CamlinternalFormatBasics.End_of_format))))))))))))))),\n       \"The %s %a@ belongs to the %s type\")) name\n  (Style.as_inline_code longident) lid type_name","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.Char_literal\n                (' ',\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"belongs to the \",\n                               (CamlinternalFormatBasics.String\n                                  (CamlinternalFormatBasics.No_padding,\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\" type\",\n                                         CamlinternalFormatBasics.End_of_format))))))))))))))),\n    \"The %s %a@ belongs to the %s type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            (' ',\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"belongs to the \",\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.String_literal\n                                   (\" type\",\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       (' ',\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"belongs to the \",\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.String_literal\n                              (\" type\",\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (' ',\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"belongs to the \",\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.String_literal\n                         (\" type\", CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"belongs to the \",\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.String_literal\n                    (\" type\", CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"belongs to the \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.String_literal\n                 (\" type\", CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"belongs to the \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" type\", CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.Char_literal\n                   (' ',\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"belongs to one of the following \",\n                                  (CamlinternalFormatBasics.String\n                                     (CamlinternalFormatBasics.No_padding,\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\" types:\",\n                                            CamlinternalFormatBasics.End_of_format))))))))))))))),\n       \"The %s %a@ belongs to one of the following %s types:\")) name\n  (Style.as_inline_code longident) lid type_name","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.Char_literal\n                (' ',\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"belongs to one of the following \",\n                               (CamlinternalFormatBasics.String\n                                  (CamlinternalFormatBasics.No_padding,\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\" types:\",\n                                         CamlinternalFormatBasics.End_of_format))))))))))))))),\n    \"The %s %a@ belongs to one of the following %s types:\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            (' ',\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"belongs to one of the following \",\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.String_literal\n                                   (\" types:\",\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       (' ',\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"belongs to one of the following \",\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.String_literal\n                              (\" types:\",\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (' ',\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"belongs to one of the following \",\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.String_literal\n                         (\" types:\", CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"belongs to one of the following \",\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.String_literal\n                    (\" types:\", CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"belongs to one of the following \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.String_literal\n                 (\" types:\", CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"belongs to one of the following \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" types:\", CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" types:\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" types:\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but a \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.String_literal\n                   (\" was expected belonging to the \",\n                     (CamlinternalFormatBasics.String\n                        (CamlinternalFormatBasics.No_padding,\n                          (CamlinternalFormatBasics.String_literal\n                             (\" type\",\n                               CamlinternalFormatBasics.End_of_format)))))))))),\n       \"but a %s was expected belonging to the %s type\")) name type_name","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but a \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.String_literal\n                (\" was expected belonging to the \",\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.String_literal\n                          (\" type\", CamlinternalFormatBasics.End_of_format)))))))))),\n    \"but a %s was expected belonging to the %s type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but a \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" was expected belonging to the \",\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.String_literal\n                      (\" type\", CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" was expected belonging to the \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.String_literal\n                 (\" type\", CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" was expected belonging to the \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" type\", CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Invalid_format\nmsg","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String\n         (CamlinternalFormatBasics.No_padding,\n           CamlinternalFormatBasics.End_of_format)), \"%s\")) msg","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String\n      (CamlinternalFormatBasics.No_padding,\n        CamlinternalFormatBasics.End_of_format)), \"%s\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Not_an_object\n(ty, explanation)","arity":2},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"This expression is not an object;\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.String_literal\n                        (\"it has type \",\n                          (CamlinternalFormatBasics.Alpha\n                             CamlinternalFormatBasics.End_of_format))))))),\n            \"This expression is not an object;@ it has type %a\"))\n       (Style.as_inline_code Printtyp.type_expr) ty;\n     report_type_expected_explanation_opt explanation ppf) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression is not an object;\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"it has type \",\n                     (CamlinternalFormatBasics.Alpha\n                        CamlinternalFormatBasics.End_of_format))))))),\n       \"This expression is not an object;@ it has type %a\"))\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression is not an object;\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.String_literal\n                (\"it has type \",\n                  (CamlinternalFormatBasics.Alpha\n                     CamlinternalFormatBasics.End_of_format))))))),\n    \"This expression is not an object;@ it has type %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression is not an object;\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"it has type \",\n              (CamlinternalFormatBasics.Alpha\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"it has type \",\n         (CamlinternalFormatBasics.Alpha\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"it has type \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation ppf","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Undefined_method\n(ty, me, valid_methods)","arity":3},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     Printtyp.wrap_printing_env ~error:true env\n       (fun () ->\n          fprintf ppf\n            (CamlinternalFormatBasics.Format\n               ((CamlinternalFormatBasics.Formatting_gen\n                   ((CamlinternalFormatBasics.Open_box\n                       (CamlinternalFormatBasics.Format\n                          ((CamlinternalFormatBasics.String_literal\n                              (\"<v>\", CamlinternalFormatBasics.End_of_format)),\n                            \"<v>\"))),\n                     (CamlinternalFormatBasics.Formatting_gen\n                        ((CamlinternalFormatBasics.Open_box\n                            (CamlinternalFormatBasics.Format\n                               (CamlinternalFormatBasics.End_of_format, \"\"))),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"This expression has type\",\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@;<1 2>\", 1, 2)),\n                                    (CamlinternalFormatBasics.Alpha\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_box,\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               ((CamlinternalFormatBasics.Break\n                                                   (\"@,\", 0, 0)),\n                                                 (CamlinternalFormatBasics.String_literal\n                                                    (\"It has no method \",\n                                                      (CamlinternalFormatBasics.Alpha\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            (CamlinternalFormatBasics.Close_box,\n                                                              CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n                 \"@[<v>@[This expression has type@;<1 2>%a@]@,It has no method %a@]\"))\n            (Style.as_inline_code Printtyp.type_expr) ty Style.inline_code me;\n          (match valid_methods with\n           | None -> ()\n           | Some valid_methods -> spellcheck ppf me valid_methods))) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.wrap_printing_env ~error:true env\n  (fun () ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<v>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<v>\"))),\n                (CamlinternalFormatBasics.Formatting_gen\n                   ((CamlinternalFormatBasics.Open_box\n                       (CamlinternalFormatBasics.Format\n                          (CamlinternalFormatBasics.End_of_format, \"\"))),\n                     (CamlinternalFormatBasics.String_literal\n                        (\"This expression has type\",\n                          (CamlinternalFormatBasics.Formatting_lit\n                             ((CamlinternalFormatBasics.Break\n                                 (\"@;<1 2>\", 1, 2)),\n                               (CamlinternalFormatBasics.Alpha\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_box,\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@,\", 0, 0)),\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\"It has no method \",\n                                                 (CamlinternalFormatBasics.Alpha\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n            \"@[<v>@[This expression has type@;<1 2>%a@]@,It has no method %a@]\"))\n       (Style.as_inline_code Printtyp.type_expr) ty Style.inline_code me;\n     (match valid_methods with\n      | None -> ()\n      | Some valid_methods -> spellcheck ppf me valid_methods))","arity":3},
  {"type":"construct","text":"true","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     (CamlinternalFormatBasics.End_of_format, \"\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"This expression has type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@,\", 0, 0)),\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"It has no method \",\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n       \"@[<v>@[This expression has type@;<1 2>%a@]@,It has no method %a@]\"))\n  (Style.as_inline_code Printtyp.type_expr) ty Style.inline_code me","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  (CamlinternalFormatBasics.End_of_format, \"\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"This expression has type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Formatting_lit\n                             (CamlinternalFormatBasics.Close_box,\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@,\", 0, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"It has no method \",\n                                         (CamlinternalFormatBasics.Alpha\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n    \"@[<v>@[This expression has type@;<1 2>%a@]@,It has no method %a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              (CamlinternalFormatBasics.End_of_format, \"\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"This expression has type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"It has no method \",\n                                     (CamlinternalFormatBasics.Alpha\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<v>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This expression has type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                           (CamlinternalFormatBasics.String_literal\n                              (\"It has no method \",\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression has type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"It has no method \",\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"It has no method \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"It has no method \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"It has no method \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"It has no method \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@,\", 0, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"It has no method \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"None","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Some\nvalid_methods","arity":1},
  {"type":"apply","text":"spellcheck ppf me valid_methods","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Undefined_self_method\n(me, valid_methods)","arity":2},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"This expression has no method \",\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format))),\n            \"This expression has no method %a\")) Style.inline_code me;\n     spellcheck ppf me valid_methods) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression has no method \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"This expression has no method %a\")) Style.inline_code me","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression has no method \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"This expression has no method %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression has no method \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"spellcheck ppf me valid_methods","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Virtual_class\ncl","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Cannot instantiate the virtual class \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"Cannot instantiate the virtual class %a\"))\n  (Style.as_inline_code longident) cl","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Cannot instantiate the virtual class \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"Cannot instantiate the virtual class %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Cannot instantiate the virtual class \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"pat_construct","text":"Unbound_instance_variable\n(var, valid_vars)","arity":2},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"Unbound instance variable \",\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format))),\n            \"Unbound instance variable %a\")) Style.inline_code var;\n     spellcheck ppf var valid_vars) ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Unbound instance variable \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"Unbound instance variable %a\")) Style.inline_code var","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Unbound instance variable \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"Unbound instance variable %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Unbound instance variable \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"spellcheck ppf var valid_vars","arity":3},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Instance_variable_not_mutable\nv","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The instance variable \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))),\n       \"The instance variable %a is not mutable\")) Style.inline_code v","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The instance variable \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))),\n    \"The instance variable %a is not mutable\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The instance variable \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is not mutable\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is not mutable\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is not mutable\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Not_subtype\nerr","arity":1},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     Printtyp.Subtype.report_error ppf env err \"is not a subtype of\") ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.Subtype.report_error ppf env err \"is not a subtype of\"","arity":4},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Outside_class","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This object duplication occurs outside a method definition\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"This object duplication occurs outside a method definition\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This object duplication occurs outside a method definition\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"This object duplication occurs outside a method definition\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This object duplication occurs outside a method definition\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Value_multiply_overridden\nv","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The instance variable \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" is overridden several times\",\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"The instance variable %a is overridden several times\"))\n  Style.inline_code v","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The instance variable \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" is overridden several times\",\n                CamlinternalFormatBasics.End_of_format))))),\n    \"The instance variable %a is overridden several times\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The instance variable \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" is overridden several times\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" is overridden several times\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" is overridden several times\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Coercion_failure\n(ty_exp, err, b)","arity":3},
  {"type":"apply","text":"Location.error_of_printer ?loc:(Some loc) ?sub:None ?footnote:None\n  (fun ppf () ->\n     Printtyp.report_unification_error ppf env err\n       ?type_expected_explanation:None\n       (function\n        | ppf ->\n            let ty_exp = Printtyp.prepare_expansion ty_exp in\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"This expression cannot be coerced to type\",\n                       (CamlinternalFormatBasics.Formatting_lit\n                          ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                            (CamlinternalFormatBasics.Alpha\n                               (CamlinternalFormatBasics.Char_literal\n                                  (';',\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       ((CamlinternalFormatBasics.Break\n                                           (\"@ \", 1, 0)),\n                                         (CamlinternalFormatBasics.String_literal\n                                            (\"it has type\",\n                                              CamlinternalFormatBasics.End_of_format))))))))))),\n                   \"This expression cannot be coerced to type@;<1 2>%a;@ it has type\"))\n              (Style.as_inline_code (Printtyp.type_expansion Type)) ty_exp)\n       (function\n        | ppf ->\n            fprintf ppf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"but is here used with type\",\n                       CamlinternalFormatBasics.End_of_format)),\n                   \"but is here used with type\")));\n     if b\n     then\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.Char_literal\n                ('.',\n                  (CamlinternalFormatBasics.Formatting_lit\n                     (CamlinternalFormatBasics.Flush_newline,\n                       (CamlinternalFormatBasics.Formatting_gen\n                          ((CamlinternalFormatBasics.Open_box\n                              (CamlinternalFormatBasics.Format\n                                 ((CamlinternalFormatBasics.String_literal\n                                     (\"<hov>\",\n                                       CamlinternalFormatBasics.End_of_format)),\n                                   \"<hov>\"))),\n                            (CamlinternalFormatBasics.String_literal\n                               (\"This simple coercion was not fully general.\",\n                                 (CamlinternalFormatBasics.Formatting_lit\n                                    ((CamlinternalFormatBasics.Break\n                                        (\"@ \", 1, 0)),\n                                      (CamlinternalFormatBasics.Formatting_gen\n                                         ((CamlinternalFormatBasics.Open_tag\n                                             (CamlinternalFormatBasics.Format\n                                                ((CamlinternalFormatBasics.String_literal\n                                                    (\"<hint>\",\n                                                      CamlinternalFormatBasics.End_of_format)),\n                                                  \"<hint>\"))),\n                                           (CamlinternalFormatBasics.String_literal\n                                              (\"Hint\",\n                                                (CamlinternalFormatBasics.Formatting_lit\n                                                   (CamlinternalFormatBasics.Close_tag,\n                                                     (CamlinternalFormatBasics.String_literal\n                                                        (\": Consider using a fully explicit coercion\",\n                                                          (CamlinternalFormatBasics.Formatting_lit\n                                                             ((CamlinternalFormatBasics.Break\n                                                                 (\"@ \", 1, 0)),\n                                                               (CamlinternalFormatBasics.String_literal\n                                                                  (\"of the form: \",\n                                                                    (\n                                                                    CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))),\n              \".@.@[<hov>This simple coercion was not fully general.@ @{<hint>Hint@}: Consider using a fully explicit coercion@ of the form: %a@]\"))\n         Style.inline_code \"(foo : ty1 :> ty2)\") ()","arity":5},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Printtyp.report_unification_error ppf env err ?type_expected_explanation:None\n  (function\n   | ppf ->\n       let ty_exp = Printtyp.prepare_expansion ty_exp in\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"This expression cannot be coerced to type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Char_literal\n                             (';',\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"it has type\",\n                                         CamlinternalFormatBasics.End_of_format))))))))))),\n              \"This expression cannot be coerced to type@;<1 2>%a;@ it has type\"))\n         (Style.as_inline_code (Printtyp.type_expansion Type)) ty_exp)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but is here used with type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but is here used with type\")))","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"Printtyp.prepare_expansion ty_exp","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression cannot be coerced to type\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.Char_literal\n                      (';',\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"it has type\",\n                                  CamlinternalFormatBasics.End_of_format))))))))))),\n       \"This expression cannot be coerced to type@;<1 2>%a;@ it has type\"))\n  (Style.as_inline_code (Printtyp.type_expansion Type)) ty_exp","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression cannot be coerced to type\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Char_literal\n                   (';',\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"it has type\",\n                               CamlinternalFormatBasics.End_of_format))))))))))),\n    \"This expression cannot be coerced to type@;<1 2>%a;@ it has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression cannot be coerced to type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Char_literal\n               (';',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"it has type\",\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Char_literal\n          (';',\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"it has type\", CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@;<1 2>\", 1, 2)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Char_literal\n     (';',\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"it has type\", CamlinternalFormatBasics.End_of_format))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (';',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"it has type\", CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"it has type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"it has type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code (Printtyp.type_expansion Type)","arity":1},
  {"type":"apply","text":"Printtyp.type_expansion Type","arity":1},
  {"type":"construct","text":"Type","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but is here used with type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but is here used with type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but is here used with type\", CamlinternalFormatBasics.End_of_format)),\n    \"but is here used with type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but is here used with type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Char_literal\n         ('.',\n           (CamlinternalFormatBasics.Formatting_lit\n              (CamlinternalFormatBasics.Flush_newline,\n                (CamlinternalFormatBasics.Formatting_gen\n                   ((CamlinternalFormatBasics.Open_box\n                       (CamlinternalFormatBasics.Format\n                          ((CamlinternalFormatBasics.String_literal\n                              (\"<hov>\",\n                                CamlinternalFormatBasics.End_of_format)),\n                            \"<hov>\"))),\n                     (CamlinternalFormatBasics.String_literal\n                        (\"This simple coercion was not fully general.\",\n                          (CamlinternalFormatBasics.Formatting_lit\n                             ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                               (CamlinternalFormatBasics.Formatting_gen\n                                  ((CamlinternalFormatBasics.Open_tag\n                                      (CamlinternalFormatBasics.Format\n                                         ((CamlinternalFormatBasics.String_literal\n                                             (\"<hint>\",\n                                               CamlinternalFormatBasics.End_of_format)),\n                                           \"<hint>\"))),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"Hint\",\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            (CamlinternalFormatBasics.Close_tag,\n                                              (CamlinternalFormatBasics.String_literal\n                                                 (\": Consider using a fully explicit coercion\",\n                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                      ((CamlinternalFormatBasics.Break\n                                                          (\"@ \", 1, 0)),\n                                                        (CamlinternalFormatBasics.String_literal\n                                                           (\"of the form: \",\n                                                             (CamlinternalFormatBasics.Alpha\n                                                                (CamlinternalFormatBasics.Formatting_lit\n                                                                   (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))),\n       \".@.@[<hov>This simple coercion was not fully general.@ @{<hint>Hint@}: Consider using a fully explicit coercion@ of the form: %a@]\"))\n  Style.inline_code \"(foo : ty1 :> ty2)\"","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Char_literal\n      ('.',\n        (CamlinternalFormatBasics.Formatting_lit\n           (CamlinternalFormatBasics.Flush_newline,\n             (CamlinternalFormatBasics.Formatting_gen\n                ((CamlinternalFormatBasics.Open_box\n                    (CamlinternalFormatBasics.Format\n                       ((CamlinternalFormatBasics.String_literal\n                           (\"<hov>\", CamlinternalFormatBasics.End_of_format)),\n                         \"<hov>\"))),\n                  (CamlinternalFormatBasics.String_literal\n                     (\"This simple coercion was not fully general.\",\n                       (CamlinternalFormatBasics.Formatting_lit\n                          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                            (CamlinternalFormatBasics.Formatting_gen\n                               ((CamlinternalFormatBasics.Open_tag\n                                   (CamlinternalFormatBasics.Format\n                                      ((CamlinternalFormatBasics.String_literal\n                                          (\"<hint>\",\n                                            CamlinternalFormatBasics.End_of_format)),\n                                        \"<hint>\"))),\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\"Hint\",\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         (CamlinternalFormatBasics.Close_tag,\n                                           (CamlinternalFormatBasics.String_literal\n                                              (\": Consider using a fully explicit coercion\",\n                                                (CamlinternalFormatBasics.Formatting_lit\n                                                   ((CamlinternalFormatBasics.Break\n                                                       (\"@ \", 1, 0)),\n                                                     (CamlinternalFormatBasics.String_literal\n                                                        (\"of the form: \",\n                                                          (CamlinternalFormatBasics.Alpha\n                                                             (CamlinternalFormatBasics.Formatting_lit\n                                                                (CamlinternalFormatBasics.Close_box,\n                                                                  CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))),\n    \".@.@[<hov>This simple coercion was not fully general.@ @{<hint>Hint@}: Consider using a fully explicit coercion@ of the form: %a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Flush_newline,\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   ((CamlinternalFormatBasics.String_literal\n                       (\"<hov>\", CamlinternalFormatBasics.End_of_format)),\n                     \"<hov>\"))),\n              (CamlinternalFormatBasics.String_literal\n                 (\"This simple coercion was not fully general.\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Formatting_gen\n                           ((CamlinternalFormatBasics.Open_tag\n                               (CamlinternalFormatBasics.Format\n                                  ((CamlinternalFormatBasics.String_literal\n                                      (\"<hint>\",\n                                        CamlinternalFormatBasics.End_of_format)),\n                                    \"<hint>\"))),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"Hint\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_tag,\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\": Consider using a fully explicit coercion\",\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               ((CamlinternalFormatBasics.Break\n                                                   (\"@ \", 1, 0)),\n                                                 (CamlinternalFormatBasics.String_literal\n                                                    (\"of the form: \",\n                                                      (CamlinternalFormatBasics.Alpha\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            (CamlinternalFormatBasics.Close_box,\n                                                              CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Flush_newline,\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<hov>\", CamlinternalFormatBasics.End_of_format)),\n                \"<hov>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"This simple coercion was not fully general.\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_tag\n                          (CamlinternalFormatBasics.Format\n                             ((CamlinternalFormatBasics.String_literal\n                                 (\"<hint>\",\n                                   CamlinternalFormatBasics.End_of_format)),\n                               \"<hint>\"))),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"Hint\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_tag,\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\": Consider using a fully explicit coercion\",\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\"of the form: \",\n                                                 (CamlinternalFormatBasics.Alpha\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         CamlinternalFormatBasics.End_of_format))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Flush_newline","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This simple coercion was not fully general.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_tag\n                     (CamlinternalFormatBasics.Format\n                        ((CamlinternalFormatBasics.String_literal\n                            (\"<hint>\",\n                              CamlinternalFormatBasics.End_of_format)),\n                          \"<hint>\"))),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"Hint\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           (CamlinternalFormatBasics.Close_tag,\n                             (CamlinternalFormatBasics.String_literal\n                                (\": Consider using a fully explicit coercion\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String_literal\n                                          (\"of the form: \",\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hov>\", CamlinternalFormatBasics.End_of_format)), \"<hov>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hov>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This simple coercion was not fully general.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_tag\n                (CamlinternalFormatBasics.Format\n                   ((CamlinternalFormatBasics.String_literal\n                       (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                     \"<hint>\"))),\n              (CamlinternalFormatBasics.String_literal\n                 (\"Hint\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_tag,\n                        (CamlinternalFormatBasics.String_literal\n                           (\": Consider using a fully explicit coercion\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.String_literal\n                                     (\"of the form: \",\n                                       (CamlinternalFormatBasics.Alpha\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               CamlinternalFormatBasics.End_of_format))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_tag\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<hint>\", CamlinternalFormatBasics.End_of_format)),\n                \"<hint>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"Hint\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_tag,\n                   (CamlinternalFormatBasics.String_literal\n                      (\": Consider using a fully explicit coercion\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"of the form: \",\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_tag\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Hint\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_tag,\n              (CamlinternalFormatBasics.String_literal\n                 (\": Consider using a fully explicit coercion\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"of the form: \",\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_tag\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hint>\", CamlinternalFormatBasics.End_of_format)), \"<hint>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hint>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Hint\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_tag,\n         (CamlinternalFormatBasics.String_literal\n            (\": Consider using a fully explicit coercion\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"of the form: \",\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_tag,\n    (CamlinternalFormatBasics.String_literal\n       (\": Consider using a fully explicit coercion\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"of the form: \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_tag","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\": Consider using a fully explicit coercion\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"of the form: \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"of the form: \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"of the form: \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"()","arity":0},
  {"type":"pat_construct","text":"Not_a_function\n(ty, explanation)","arity":2},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression should not be a function,\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"the expected type is\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Theta\n                                CamlinternalFormatBasics.End_of_format)))))))))),\n       \"This expression should not be a function,@ the expected type is@ %a%t\"))\n  (Style.as_inline_code Printtyp.type_expr) ty\n  (report_type_expected_explanation_opt explanation)","arity":7},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression should not be a function,\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.String_literal\n                (\"the expected type is\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Theta\n                             CamlinternalFormatBasics.End_of_format)))))))))),\n    \"This expression should not be a function,@ the expected type is@ %a%t\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression should not be a function,\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"the expected type is\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Theta\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"the expected type is\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Theta\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"the expected type is\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Theta\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"pat_construct","text":"Too_many_arguments\n(ty, explanation)","arity":2},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This function expects too many arguments,\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"it should have type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Theta\n                                CamlinternalFormatBasics.End_of_format)))))))))),\n       \"This function expects too many arguments,@ it should have type@ %a%t\"))\n  (Style.as_inline_code Printtyp.type_expr) ty\n  (report_type_expected_explanation_opt explanation)","arity":7},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This function expects too many arguments,\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.String_literal\n                (\"it should have type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Theta\n                             CamlinternalFormatBasics.End_of_format)))))))))),\n    \"This function expects too many arguments,@ it should have type@ %a%t\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This function expects too many arguments,\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"it should have type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Theta\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"it should have type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Theta\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"it should have type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Theta\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"pat_construct","text":"Abstract_wrong_label\n{ got; expected; expected_type; explanation }","arity":1},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"unlabeled\", CamlinternalFormatBasics.End_of_format)), \"unlabeled\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"unlabeled\", CamlinternalFormatBasics.End_of_format)), \"unlabeled\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"unlabeled\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"labeled \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))), \"labeled %a\"))\n  Style.inline_code (prefixed_label_name l)","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"labeled \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))), \"labeled %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"labeled \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"prefixed_label_name l","arity":1},
  {"type":"apply","text":"Style.inline_code ppf (prefixed_label_name l)","arity":2},
  {"type":"apply","text":"prefixed_label_name l","arity":1},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"pat_construct","text":"Nolabel","arity":0},
  {"type":"construct","text":"true","arity":0},
  {"type":"construct","text":"false","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n           (CamlinternalFormatBasics.Formatting_gen\n              ((CamlinternalFormatBasics.Open_box\n                  (CamlinternalFormatBasics.Format\n                     ((CamlinternalFormatBasics.String_literal\n                         (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                       \"<2>\"))),\n                (CamlinternalFormatBasics.String_literal\n                   (\"This function should have type\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Theta\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@,\", 0, 0)),\n                                          (CamlinternalFormatBasics.Formatting_gen\n                                             ((CamlinternalFormatBasics.Open_box\n                                                 (CamlinternalFormatBasics.Format\n                                                    (CamlinternalFormatBasics.End_of_format,\n                                                      \"\"))),\n                                               (CamlinternalFormatBasics.String_literal\n                                                  (\"but its first argument is \",\n                                                    (CamlinternalFormatBasics.Alpha\n                                                       (CamlinternalFormatBasics.Formatting_lit\n                                                          ((CamlinternalFormatBasics.Break\n                                                              (\"@ \", 1, 0)),\n                                                            (CamlinternalFormatBasics.String_literal\n                                                               (\"instead of \",\n                                                                 (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))),\n       \"@[<v>@[<2>This function should have type@ %a%t@]@,@[but its first argument is %a@ instead of %s%a@]@]\"))\n  (Style.as_inline_code Printtyp.type_expr) expected_type\n  (report_type_expected_explanation_opt explanation) (label ~long:true) got\n  (if second_long then \"being \" else \"\") (label ~long:second_long) expected","arity":12},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n        (CamlinternalFormatBasics.Formatting_gen\n           ((CamlinternalFormatBasics.Open_box\n               (CamlinternalFormatBasics.Format\n                  ((CamlinternalFormatBasics.String_literal\n                      (\"<2>\", CamlinternalFormatBasics.End_of_format)),\n                    \"<2>\"))),\n             (CamlinternalFormatBasics.String_literal\n                (\"This function should have type\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Theta\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@,\", 0, 0)),\n                                       (CamlinternalFormatBasics.Formatting_gen\n                                          ((CamlinternalFormatBasics.Open_box\n                                              (CamlinternalFormatBasics.Format\n                                                 (CamlinternalFormatBasics.End_of_format,\n                                                   \"\"))),\n                                            (CamlinternalFormatBasics.String_literal\n                                               (\"but its first argument is \",\n                                                 (CamlinternalFormatBasics.Alpha\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.String_literal\n                                                            (\"instead of \",\n                                                              (CamlinternalFormatBasics.String\n                                                                 (CamlinternalFormatBasics.No_padding,\n                                                                   (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))),\n    \"@[<v>@[<2>This function should have type@ %a%t@]@,@[but its first argument is %a@ instead of %s%a@]@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              ((CamlinternalFormatBasics.String_literal\n                  (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"This function should have type\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Theta\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 ((CamlinternalFormatBasics.Break\n                                     (\"@,\", 0, 0)),\n                                   (CamlinternalFormatBasics.Formatting_gen\n                                      ((CamlinternalFormatBasics.Open_box\n                                          (CamlinternalFormatBasics.Format\n                                             (CamlinternalFormatBasics.End_of_format,\n                                               \"\"))),\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\"but its first argument is \",\n                                             (CamlinternalFormatBasics.Alpha\n                                                (CamlinternalFormatBasics.Formatting_lit\n                                                   ((CamlinternalFormatBasics.Break\n                                                       (\"@ \", 1, 0)),\n                                                     (CamlinternalFormatBasics.String_literal\n                                                        (\"instead of \",\n                                                          (CamlinternalFormatBasics.String\n                                                             (CamlinternalFormatBasics.No_padding,\n                                                               (CamlinternalFormatBasics.Alpha\n                                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<v>\", CamlinternalFormatBasics.End_of_format)), \"<v>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<v>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This function should have type\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Theta\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                              (CamlinternalFormatBasics.Formatting_gen\n                                 ((CamlinternalFormatBasics.Open_box\n                                     (CamlinternalFormatBasics.Format\n                                        (CamlinternalFormatBasics.End_of_format,\n                                          \"\"))),\n                                   (CamlinternalFormatBasics.String_literal\n                                      (\"but its first argument is \",\n                                        (CamlinternalFormatBasics.Alpha\n                                           (CamlinternalFormatBasics.Formatting_lit\n                                              ((CamlinternalFormatBasics.Break\n                                                  (\"@ \", 1, 0)),\n                                                (CamlinternalFormatBasics.String_literal\n                                                   (\"instead of \",\n                                                     (CamlinternalFormatBasics.String\n                                                        (CamlinternalFormatBasics.No_padding,\n                                                          (CamlinternalFormatBasics.Alpha\n                                                             (CamlinternalFormatBasics.Formatting_lit\n                                                                (CamlinternalFormatBasics.Close_box,\n                                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This function should have type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Theta\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                         (CamlinternalFormatBasics.Formatting_gen\n                            ((CamlinternalFormatBasics.Open_box\n                                (CamlinternalFormatBasics.Format\n                                   (CamlinternalFormatBasics.End_of_format,\n                                     \"\"))),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"but its first argument is \",\n                                   (CamlinternalFormatBasics.Alpha\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         ((CamlinternalFormatBasics.Break\n                                             (\"@ \", 1, 0)),\n                                           (CamlinternalFormatBasics.String_literal\n                                              (\"instead of \",\n                                                (CamlinternalFormatBasics.String\n                                                   (CamlinternalFormatBasics.No_padding,\n                                                     (CamlinternalFormatBasics.Alpha\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           (CamlinternalFormatBasics.Close_box,\n                                                             (CamlinternalFormatBasics.Formatting_lit\n                                                                (CamlinternalFormatBasics.Close_box,\n                                                                  CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Theta\n          (CamlinternalFormatBasics.Formatting_lit\n             (CamlinternalFormatBasics.Close_box,\n               (CamlinternalFormatBasics.Formatting_lit\n                  ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n                    (CamlinternalFormatBasics.Formatting_gen\n                       ((CamlinternalFormatBasics.Open_box\n                           (CamlinternalFormatBasics.Format\n                              (CamlinternalFormatBasics.End_of_format, \"\"))),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"but its first argument is \",\n                              (CamlinternalFormatBasics.Alpha\n                                 (CamlinternalFormatBasics.Formatting_lit\n                                    ((CamlinternalFormatBasics.Break\n                                        (\"@ \", 1, 0)),\n                                      (CamlinternalFormatBasics.String_literal\n                                         (\"instead of \",\n                                           (CamlinternalFormatBasics.String\n                                              (CamlinternalFormatBasics.No_padding,\n                                                (CamlinternalFormatBasics.Alpha\n                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                      (CamlinternalFormatBasics.Close_box,\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           (CamlinternalFormatBasics.Close_box,\n                                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Theta\n     (CamlinternalFormatBasics.Formatting_lit\n        (CamlinternalFormatBasics.Close_box,\n          (CamlinternalFormatBasics.Formatting_lit\n             ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n               (CamlinternalFormatBasics.Formatting_gen\n                  ((CamlinternalFormatBasics.Open_box\n                      (CamlinternalFormatBasics.Format\n                         (CamlinternalFormatBasics.End_of_format, \"\"))),\n                    (CamlinternalFormatBasics.String_literal\n                       (\"but its first argument is \",\n                         (CamlinternalFormatBasics.Alpha\n                            (CamlinternalFormatBasics.Formatting_lit\n                               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\"instead of \",\n                                      (CamlinternalFormatBasics.String\n                                         (CamlinternalFormatBasics.No_padding,\n                                           (CamlinternalFormatBasics.Alpha\n                                              (CamlinternalFormatBasics.Formatting_lit\n                                                 (CamlinternalFormatBasics.Close_box,\n                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                      (CamlinternalFormatBasics.Close_box,\n                                                        CamlinternalFormatBasics.End_of_format)))))))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n            (CamlinternalFormatBasics.Formatting_gen\n               ((CamlinternalFormatBasics.Open_box\n                   (CamlinternalFormatBasics.Format\n                      (CamlinternalFormatBasics.End_of_format, \"\"))),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"but its first argument is \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                              (CamlinternalFormatBasics.String_literal\n                                 (\"instead of \",\n                                   (CamlinternalFormatBasics.String\n                                      (CamlinternalFormatBasics.No_padding,\n                                        (CamlinternalFormatBasics.Alpha\n                                           (CamlinternalFormatBasics.Formatting_lit\n                                              (CamlinternalFormatBasics.Close_box,\n                                                (CamlinternalFormatBasics.Formatting_lit\n                                                   (CamlinternalFormatBasics.Close_box,\n                                                     CamlinternalFormatBasics.End_of_format))))))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   (CamlinternalFormatBasics.End_of_format, \"\"))),\n              (CamlinternalFormatBasics.String_literal\n                 (\"but its first argument is \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String_literal\n                              (\"instead of \",\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.Alpha\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             (CamlinternalFormatBasics.Formatting_lit\n                                                (CamlinternalFormatBasics.Close_box,\n                                                  CamlinternalFormatBasics.End_of_format)))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@,\", 0, 0)),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              (CamlinternalFormatBasics.End_of_format, \"\"))),\n         (CamlinternalFormatBasics.String_literal\n            (\"but its first argument is \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String_literal\n                         (\"instead of \",\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.Alpha\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        (CamlinternalFormatBasics.Formatting_lit\n                                           (CamlinternalFormatBasics.Close_box,\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@,\", 0, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"but its first argument is \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"instead of \",\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.Alpha\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   (CamlinternalFormatBasics.Formatting_lit\n                                      (CamlinternalFormatBasics.Close_box,\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but its first argument is \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"instead of \",\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"instead of \",\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"instead of \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"instead of \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"apply","text":"label ~long:true","arity":1},
  {"type":"construct","text":"true","arity":0},
  {"type":"apply","text":"label ~long:second_long","arity":1},
  {"type":"pat_construct","text":"Scoping_let_module\n(id, ty)","arity":2},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" expression has type\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String_literal\n                                   (\"In this type, the locally bound module name \",\n                                     (CamlinternalFormatBasics.Alpha\n                                        (CamlinternalFormatBasics.String_literal\n                                           (\" escapes its scope\",\n                                             CamlinternalFormatBasics.End_of_format))))))))))))))),\n       \"This %a expression has type@ %a@ In this type, the locally bound module name %a escapes its scope\"))\n  Style.inline_code \"let module\" (Style.as_inline_code Printtyp.type_expr) ty\n  Style.inline_code id","arity":10},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" expression has type\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"In this type, the locally bound module name \",\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\" escapes its scope\",\n                                          CamlinternalFormatBasics.End_of_format))))))))))))))),\n    \"This %a expression has type@ %a@ In this type, the locally bound module name %a escapes its scope\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" expression has type\",\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                         (CamlinternalFormatBasics.String_literal\n                            (\"In this type, the locally bound module name \",\n                              (CamlinternalFormatBasics.Alpha\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\" escapes its scope\",\n                                      CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" expression has type\",\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.Formatting_lit\n                  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                    (CamlinternalFormatBasics.String_literal\n                       (\"In this type, the locally bound module name \",\n                         (CamlinternalFormatBasics.Alpha\n                            (CamlinternalFormatBasics.String_literal\n                               (\" escapes its scope\",\n                                 CamlinternalFormatBasics.End_of_format))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" expression has type\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String_literal\n                    (\"In this type, the locally bound module name \",\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.String_literal\n                            (\" escapes its scope\",\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"In this type, the locally bound module name \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.String_literal\n                       (\" escapes its scope\",\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"In this type, the locally bound module name \",\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.String_literal\n                  (\" escapes its scope\",\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"In this type, the locally bound module name \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" escapes its scope\", CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"In this type, the locally bound module name \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" escapes its scope\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" escapes its scope\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" escapes its scope\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Private_type\nty","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Cannot create values of the private type \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"Cannot create values of the private type %a\"))\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Cannot create values of the private type \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"Cannot create values of the private type %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Cannot create values of the private type \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Private_label\n(lid, ty)","arity":2},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Cannot assign field \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" of the private type \",\n                   (CamlinternalFormatBasics.Alpha\n                      CamlinternalFormatBasics.End_of_format)))))),\n       \"Cannot assign field %a of the private type %a\"))\n  (Style.as_inline_code longident) lid\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Cannot assign field \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" of the private type \",\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format)))))),\n    \"Cannot assign field %a of the private type %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Cannot assign field \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" of the private type \",\n            (CamlinternalFormatBasics.Alpha\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" of the private type \",\n       (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" of the private type \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Private_constructor\n(constr, ty)","arity":2},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Cannot use private constructor \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" to create values of type \",\n                   (CamlinternalFormatBasics.Alpha\n                      CamlinternalFormatBasics.End_of_format)))))),\n       \"Cannot use private constructor %a to create values of type %a\"))\n  Style.inline_code constr.cstr_name\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Cannot use private constructor \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" to create values of type \",\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format)))))),\n    \"Cannot use private constructor %a to create values of type %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Cannot use private constructor \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" to create values of type \",\n            (CamlinternalFormatBasics.Alpha\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" to create values of type \",\n       (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" to create values of type \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Not_a_polymorphic_variant_type\nlid","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The type \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"is not a variant type\",\n                        CamlinternalFormatBasics.End_of_format))))))),\n       \"The type %a@ is not a variant type\"))\n  (Style.as_inline_code longident) lid","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The type \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"is not a variant type\",\n                     CamlinternalFormatBasics.End_of_format))))))),\n    \"The type %a@ is not a variant type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The type \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"is not a variant type\",\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"is not a variant type\", CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"is not a variant type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"is not a variant type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code longident","arity":1},
  {"type":"pat_construct","text":"Incoherent_label_order","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This function is applied to arguments\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"in an order different from other calls.\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String_literal\n                             (\"This is only allowed when the real type is known.\",\n                               CamlinternalFormatBasics.End_of_format)))))))))),\n       \"This function is applied to arguments@ in an order different from other calls.@ This is only allowed when the real type is known.\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This function is applied to arguments\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.String_literal\n                (\"in an order different from other calls.\",\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.String_literal\n                          (\"This is only allowed when the real type is known.\",\n                            CamlinternalFormatBasics.End_of_format)))))))))),\n    \"This function is applied to arguments@ in an order different from other calls.@ This is only allowed when the real type is known.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This function is applied to arguments\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"in an order different from other calls.\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"This is only allowed when the real type is known.\",\n                        CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"in an order different from other calls.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"This is only allowed when the real type is known.\",\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"in an order different from other calls.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"This is only allowed when the real type is known.\",\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"This is only allowed when the real type is known.\",\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This is only allowed when the real type is known.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Less_general\n(kind, err)","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (fun ppf ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"This \",\n                (CamlinternalFormatBasics.String\n                   (CamlinternalFormatBasics.No_padding,\n                     (CamlinternalFormatBasics.String_literal\n                        (\" has type\", CamlinternalFormatBasics.End_of_format)))))),\n            \"This %s has type\")) kind)\n  (fun ppf ->\n     fprintf ppf\n       (CamlinternalFormatBasics.Format\n          ((CamlinternalFormatBasics.String_literal\n              (\"which is less general than\",\n                CamlinternalFormatBasics.End_of_format)),\n            \"which is less general than\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.String_literal\n                   (\" has type\", CamlinternalFormatBasics.End_of_format)))))),\n       \"This %s has type\")) kind","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.String_literal\n                (\" has type\", CamlinternalFormatBasics.End_of_format)))))),\n    \"This %s has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" has type\", CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" has type\", CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" has type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"which is less general than\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"which is less general than\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"which is less general than\", CamlinternalFormatBasics.End_of_format)),\n    \"which is less general than\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"which is less general than\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Modules_not_allowed","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Modules are not allowed in this pattern.\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Modules are not allowed in this pattern.\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Modules are not allowed in this pattern.\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Modules are not allowed in this pattern.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Modules are not allowed in this pattern.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Cannot_infer_signature","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The signature for this packaged module couldn't be inferred.\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"The signature for this packaged module couldn't be inferred.\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The signature for this packaged module couldn't be inferred.\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"The signature for this packaged module couldn't be inferred.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The signature for this packaged module couldn't be inferred.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Not_a_packed_module\nty","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression is packed module, but the expected type is\",\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"This expression is packed module, but the expected type is@ %a\"))\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression is packed module, but the expected type is\",\n        (CamlinternalFormatBasics.Formatting_lit\n           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n             (CamlinternalFormatBasics.Alpha\n                CamlinternalFormatBasics.End_of_format))))),\n    \"This expression is packed module, but the expected type is@ %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression is packed module, but the expected type is\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Unexpected_existential\n(reason, name)","arity":2},
  {"type":"pat_construct","text":"In_class_args","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in class arguments\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in class arguments\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in class arguments\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in class arguments\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in class arguments\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"In_class_def","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in bindings inside class definition\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in bindings inside class definition\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in bindings inside class definition\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in bindings inside class definition\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in bindings inside class definition\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"In_self_pattern","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in self patterns\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in self patterns\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in self patterns\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in self patterns\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in self patterns\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"At_toplevel","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in toplevel bindings\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in toplevel bindings\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in toplevel bindings\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in toplevel bindings\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in toplevel bindings\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"In_group","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" bindings\", CamlinternalFormatBasics.End_of_format))))),\n       \"Existential types are not allowed in %a bindings\")) Style.inline_code\n  \"let ... and ...\"","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" bindings\", CamlinternalFormatBasics.End_of_format))))),\n    \"Existential types are not allowed in %a bindings\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" bindings\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" bindings\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" bindings\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"In_rec","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in recursive bindings\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in recursive bindings\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in recursive bindings\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in recursive bindings\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in recursive bindings\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"With_attributes","arity":0},
  {"type":"apply","text":"dprintf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Existential types are not allowed in presence of attributes\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"Existential types are not allowed in presence of attributes\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Existential types are not allowed in presence of attributes\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"Existential types are not allowed in presence of attributes\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Existential types are not allowed in presence of attributes\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Theta\n         (CamlinternalFormatBasics.Char_literal\n            (',',\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"but the constructor \",\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.String_literal\n                              (\" introduces existential types.\",\n                                CamlinternalFormatBasics.End_of_format)))))))))),\n       \"%t,@ but the constructor %a introduces existential types.\"))\n  reason_str Style.inline_code name","arity":7},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Theta\n      (CamlinternalFormatBasics.Char_literal\n         (',',\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"but the constructor \",\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.String_literal\n                           (\" introduces existential types.\",\n                             CamlinternalFormatBasics.End_of_format)))))))))),\n    \"%t,@ but the constructor %a introduces existential types.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta\n  (CamlinternalFormatBasics.Char_literal\n     (',',\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"but the constructor \",\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.String_literal\n                       (\" introduces existential types.\",\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (',',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"but the constructor \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.String_literal\n                    (\" introduces existential types.\",\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"but the constructor \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" introduces existential types.\",\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but the constructor \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" introduces existential types.\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" introduces existential types.\",\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" introduces existential types.\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Invalid_interval","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Only character intervals are supported in patterns.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[Only character intervals are supported in patterns.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Only character intervals are supported in patterns.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[Only character intervals are supported in patterns.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Only character intervals are supported in patterns.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Only character intervals are supported in patterns.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Invalid_for_loop_index","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Invalid for-loop index: only variables and \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.String_literal\n                      (\" are allowed.\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           (CamlinternalFormatBasics.Close_box,\n                             CamlinternalFormatBasics.End_of_format))))))))),\n       \"@[Invalid for-loop index: only variables and %a are allowed.@]\"))\n  Style.inline_code \"_\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Invalid for-loop index: only variables and \",\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.String_literal\n                   (\" are allowed.\",\n                     (CamlinternalFormatBasics.Formatting_lit\n                        (CamlinternalFormatBasics.Close_box,\n                          CamlinternalFormatBasics.End_of_format))))))))),\n    \"@[Invalid for-loop index: only variables and %a are allowed.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Invalid for-loop index: only variables and \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.String_literal\n               (\" are allowed.\",\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Invalid for-loop index: only variables and \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" are allowed.\",\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" are allowed.\",\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" are allowed.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"No_value_clauses","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"None of the patterns in this \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" expression match values.\",\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"None of the patterns in this %a expression match values.\"))\n  Style.inline_code \"match\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"None of the patterns in this \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" expression match values.\",\n                CamlinternalFormatBasics.End_of_format))))),\n    \"None of the patterns in this %a expression match values.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"None of the patterns in this \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" expression match values.\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" expression match values.\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" expression match values.\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Exception_pattern_disallowed","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Exception patterns are not allowed in this position.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[Exception patterns are not allowed in this position.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Exception patterns are not allowed in this position.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[Exception patterns are not allowed in this position.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Exception patterns are not allowed in this position.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Exception patterns are not allowed in this position.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Mixed_value_and_exception_patterns_under_guard","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Mixing value and exception patterns under when-guards is not supported.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[Mixing value and exception patterns under when-guards is not supported.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Mixing value and exception patterns under when-guards is not supported.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[Mixing value and exception patterns under when-guards is not supported.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Mixing value and exception patterns under when-guards is not supported.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Mixing value and exception patterns under when-guards is not supported.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Effect_pattern_below_toplevel","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Effect patterns must be at the top level of a match case.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[Effect patterns must be at the top level of a match case.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Effect patterns must be at the top level of a match case.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[Effect patterns must be at the top level of a match case.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Effect patterns must be at the top level of a match case.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Effect patterns must be at the top level of a match case.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Invalid_continuation_pattern","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"Invalid continuation pattern: only variables and _ are allowed .\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[Invalid continuation pattern: only variables and _ are allowed .@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"Invalid continuation pattern: only variables and _ are allowed .\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[Invalid continuation pattern: only variables and _ are allowed .@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"Invalid continuation pattern: only variables and _ are allowed .\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Invalid continuation pattern: only variables and _ are allowed .\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Inlined_record_escape","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"This form is not allowed as the type of the inlined record could escape.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[This form is not allowed as the type of the inlined record could escape.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"This form is not allowed as the type of the inlined record could escape.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[This form is not allowed as the type of the inlined record could escape.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This form is not allowed as the type of the inlined record could escape.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This form is not allowed as the type of the inlined record could escape.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Inlined_record_expected","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"This constructor expects an inlined record argument.\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   (CamlinternalFormatBasics.Close_box,\n                     CamlinternalFormatBasics.End_of_format)))))),\n       \"@[This constructor expects an inlined record argument.@]\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"This constructor expects an inlined record argument.\",\n             (CamlinternalFormatBasics.Formatting_lit\n                (CamlinternalFormatBasics.Close_box,\n                  CamlinternalFormatBasics.End_of_format)))))),\n    \"@[This constructor expects an inlined record argument.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"This constructor expects an inlined record argument.\",\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This constructor expects an inlined record argument.\",\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Unrefuted_pattern\npat","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.String\n                        (CamlinternalFormatBasics.No_padding,\n                          (CamlinternalFormatBasics.Formatting_lit\n                             ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                               (CamlinternalFormatBasics.Formatting_gen\n                                  ((CamlinternalFormatBasics.Open_box\n                                      (CamlinternalFormatBasics.Format\n                                         (CamlinternalFormatBasics.End_of_format,\n                                           \"\"))),\n                                    (CamlinternalFormatBasics.Alpha\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          (CamlinternalFormatBasics.Close_box,\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               (CamlinternalFormatBasics.Close_box,\n                                                 CamlinternalFormatBasics.End_of_format))))))))))))))))),\n       \"@[%s@ %s@ @[%a@]@]\")) \"This match case could not be refuted.\"\n  \"Here is an example of a value that would reach it:\"\n  (Style.as_inline_code Printpat.pretty_val) pat","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.Formatting_lit\n                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.Formatting_lit\n                          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                            (CamlinternalFormatBasics.Formatting_gen\n                               ((CamlinternalFormatBasics.Open_box\n                                   (CamlinternalFormatBasics.Format\n                                      (CamlinternalFormatBasics.End_of_format,\n                                        \"\"))),\n                                 (CamlinternalFormatBasics.Alpha\n                                    (CamlinternalFormatBasics.Formatting_lit\n                                       (CamlinternalFormatBasics.Close_box,\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            (CamlinternalFormatBasics.Close_box,\n                                              CamlinternalFormatBasics.End_of_format))))))))))))))))),\n    \"@[%s@ %s@ @[%a@]@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Formatting_gen\n                           ((CamlinternalFormatBasics.Open_box\n                               (CamlinternalFormatBasics.Format\n                                  (CamlinternalFormatBasics.End_of_format,\n                                    \"\"))),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Formatting_gen\n                      ((CamlinternalFormatBasics.Open_box\n                          (CamlinternalFormatBasics.Format\n                             (CamlinternalFormatBasics.End_of_format, \"\"))),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Formatting_gen\n                 ((CamlinternalFormatBasics.Open_box\n                     (CamlinternalFormatBasics.Format\n                        (CamlinternalFormatBasics.End_of_format, \"\"))),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Formatting_gen\n            ((CamlinternalFormatBasics.Open_box\n                (CamlinternalFormatBasics.Format\n                   (CamlinternalFormatBasics.End_of_format, \"\"))),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Formatting_gen\n       ((CamlinternalFormatBasics.Open_box\n           (CamlinternalFormatBasics.Format\n              (CamlinternalFormatBasics.End_of_format, \"\"))),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printpat.pretty_val","arity":1},
  {"type":"pat_construct","text":"Invalid_extension_constructor_payload","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Invalid \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" payload, a constructor is expected.\",\n                   CamlinternalFormatBasics.End_of_format))))),\n       \"Invalid %a payload, a constructor is expected.\")) Style.inline_code\n  \"[%extension_constructor]\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Invalid \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" payload, a constructor is expected.\",\n                CamlinternalFormatBasics.End_of_format))))),\n    \"Invalid %a payload, a constructor is expected.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Invalid \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" payload, a constructor is expected.\",\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" payload, a constructor is expected.\",\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" payload, a constructor is expected.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Not_an_extension_constructor","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This constructor is not an extension constructor.\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"This constructor is not an extension constructor.\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This constructor is not an extension constructor.\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"This constructor is not an extension constructor.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This constructor is not an extension constructor.\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Literal_overflow\nty","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Integer literal exceeds the range of representable integers of type \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"Integer literal exceeds the range of representable integers of type %a\"))\n  Style.inline_code ty","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Integer literal exceeds the range of representable integers of type \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"Integer literal exceeds the range of representable integers of type %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Integer literal exceeds the range of representable integers of type \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Unknown_literal\n(n, m)","arity":2},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String\n         (CamlinternalFormatBasics.No_padding,\n           (CamlinternalFormatBasics.Char\n              CamlinternalFormatBasics.End_of_format))), \"%s%c\")) n m","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String\n      (CamlinternalFormatBasics.No_padding,\n        (CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format))),\n    \"%s%c\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Unknown modifier \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" for literal \",\n                   (CamlinternalFormatBasics.Alpha\n                      CamlinternalFormatBasics.End_of_format)))))),\n       \"Unknown modifier %a for literal %a\"))\n  (Style.as_inline_code pp_print_char) m (Style.as_inline_code pp_lit) \n  (n, m)","arity":8},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Unknown modifier \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" for literal \",\n                (CamlinternalFormatBasics.Alpha\n                   CamlinternalFormatBasics.End_of_format)))))),\n    \"Unknown modifier %a for literal %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Unknown modifier \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" for literal \",\n            (CamlinternalFormatBasics.Alpha\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" for literal \",\n       (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" for literal \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code pp_print_char","arity":1},
  {"type":"apply","text":"Style.as_inline_code pp_lit","arity":1},
  {"type":"pat_construct","text":"Illegal_letrec_pat","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"Only variables are allowed as left-hand side of \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"Only variables are allowed as left-hand side of %a\"))\n  Style.inline_code \"let rec\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"Only variables are allowed as left-hand side of \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"Only variables are allowed as left-hand side of %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"Only variables are allowed as left-hand side of \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Illegal_letrec_expr","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This kind of expression is not allowed as right-hand side of \",\n           (CamlinternalFormatBasics.Alpha\n              CamlinternalFormatBasics.End_of_format))),\n       \"This kind of expression is not allowed as right-hand side of %a\"))\n  Style.inline_code \"let rec\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This kind of expression is not allowed as right-hand side of \",\n        (CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format))),\n    \"This kind of expression is not allowed as right-hand side of %a\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This kind of expression is not allowed as right-hand side of \",\n    (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Illegal_class_expr","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This kind of recursive class expression is not allowed\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"This kind of recursive class expression is not allowed\"))","arity":4},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This kind of recursive class expression is not allowed\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"This kind of recursive class expression is not allowed\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This kind of recursive class expression is not allowed\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Letop_type_clash\n(name, err)","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The operator \",\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.String_literal\n                        (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n              \"The operator %a has type\")) Style.inline_code name)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but it was expected to have type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but it was expected to have type\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The operator \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n       \"The operator %a has type\")) Style.inline_code name","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The operator \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n    \"The operator %a has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The operator \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" has type\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" has type\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" has type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but it was expected to have type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but it was expected to have type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but it was expected to have type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but it was expected to have type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but it was expected to have type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Andop_type_clash\n(name, err)","arity":2},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"The operator \",\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.String_literal\n                        (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n              \"The operator %a has type\")) Style.inline_code name)\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but it was expected to have type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but it was expected to have type\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"The operator \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.String_literal\n                 (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n       \"The operator %a has type\")) Style.inline_code name","arity":4},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"The operator \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.String_literal\n              (\" has type\", CamlinternalFormatBasics.End_of_format))))),\n    \"The operator %a has type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The operator \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.String_literal\n          (\" has type\", CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.String_literal\n     (\" has type\", CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" has type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but it was expected to have type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but it was expected to have type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but it was expected to have type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but it was expected to have type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but it was expected to have type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Bindings_type_clash\nerr","arity":1},
  {"type":"apply","text":"report_unification_error ~loc ?sub:None env err\n  ?type_expected_explanation:None\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"These bindings have type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"These bindings have type\")))\n  (function\n   | ppf ->\n       fprintf ppf\n         (CamlinternalFormatBasics.Format\n            ((CamlinternalFormatBasics.String_literal\n                (\"but bindings were expected of type\",\n                  CamlinternalFormatBasics.End_of_format)),\n              \"but bindings were expected of type\")))","arity":7},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"These bindings have type\", CamlinternalFormatBasics.End_of_format)),\n       \"These bindings have type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"These bindings have type\", CamlinternalFormatBasics.End_of_format)),\n    \"These bindings have type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"These bindings have type\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"but bindings were expected of type\",\n           CamlinternalFormatBasics.End_of_format)),\n       \"but bindings were expected of type\"))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"but bindings were expected of type\",\n        CamlinternalFormatBasics.End_of_format)),\n    \"but bindings were expected of type\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"but bindings were expected of type\",\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Unbound_existential\n(ids, ty)","arity":2},
  {"type":"apply","text":"pp_print_string ppf (Ident.name id)","arity":2},
  {"type":"apply","text":"Ident.name id","arity":1},
  {"type":"apply","text":"fprintf ppf\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"type \",\n                (CamlinternalFormatBasics.Alpha\n                   (CamlinternalFormatBasics.Char_literal\n                      ('.',\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          CamlinternalFormatBasics.End_of_format)))))))))))))),\n       \"@[type %a.@ %a@]@]\"))\n  (pp_print_list ?pp_sep:(Some pp_print_space) pp_ident) ids\n  Printtyp.type_expr ty","arity":6},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"type \",\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Char_literal\n                   ('.',\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     (CamlinternalFormatBasics.Close_box,\n                                       CamlinternalFormatBasics.End_of_format)))))))))))))),\n    \"@[type %a.@ %a@]@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"type \",\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Char_literal\n               ('.',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.Alpha\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              (CamlinternalFormatBasics.Formatting_lit\n                                 (CamlinternalFormatBasics.Close_box,\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"type \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Char_literal\n          ('.',\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.Alpha\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         (CamlinternalFormatBasics.Formatting_lit\n                            (CamlinternalFormatBasics.Close_box,\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Char_literal\n     ('.',\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.Alpha\n               (CamlinternalFormatBasics.Formatting_lit\n                  (CamlinternalFormatBasics.Close_box,\n                    (CamlinternalFormatBasics.Formatting_lit\n                       (CamlinternalFormatBasics.Close_box,\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"pp_print_list ?pp_sep:(Some pp_print_space) pp_ident","arity":2},
  {"type":"construct","text":"Some pp_print_space","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.Char_literal\n                   (':',\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.Alpha\n                             (CamlinternalFormatBasics.Formatting_lit\n                                (CamlinternalFormatBasics.Close_box,\n                                  CamlinternalFormatBasics.End_of_format))))))))))),\n       \"@[<2>%s:@ %a@]\"))\n  \"This type does not bind all existentials in the constructor\"\n  (Style.as_inline_code pp_type) (ids, ty)","arity":7},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.Char_literal\n                (':',\n                  (CamlinternalFormatBasics.Formatting_lit\n                     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                       (CamlinternalFormatBasics.Alpha\n                          (CamlinternalFormatBasics.Formatting_lit\n                             (CamlinternalFormatBasics.Close_box,\n                               CamlinternalFormatBasics.End_of_format))))))))))),\n    \"@[<2>%s:@ %a@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            (':',\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<2>\", CamlinternalFormatBasics.End_of_format)), \"<2>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<2>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       (':',\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (':',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               (CamlinternalFormatBasics.Close_box,\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          (CamlinternalFormatBasics.Close_box,\n            CamlinternalFormatBasics.End_of_format))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     (CamlinternalFormatBasics.Close_box,\n       CamlinternalFormatBasics.End_of_format))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code pp_type","arity":1},
  {"type":"pat_construct","text":"Bind_existential\n(reason, id, ty)","arity":3},
  {"type":"pat_construct","text":"Bind_already_bound","arity":0},
  {"type":"pat_construct","text":"Bind_not_in_scope","arity":0},
  {"type":"pat_construct","text":"Bind_non_locally_abstract","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"<hov0>\", CamlinternalFormatBasics.End_of_format)),\n                  \"<hov0>\"))),\n           (CamlinternalFormatBasics.String_literal\n              (\"The local name\",\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.Alpha\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String\n                                (CamlinternalFormatBasics.No_padding,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String\n                                          (CamlinternalFormatBasics.No_padding,\n                                            (CamlinternalFormatBasics.Char_literal\n                                               ('.',\n                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                    ((CamlinternalFormatBasics.Break\n                                                        (\"@ \", 1, 0)),\n                                                      (CamlinternalFormatBasics.String\n                                                         (CamlinternalFormatBasics.No_padding,\n                                                           (CamlinternalFormatBasics.Formatting_lit\n                                                              ((CamlinternalFormatBasics.Break\n                                                                  (\"@ \", 1,\n                                                                    0)),\n                                                                (CamlinternalFormatBasics.String\n                                                                   (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))),\n       \"@[<hov0>The local name@ %a@ %s@ %s.@ %s@ %s@ %a@ %s.@]\"))\n  (Style.as_inline_code Printtyp.ident) id\n  \"can only be given to an existential variable\"\n  \"introduced by this GADT constructor\"\n  \"The type annotation tries to bind it to\" reason1\n  (Style.as_inline_code Printtyp.type_expr) ty reason2","arity":13},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"<hov0>\", CamlinternalFormatBasics.End_of_format)),\n               \"<hov0>\"))),\n        (CamlinternalFormatBasics.String_literal\n           (\"The local name\",\n             (CamlinternalFormatBasics.Formatting_lit\n                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                  (CamlinternalFormatBasics.Alpha\n                     (CamlinternalFormatBasics.Formatting_lit\n                        ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                          (CamlinternalFormatBasics.String\n                             (CamlinternalFormatBasics.No_padding,\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String\n                                       (CamlinternalFormatBasics.No_padding,\n                                         (CamlinternalFormatBasics.Char_literal\n                                            ('.',\n                                              (CamlinternalFormatBasics.Formatting_lit\n                                                 ((CamlinternalFormatBasics.Break\n                                                     (\"@ \", 1, 0)),\n                                                   (CamlinternalFormatBasics.String\n                                                      (CamlinternalFormatBasics.No_padding,\n                                                        (CamlinternalFormatBasics.Formatting_lit\n                                                           ((CamlinternalFormatBasics.Break\n                                                               (\"@ \", 1, 0)),\n                                                             (CamlinternalFormatBasics.String\n                                                                (CamlinternalFormatBasics.No_padding,\n                                                                  (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))),\n    \"@[<hov0>The local name@ %a@ %s@ %s.@ %s@ %s@ %a@ %s.@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         ((CamlinternalFormatBasics.String_literal\n             (\"<hov0>\", CamlinternalFormatBasics.End_of_format)), \"<hov0>\"))),\n    (CamlinternalFormatBasics.String_literal\n       (\"The local name\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.Char_literal\n                                        ('.',\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.String\n                                                  (CamlinternalFormatBasics.No_padding,\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.String\n                                                            (CamlinternalFormatBasics.No_padding,\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                   (CamlinternalFormatBasics.Alpha\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"<hov0>\", CamlinternalFormatBasics.End_of_format)), \"<hov0>\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"<hov0>\", CamlinternalFormatBasics.End_of_format)), \"<hov0>\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"<hov0>\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"The local name\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.Char_literal\n                                   ('.',\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String\n                                             (CamlinternalFormatBasics.No_padding,\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.String\n                                                       (CamlinternalFormatBasics.No_padding,\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            ((CamlinternalFormatBasics.Break\n                                                                (\"@ \", 1, 0)),\n                                                              (CamlinternalFormatBasics.Alpha\n                                                                 (CamlinternalFormatBasics.Formatting_lit\n                                                                    ((CamlinternalFormatBasics.Break\n                                                                    (\"@ \", 1,\n                                                                    0)),\n                                                                    (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.Char_literal\n                              ('.',\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.String\n                                        (CamlinternalFormatBasics.No_padding,\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.String\n                                                  (CamlinternalFormatBasics.No_padding,\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.Alpha\n                                                            (CamlinternalFormatBasics.Formatting_lit\n                                                               ((CamlinternalFormatBasics.Break\n                                                                   (\"@ \", 1,\n                                                                    0)),\n                                                                 (CamlinternalFormatBasics.String\n                                                                    (CamlinternalFormatBasics.No_padding,\n                                                                    (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String\n          (CamlinternalFormatBasics.No_padding,\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Char_literal\n                         ('.',\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String\n                                             (CamlinternalFormatBasics.No_padding,\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.Alpha\n                                                       (CamlinternalFormatBasics.Formatting_lit\n                                                          ((CamlinternalFormatBasics.Break\n                                                              (\"@ \", 1, 0)),\n                                                            (CamlinternalFormatBasics.String\n                                                               (CamlinternalFormatBasics.No_padding,\n                                                                 (CamlinternalFormatBasics.Char_literal\n                                                                    ('.',\n                                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))))))))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Char_literal\n                      ('.',\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String\n                                (CamlinternalFormatBasics.No_padding,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.String\n                                          (CamlinternalFormatBasics.No_padding,\n                                            (CamlinternalFormatBasics.Formatting_lit\n                                               ((CamlinternalFormatBasics.Break\n                                                   (\"@ \", 1, 0)),\n                                                 (CamlinternalFormatBasics.Alpha\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       ((CamlinternalFormatBasics.Break\n                                                           (\"@ \", 1, 0)),\n                                                         (CamlinternalFormatBasics.String\n                                                            (CamlinternalFormatBasics.No_padding,\n                                                              (CamlinternalFormatBasics.Char_literal\n                                                                 ('.',\n                                                                   (CamlinternalFormatBasics.Formatting_lit\n                                                                    (CamlinternalFormatBasics.Close_box,\n                                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Char_literal\n                 ('.',\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String\n                           (CamlinternalFormatBasics.No_padding,\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.String\n                                     (CamlinternalFormatBasics.No_padding,\n                                       (CamlinternalFormatBasics.Formatting_lit\n                                          ((CamlinternalFormatBasics.Break\n                                              (\"@ \", 1, 0)),\n                                            (CamlinternalFormatBasics.Alpha\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  ((CamlinternalFormatBasics.Break\n                                                      (\"@ \", 1, 0)),\n                                                    (CamlinternalFormatBasics.String\n                                                       (CamlinternalFormatBasics.No_padding,\n                                                         (CamlinternalFormatBasics.Char_literal\n                                                            ('.',\n                                                              (CamlinternalFormatBasics.Formatting_lit\n                                                                 (CamlinternalFormatBasics.Close_box,\n                                                                   CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            ('.',\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String\n                      (CamlinternalFormatBasics.No_padding,\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String\n                                (CamlinternalFormatBasics.No_padding,\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.Alpha\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             ((CamlinternalFormatBasics.Break\n                                                 (\"@ \", 1, 0)),\n                                               (CamlinternalFormatBasics.String\n                                                  (CamlinternalFormatBasics.No_padding,\n                                                    (CamlinternalFormatBasics.Char_literal\n                                                       ('.',\n                                                         (CamlinternalFormatBasics.Formatting_lit\n                                                            (CamlinternalFormatBasics.Close_box,\n                                                              CamlinternalFormatBasics.End_of_format))))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       ('.',\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String\n                           (CamlinternalFormatBasics.No_padding,\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        ((CamlinternalFormatBasics.Break\n                                            (\"@ \", 1, 0)),\n                                          (CamlinternalFormatBasics.String\n                                             (CamlinternalFormatBasics.No_padding,\n                                               (CamlinternalFormatBasics.Char_literal\n                                                  ('.',\n                                                    (CamlinternalFormatBasics.Formatting_lit\n                                                       (CamlinternalFormatBasics.Close_box,\n                                                         CamlinternalFormatBasics.End_of_format))))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String\n                      (CamlinternalFormatBasics.No_padding,\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   ((CamlinternalFormatBasics.Break\n                                       (\"@ \", 1, 0)),\n                                     (CamlinternalFormatBasics.String\n                                        (CamlinternalFormatBasics.No_padding,\n                                          (CamlinternalFormatBasics.Char_literal\n                                             ('.',\n                                               (CamlinternalFormatBasics.Formatting_lit\n                                                  (CamlinternalFormatBasics.Close_box,\n                                                    CamlinternalFormatBasics.End_of_format))))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Formatting_lit\n                              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.Char_literal\n                                        ('.',\n                                          (CamlinternalFormatBasics.Formatting_lit\n                                             (CamlinternalFormatBasics.Close_box,\n                                               CamlinternalFormatBasics.End_of_format))))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Formatting_lit\n                         ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                           (CamlinternalFormatBasics.String\n                              (CamlinternalFormatBasics.No_padding,\n                                (CamlinternalFormatBasics.Char_literal\n                                   ('.',\n                                     (CamlinternalFormatBasics.Formatting_lit\n                                        (CamlinternalFormatBasics.Close_box,\n                                          CamlinternalFormatBasics.End_of_format))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Formatting_lit\n                    ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.Char_literal\n                              ('.',\n                                (CamlinternalFormatBasics.Formatting_lit\n                                   (CamlinternalFormatBasics.Close_box,\n                                     CamlinternalFormatBasics.End_of_format))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Formatting_lit\n               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Char_literal\n                         ('.',\n                           (CamlinternalFormatBasics.Formatting_lit\n                              (CamlinternalFormatBasics.Close_box,\n                                CamlinternalFormatBasics.End_of_format))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Char_literal\n                    ('.',\n                      (CamlinternalFormatBasics.Formatting_lit\n                         (CamlinternalFormatBasics.Close_box,\n                           CamlinternalFormatBasics.End_of_format))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String\n          (CamlinternalFormatBasics.No_padding,\n            (CamlinternalFormatBasics.Char_literal\n               ('.',\n                 (CamlinternalFormatBasics.Formatting_lit\n                    (CamlinternalFormatBasics.Close_box,\n                      CamlinternalFormatBasics.End_of_format))))))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            ('.',\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       ('.',\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  ('.',\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.ident","arity":1},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"pat_construct","text":"Missing_type_constraint","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.Formatting_gen\n         ((CamlinternalFormatBasics.Open_box\n             (CamlinternalFormatBasics.Format\n                (CamlinternalFormatBasics.End_of_format, \"\"))),\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.Formatting_lit\n                   ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                     (CamlinternalFormatBasics.String\n                        (CamlinternalFormatBasics.No_padding,\n                          (CamlinternalFormatBasics.Formatting_lit\n                             (CamlinternalFormatBasics.Close_box,\n                               CamlinternalFormatBasics.End_of_format)))))))))),\n       \"@[%s@ %s@]\")) \"Existential types introduced in a constructor pattern\"\n  \"must be bound by a type constraint on the argument.\"","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.Formatting_gen\n      ((CamlinternalFormatBasics.Open_box\n          (CamlinternalFormatBasics.Format\n             (CamlinternalFormatBasics.End_of_format, \"\"))),\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.Formatting_lit\n                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.Formatting_lit\n                          (CamlinternalFormatBasics.Close_box,\n                            CamlinternalFormatBasics.End_of_format)))))))))),\n    \"@[%s@ %s@]\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_gen\n  ((CamlinternalFormatBasics.Open_box\n      (CamlinternalFormatBasics.Format\n         (CamlinternalFormatBasics.End_of_format, \"\"))),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Formatting_lit\n                      (CamlinternalFormatBasics.Close_box,\n                        CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Open_box\n  (CamlinternalFormatBasics.Format\n     (CamlinternalFormatBasics.End_of_format, \"\"))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Format (CamlinternalFormatBasics.End_of_format, \"\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Formatting_lit\n                 (CamlinternalFormatBasics.Close_box,\n                   CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Formatting_lit\n            (CamlinternalFormatBasics.Close_box,\n              CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Formatting_lit\n       (CamlinternalFormatBasics.Close_box,\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  (CamlinternalFormatBasics.Close_box,\n    CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Close_box","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"pat_construct","text":"Wrong_expected_kind\n(sort, ctx, ty)","arity":3},
  {"type":"pat_construct","text":"Expression\nexplanation","arity":1},
  {"type":"pat_construct","text":"Pattern","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"Constructor","arity":0},
  {"type":"pat_construct","text":"Boolean","arity":0},
  {"type":"pat_construct","text":"List","arity":0},
  {"type":"pat_construct","text":"Unit","arity":0},
  {"type":"pat_construct","text":"Record","arity":0},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This \",\n           (CamlinternalFormatBasics.String\n              (CamlinternalFormatBasics.No_padding,\n                (CamlinternalFormatBasics.String_literal\n                   (\" should not be a \",\n                     (CamlinternalFormatBasics.String\n                        (CamlinternalFormatBasics.No_padding,\n                          (CamlinternalFormatBasics.Char_literal\n                             (',',\n                               (CamlinternalFormatBasics.Formatting_lit\n                                  ((CamlinternalFormatBasics.Break\n                                      (\"@ \", 1, 0)),\n                                    (CamlinternalFormatBasics.String_literal\n                                       (\"the expected type is\",\n                                         (CamlinternalFormatBasics.Formatting_lit\n                                            ((CamlinternalFormatBasics.Break\n                                                (\"@ \", 1, 0)),\n                                              (CamlinternalFormatBasics.Alpha\n                                                 (CamlinternalFormatBasics.Theta\n                                                    CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n       \"This %s should not be a %s,@ the expected type is@ %a%t\")) ctx sort\n  (Style.as_inline_code Printtyp.type_expr) ty\n  (report_type_expected_explanation_opt explanation)","arity":9},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This \",\n        (CamlinternalFormatBasics.String\n           (CamlinternalFormatBasics.No_padding,\n             (CamlinternalFormatBasics.String_literal\n                (\" should not be a \",\n                  (CamlinternalFormatBasics.String\n                     (CamlinternalFormatBasics.No_padding,\n                       (CamlinternalFormatBasics.Char_literal\n                          (',',\n                            (CamlinternalFormatBasics.Formatting_lit\n                               ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                 (CamlinternalFormatBasics.String_literal\n                                    (\"the expected type is\",\n                                      (CamlinternalFormatBasics.Formatting_lit\n                                         ((CamlinternalFormatBasics.Break\n                                             (\"@ \", 1, 0)),\n                                           (CamlinternalFormatBasics.Alpha\n                                              (CamlinternalFormatBasics.Theta\n                                                 CamlinternalFormatBasics.End_of_format)))))))))))))))))),\n    \"This %s should not be a %s,@ the expected type is@ %a%t\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.String_literal\n            (\" should not be a \",\n              (CamlinternalFormatBasics.String\n                 (CamlinternalFormatBasics.No_padding,\n                   (CamlinternalFormatBasics.Char_literal\n                      (',',\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.String_literal\n                                (\"the expected type is\",\n                                  (CamlinternalFormatBasics.Formatting_lit\n                                     ((CamlinternalFormatBasics.Break\n                                         (\"@ \", 1, 0)),\n                                       (CamlinternalFormatBasics.Alpha\n                                          (CamlinternalFormatBasics.Theta\n                                             CamlinternalFormatBasics.End_of_format)))))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.String_literal\n       (\" should not be a \",\n         (CamlinternalFormatBasics.String\n            (CamlinternalFormatBasics.No_padding,\n              (CamlinternalFormatBasics.Char_literal\n                 (',',\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.String_literal\n                           (\"the expected type is\",\n                             (CamlinternalFormatBasics.Formatting_lit\n                                ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                                  (CamlinternalFormatBasics.Alpha\n                                     (CamlinternalFormatBasics.Theta\n                                        CamlinternalFormatBasics.End_of_format)))))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\" should not be a \",\n    (CamlinternalFormatBasics.String\n       (CamlinternalFormatBasics.No_padding,\n         (CamlinternalFormatBasics.Char_literal\n            (',',\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"the expected type is\",\n                        (CamlinternalFormatBasics.Formatting_lit\n                           ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                             (CamlinternalFormatBasics.Alpha\n                                (CamlinternalFormatBasics.Theta\n                                   CamlinternalFormatBasics.End_of_format)))))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String\n  (CamlinternalFormatBasics.No_padding,\n    (CamlinternalFormatBasics.Char_literal\n       (',',\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.String_literal\n                 (\"the expected type is\",\n                   (CamlinternalFormatBasics.Formatting_lit\n                      ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                        (CamlinternalFormatBasics.Alpha\n                           (CamlinternalFormatBasics.Theta\n                              CamlinternalFormatBasics.End_of_format)))))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.No_padding","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Char_literal\n  (',',\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.String_literal\n            (\"the expected type is\",\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Theta\n                         CamlinternalFormatBasics.End_of_format)))))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"the expected type is\",\n         (CamlinternalFormatBasics.Formatting_lit\n            ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Theta\n                    CamlinternalFormatBasics.End_of_format)))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"the expected type is\",\n    (CamlinternalFormatBasics.Formatting_lit\n       ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n         (CamlinternalFormatBasics.Alpha\n            (CamlinternalFormatBasics.Theta\n               CamlinternalFormatBasics.End_of_format)))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format)","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Theta CamlinternalFormatBasics.End_of_format","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"report_type_expected_explanation_opt explanation","arity":1},
  {"type":"pat_construct","text":"Expr_not_a_record_type\nty","arity":1},
  {"type":"apply","text":"Location.errorf ?loc:(Some loc) ?sub:None ?footnote:None\n  (CamlinternalFormatBasics.Format\n     ((CamlinternalFormatBasics.String_literal\n         (\"This expression has type \",\n           (CamlinternalFormatBasics.Alpha\n              (CamlinternalFormatBasics.Formatting_lit\n                 ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                   (CamlinternalFormatBasics.String_literal\n                      (\"which is not a record type.\",\n                        CamlinternalFormatBasics.End_of_format))))))),\n       \"This expression has type %a@ which is not a record type.\"))\n  (Style.as_inline_code Printtyp.type_expr) ty","arity":6},
  {"type":"construct","text":"Some loc","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"CamlinternalFormatBasics.Format\n  ((CamlinternalFormatBasics.String_literal\n      (\"This expression has type \",\n        (CamlinternalFormatBasics.Alpha\n           (CamlinternalFormatBasics.Formatting_lit\n              ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n                (CamlinternalFormatBasics.String_literal\n                   (\"which is not a record type.\",\n                     CamlinternalFormatBasics.End_of_format))))))),\n    \"This expression has type %a@ which is not a record type.\")","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"This expression has type \",\n    (CamlinternalFormatBasics.Alpha\n       (CamlinternalFormatBasics.Formatting_lit\n          ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n            (CamlinternalFormatBasics.String_literal\n               (\"which is not a record type.\",\n                 CamlinternalFormatBasics.End_of_format))))))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Alpha\n  (CamlinternalFormatBasics.Formatting_lit\n     ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n       (CamlinternalFormatBasics.String_literal\n          (\"which is not a record type.\",\n            CamlinternalFormatBasics.End_of_format))))","arity":1},
  {"type":"construct","text":"CamlinternalFormatBasics.Formatting_lit\n  ((CamlinternalFormatBasics.Break (\"@ \", 1, 0)),\n    (CamlinternalFormatBasics.String_literal\n       (\"which is not a record type.\",\n         CamlinternalFormatBasics.End_of_format)))","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.Break (\"@ \", 1, 0)","arity":3},
  {"type":"construct","text":"CamlinternalFormatBasics.String_literal\n  (\"which is not a record type.\", CamlinternalFormatBasics.End_of_format)","arity":2},
  {"type":"construct","text":"CamlinternalFormatBasics.End_of_format","arity":0},
  {"type":"apply","text":"Style.as_inline_code Printtyp.type_expr","arity":1},
  {"type":"apply","text":"Printtyp.wrap_printing_env_error env (fun () -> report_error ~loc env err)","arity":2},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"report_error ~loc env err","arity":3},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Location.register_error_of_exn\n  (function\n   | Error (loc, env, err) -> Some (report_error ~loc env err)\n   | Error_forward err -> Some err\n   | _ -> None)","arity":1},
  {"type":"pat_construct","text":"Error\n(loc, env, err)","arity":3},
  {"type":"construct","text":"Some (report_error ~loc env err)","arity":1},
  {"type":"apply","text":"report_error ~loc env err","arity":3},
  {"type":"pat_construct","text":"Error_forward\nerr","arity":1},
  {"type":"construct","text":"Some err","arity":1},
  {"type":"construct","text":"None","arity":0},
  {"type":"pat_construct","text":"()","arity":0},
  {"type":"apply","text":"Persistent_env.add_delayed_check_forward := add_delayed_check","arity":2},
  {"type":"apply","text":"Env.add_delayed_check_forward := add_delayed_check","arity":2},
  {"type":"construct","text":"()","arity":0},
  {"type":"apply","text":"check_partial ?lev a b c (List.map Parmatch.typed_case cases)","arity":5},
  {"type":"apply","text":"List.map Parmatch.typed_case cases","arity":2},
  {"type":"apply","text":"type_expect ?recarg:None env e ty","arity":4},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_exp ?recarg:None env e","arity":3},
  {"type":"construct","text":"None","arity":0},
  {"type":"apply","text":"type_argument ?explanation:None ?recarg:None env e t1 t2","arity":6},
  {"type":"construct","text":"None","arity":0},
  {"type":"construct","text":"None","arity":0}
]